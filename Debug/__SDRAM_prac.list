
__SDRAM_prac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800ce58  0800ce58  0000de58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d05c  0800d05c  0016dbd4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d05c  0800d05c  0000e05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d064  0800d064  0016dbd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d064  0800d064  0000e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d068  0800d068  0000e068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800d06c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0016dbd4  2**0
                  CONTENTS
 10 .bss          00000c18  20000068  20000068  0000f068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000c80  20000c80  0000f068  2**0
                  ALLOC
 12 .sdram        0015dbd4  c0000000  c0000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0016dbd4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c3df  00000000  00000000  0016dc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005b24  00000000  00000000  00199fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001ffa7  00000000  00000000  0019fb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001710  00000000  00000000  001bfab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003a53  00000000  00000000  001c11c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b54b  00000000  00000000  001c4c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00039d41  00000000  00000000  001f015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f8b24  00000000  00000000  00229e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  003229c3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004eb8  00000000  00000000  00322a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000069  00000000  00000000  003278c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ce40 	.word	0x0800ce40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800ce40 	.word	0x0800ce40

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <br_aes_ct64_bitslice_Sbox>:
        br_enc32le(dst, *v ++);
        dst += 4;
    }
}

static void br_aes_ct64_bitslice_Sbox(uint64_t *q) {
 8000580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000584:	4602      	mov	r2, r0
 8000586:	b0a9      	sub	sp, #164	@ 0xa4
    uint64_t t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
    uint64_t t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
    uint64_t t60, t61, t62, t63, t64, t65, t66, t67;
    uint64_t s0, s1, s2, s3, s4, s5, s6, s7;

    x0 = q[7];
 8000588:	e9d0 410e 	ldrd	r4, r1, [r0, #56]	@ 0x38
    x1 = q[6];
    x2 = q[5];
    x3 = q[4];
 800058c:	e9d2 ec08 	ldrd	lr, ip, [r2, #32]
    x4 = q[3];
    x5 = q[2];
 8000590:	e9d2 7804 	ldrd	r7, r8, [r2, #16]
    x1 = q[6];
 8000594:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    x6 = q[1];
 8000596:	f8d2 b008 	ldr.w	fp, [r2, #8]

    /*
     * Top linear transformation.
     */
    y14 = x3 ^ x5;
    y13 = x0 ^ x6;
 800059a:	9201      	str	r2, [sp, #4]
    x1 = q[6];
 800059c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
    y9 = x0 ^ x3;
    y8 = x0 ^ x5;
    t0 = x1 ^ x2;
 800059e:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 80005a0:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    y13 = x0 ^ x6;
 80005a2:	68d2      	ldr	r2, [r2, #12]
    t0 = x1 ^ x2;
 80005a4:	9002      	str	r0, [sp, #8]
 80005a6:	ea86 0900 	eor.w	r9, r6, r0
    y13 = x0 ^ x6;
 80005aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80005ac:	ea84 000b 	eor.w	r0, r4, fp
 80005b0:	4051      	eors	r1, r2
    y14 = x3 ^ x5;
 80005b2:	ea8e 0207 	eor.w	r2, lr, r7
    y1 = t0 ^ x7;
    y4 = y1 ^ x3;
    y12 = y13 ^ y14;
 80005b6:	ea82 0600 	eor.w	r6, r2, r0
 80005ba:	900b      	str	r0, [sp, #44]	@ 0x2c
    y2 = y1 ^ x0;
    y5 = y1 ^ x6;
    y3 = y5 ^ y8;
    t1 = x4 ^ y12;
 80005bc:	9801      	ldr	r0, [sp, #4]
    y12 = y13 ^ y14;
 80005be:	9210      	str	r2, [sp, #64]	@ 0x40
    t1 = x4 ^ y12;
 80005c0:	9617      	str	r6, [sp, #92]	@ 0x5c
    y12 = y13 ^ y14;
 80005c2:	4632      	mov	r2, r6
    t1 = x4 ^ y12;
 80005c4:	6986      	ldr	r6, [r0, #24]
    y13 = x0 ^ x6;
 80005c6:	9103      	str	r1, [sp, #12]
    t1 = x4 ^ y12;
 80005c8:	ea82 0a06 	eor.w	sl, r2, r6
    y15 = t1 ^ x5;
    y20 = t1 ^ x1;
 80005cc:	9e02      	ldr	r6, [sp, #8]
    t1 = x4 ^ y12;
 80005ce:	9801      	ldr	r0, [sp, #4]
    y20 = t1 ^ x1;
 80005d0:	ea86 060a 	eor.w	r6, r6, sl
 80005d4:	9619      	str	r6, [sp, #100]	@ 0x64
    y15 = t1 ^ x5;
 80005d6:	ea87 060a 	eor.w	r6, r7, sl
 80005da:	9606      	str	r6, [sp, #24]
    y8 = x0 ^ x5;
 80005dc:	ea84 0607 	eor.w	r6, r4, r7
    y12 = y13 ^ y14;
 80005e0:	9f03      	ldr	r7, [sp, #12]
    y8 = x0 ^ x5;
 80005e2:	9604      	str	r6, [sp, #16]
    y14 = x3 ^ x5;
 80005e4:	ea8c 0108 	eor.w	r1, ip, r8
    y12 = y13 ^ y14;
 80005e8:	ea81 0607 	eor.w	r6, r1, r7
 80005ec:	9111      	str	r1, [sp, #68]	@ 0x44
    t1 = x4 ^ y12;
 80005ee:	9618      	str	r6, [sp, #96]	@ 0x60
    y12 = y13 ^ y14;
 80005f0:	4631      	mov	r1, r6
    t1 = x4 ^ y12;
 80005f2:	69c6      	ldr	r6, [r0, #28]
 80005f4:	ea81 0706 	eor.w	r7, r1, r6
    y8 = x0 ^ x5;
 80005f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
    t0 = x1 ^ x2;
 80005fa:	405d      	eors	r5, r3
    y20 = t1 ^ x1;
 80005fc:	ea83 0a07 	eor.w	sl, r3, r7
    y15 = t1 ^ x5;
 8000600:	ea88 0607 	eor.w	r6, r8, r7
    y8 = x0 ^ x5;
 8000604:	ea81 0308 	eor.w	r3, r1, r8
 8000608:	9305      	str	r3, [sp, #20]
    y15 = t1 ^ x5;
 800060a:	4632      	mov	r2, r6
    y1 = t0 ^ x7;
 800060c:	6806      	ldr	r6, [r0, #0]
 800060e:	ea86 0609 	eor.w	r6, r6, r9
 8000612:	4637      	mov	r7, r6
    y5 = y1 ^ x6;
 8000614:	ea8b 0606 	eor.w	r6, fp, r6
 8000618:	960c      	str	r6, [sp, #48]	@ 0x30
    y1 = t0 ^ x7;
 800061a:	6846      	ldr	r6, [r0, #4]
    t3 = y3 & y6;
    t4 = t3 ^ t2;
    t5 = y4 & x7;
    t6 = t5 ^ t2;
    t7 = y13 & y16;
    t8 = y5 & y1;
 800061c:	9714      	str	r7, [sp, #80]	@ 0x50
    y1 = t0 ^ x7;
 800061e:	4601      	mov	r1, r0
 8000620:	406e      	eors	r6, r5
 8000622:	4630      	mov	r0, r6
    y5 = y1 ^ x6;
 8000624:	68ce      	ldr	r6, [r1, #12]
 8000626:	4046      	eors	r6, r0
 8000628:	960d      	str	r6, [sp, #52]	@ 0x34
    y9 = x0 ^ x3;
 800062a:	ea84 060e 	eor.w	r6, r4, lr
 800062e:	4633      	mov	r3, r6
    y4 = y1 ^ x3;
 8000630:	ea8e 0607 	eor.w	r6, lr, r7
 8000634:	9615      	str	r6, [sp, #84]	@ 0x54
    y9 = x0 ^ x3;
 8000636:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    y11 = y20 ^ y9;
 8000638:	9312      	str	r3, [sp, #72]	@ 0x48
    y9 = x0 ^ x3;
 800063a:	ea86 060c 	eor.w	r6, r6, ip
 800063e:	4631      	mov	r1, r6
    y4 = y1 ^ x3;
 8000640:	ea8c 0600 	eor.w	r6, ip, r0
 8000644:	9616      	str	r6, [sp, #88]	@ 0x58
    y11 = y20 ^ y9;
 8000646:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8000648:	9113      	str	r1, [sp, #76]	@ 0x4c
 800064a:	ea83 0c06 	eor.w	ip, r3, r6
    y10 = y15 ^ t0;
 800064e:	9b06      	ldr	r3, [sp, #24]
    y11 = y20 ^ y9;
 8000650:	4666      	mov	r6, ip
 8000652:	ea81 0c0a 	eor.w	ip, r1, sl
 8000656:	f8cd c008 	str.w	ip, [sp, #8]
    y10 = y15 ^ t0;
 800065a:	ea89 0c03 	eor.w	ip, r9, r3
 800065e:	f8cd c01c 	str.w	ip, [sp, #28]
    y16 = t0 ^ y11;
 8000662:	9609      	str	r6, [sp, #36]	@ 0x24
 8000664:	ea89 0c06 	eor.w	ip, r9, r6
 8000668:	9e02      	ldr	r6, [sp, #8]
    y3 = y5 ^ y8;
 800066a:	9b04      	ldr	r3, [sp, #16]
    y16 = t0 ^ y11;
 800066c:	4661      	mov	r1, ip
    y10 = y15 ^ t0;
 800066e:	ea85 0c02 	eor.w	ip, r5, r2
 8000672:	f8cd c020 	str.w	ip, [sp, #32]
    y16 = t0 ^ y11;
 8000676:	ea85 0c06 	eor.w	ip, r5, r6
    t8 = y5 & y1;
 800067a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    t18 = t6 ^ t16;
    t19 = t9 ^ t14;
    t20 = t11 ^ t16;
    t21 = t17 ^ y20;
    t22 = t18 ^ y19;
    t23 = t19 ^ y21;
 800067c:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
    t8 = y5 & y1;
 8000680:	ea07 0605 	and.w	r6, r7, r5
    t23 = t19 ^ y21;
 8000684:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8000686:	9f03      	ldr	r7, [sp, #12]
 8000688:	910e      	str	r1, [sp, #56]	@ 0x38
 800068a:	406e      	eors	r6, r5
    t8 = y5 & y1;
 800068c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800068e:	4005      	ands	r5, r0
    t23 = t19 ^ y21;
 8000690:	407d      	eors	r5, r7
 8000692:	ea85 080c 	eor.w	r8, r5, ip
    y3 = y5 ^ y8;
 8000696:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000698:	ea83 0c05 	eor.w	ip, r3, r5
 800069c:	9b05      	ldr	r3, [sp, #20]
 800069e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80006a0:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
    t23 = t19 ^ y21;
 80006a4:	404e      	eors	r6, r1
    y6 = y15 ^ x7;
 80006a6:	9901      	ldr	r1, [sp, #4]
    y3 = y5 ^ y8;
 80006a8:	ea83 0c05 	eor.w	ip, r3, r5
 80006ac:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
    y6 = y15 ^ x7;
 80006b0:	680d      	ldr	r5, [r1, #0]
 80006b2:	9f06      	ldr	r7, [sp, #24]
 80006b4:	684b      	ldr	r3, [r1, #4]
    y17 = y10 ^ y11;
 80006b6:	9907      	ldr	r1, [sp, #28]
    t2 = y12 & y15;
 80006b8:	9225      	str	r2, [sp, #148]	@ 0x94
    y6 = y15 ^ x7;
 80006ba:	ea85 0c07 	eor.w	ip, r5, r7
 80006be:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 80006c2:	ea83 0c02 	eor.w	ip, r3, r2
    y17 = y10 ^ y11;
 80006c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    y6 = y15 ^ x7;
 80006c8:	f8cd c078 	str.w	ip, [sp, #120]	@ 0x78
    y17 = y10 ^ y11;
 80006cc:	ea81 0c03 	eor.w	ip, r1, r3
 80006d0:	9908      	ldr	r1, [sp, #32]
 80006d2:	9b02      	ldr	r3, [sp, #8]
    t2 = y12 & y15;
 80006d4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
    y17 = y10 ^ y11;
 80006d6:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 80006da:	ea81 0c03 	eor.w	ip, r1, r3
 80006de:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
    t2 = y12 & y15;
 80006e2:	ea05 0c07 	and.w	ip, r5, r7
 80006e6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
    t21 = t17 ^ y20;
 80006e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
    y2 = y1 ^ x0;
 80006ea:	9024      	str	r0, [sp, #144]	@ 0x90
    t2 = y12 & y15;
 80006ec:	ea05 0702 	and.w	r7, r5, r2
    t5 = y4 & x7;
 80006f0:	9a01      	ldr	r2, [sp, #4]
 80006f2:	6815      	ldr	r5, [r2, #0]
 80006f4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80006f6:	ea05 0e02 	and.w	lr, r5, r2
    t22 = t18 ^ y19;
 80006fa:	9a04      	ldr	r2, [sp, #16]
    t5 = y4 & x7;
 80006fc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
    t22 = t18 ^ y19;
 80006fe:	ea8e 0e02 	eor.w	lr, lr, r2
 8000702:	9a07      	ldr	r2, [sp, #28]
 8000704:	ea8e 0e02 	eor.w	lr, lr, r2
    t5 = y4 & x7;
 8000708:	9a01      	ldr	r2, [sp, #4]
 800070a:	6852      	ldr	r2, [r2, #4]
 800070c:	ea02 0905 	and.w	r9, r2, r5
    t22 = t18 ^ y19;
 8000710:	9a05      	ldr	r2, [sp, #20]
    t24 = t20 ^ y18;
 8000712:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
    t22 = t18 ^ y19;
 8000714:	ea89 0902 	eor.w	r9, r9, r2
 8000718:	9a08      	ldr	r2, [sp, #32]
 800071a:	ea89 0902 	eor.w	r9, r9, r2
    t21 = t17 ^ y20;
 800071e:	ea83 010c 	eor.w	r1, r3, ip
    t22 = t18 ^ y19;
 8000722:	ea89 0907 	eor.w	r9, r9, r7
    t21 = t17 ^ y20;
 8000726:	ea8a 0307 	eor.w	r3, sl, r7
    y2 = y1 ^ x0;
 800072a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    t22 = t18 ^ y19;
 800072c:	ea8e 0b0c 	eor.w	fp, lr, ip
    y2 = y1 ^ x0;
 8000730:	ea84 0c07 	eor.w	ip, r4, r7
    t24 = t20 ^ y18;
 8000734:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
    y2 = y1 ^ x0;
 8000736:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
    t24 = t20 ^ y18;
 800073a:	ea84 0e07 	eor.w	lr, r4, r7
    y2 = y1 ^ x0;
 800073e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    y7 = x7 ^ y11;
 8000740:	9c01      	ldr	r4, [sp, #4]
    y2 = y1 ^ x0;
 8000742:	ea87 0c00 	eor.w	ip, r7, r0
 8000746:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
    y7 = x7 ^ y11;
 800074a:	6824      	ldr	r4, [r4, #0]
 800074c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800074e:	ea84 0c00 	eor.w	ip, r4, r0
 8000752:	9c01      	ldr	r4, [sp, #4]
 8000754:	f8cd c07c 	str.w	ip, [sp, #124]	@ 0x7c
    t24 = t20 ^ y18;
 8000758:	406f      	eors	r7, r5
    y7 = x7 ^ y11;
 800075a:	6864      	ldr	r4, [r4, #4]
    t24 = t20 ^ y18;
 800075c:	463a      	mov	r2, r7
    y7 = x7 ^ y11;
 800075e:	9f02      	ldr	r7, [sp, #8]
 8000760:	ea84 0c07 	eor.w	ip, r4, r7
    t7 = y13 & y16;
 8000764:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8000766:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
    y7 = x7 ^ y11;
 8000768:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
    t7 = y13 & y16;
 800076c:	4027      	ands	r7, r4
    t23 = t19 ^ y21;
 800076e:	407e      	eors	r6, r7
    t24 = t20 ^ y18;
 8000770:	ea8e 0707 	eor.w	r7, lr, r7
 8000774:	970a      	str	r7, [sp, #40]	@ 0x28
    t7 = y13 & y16;
 8000776:	9f03      	ldr	r7, [sp, #12]
    t12 = y9 & y11;
 8000778:	9c12      	ldr	r4, [sp, #72]	@ 0x48
    t7 = y13 & y16;
 800077a:	402f      	ands	r7, r5
    t23 = t19 ^ y21;
 800077c:	ea88 0507 	eor.w	r5, r8, r7
    t24 = t20 ^ y18;
 8000780:	407a      	eors	r2, r7
    t12 = y9 & y11;
 8000782:	ea04 0800 	and.w	r8, r4, r0
 8000786:	9f02      	ldr	r7, [sp, #8]
 8000788:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
    t13 = y14 & y17;
 800078a:	9811      	ldr	r0, [sp, #68]	@ 0x44
    t12 = y9 & y11;
 800078c:	ea04 0a07 	and.w	sl, r4, r7
    t13 = y14 & y17;
 8000790:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8000792:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8000794:	4027      	ands	r7, r4
 8000796:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8000798:	ea00 0e04 	and.w	lr, r0, r4
    t3 = y3 & y6;
 800079c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800079e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80007a0:	ea04 0c00 	and.w	ip, r4, r0
    t21 = t17 ^ y20;
 80007a4:	ea8c 0c01 	eor.w	ip, ip, r1
    t3 = y3 & y6;
 80007a8:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80007aa:	991c      	ldr	r1, [sp, #112]	@ 0x70
    t15 = y8 & y10;
 80007ac:	9808      	ldr	r0, [sp, #32]
    t14 = t13 ^ t12;
 80007ae:	ea87 0708 	eor.w	r7, r7, r8
    t23 = t19 ^ y21;
 80007b2:	407e      	eors	r6, r7
    t21 = t17 ^ y20;
 80007b4:	ea8c 0c07 	eor.w	ip, ip, r7
    t3 = y3 & y6;
 80007b8:	ea01 0704 	and.w	r7, r1, r4
    t21 = t17 ^ y20;
 80007bc:	405f      	eors	r7, r3
    t15 = y8 & y10;
 80007be:	9904      	ldr	r1, [sp, #16]
 80007c0:	9b07      	ldr	r3, [sp, #28]
    t10 = y2 & y7;
 80007c2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
    t15 = y8 & y10;
 80007c4:	400b      	ands	r3, r1
 80007c6:	9905      	ldr	r1, [sp, #20]
 80007c8:	4001      	ands	r1, r0
    t10 = y2 & y7;
 80007ca:	981f      	ldr	r0, [sp, #124]	@ 0x7c
    t14 = t13 ^ t12;
 80007cc:	ea8e 0e0a 	eor.w	lr, lr, sl
    t23 = t19 ^ y21;
 80007d0:	ea85 050e 	eor.w	r5, r5, lr
    t21 = t17 ^ y20;
 80007d4:	ea87 070e 	eor.w	r7, r7, lr
    t10 = y2 & y7;
 80007d8:	ea04 0e00 	and.w	lr, r4, r0
    t24 = t20 ^ y18;
 80007dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
    t16 = t15 ^ t12;
 80007de:	ea83 0308 	eor.w	r3, r3, r8
    t24 = t20 ^ y18;
 80007e2:	ea80 040e 	eor.w	r4, r0, lr
    t22 = t18 ^ y19;
 80007e6:	ea8b 0803 	eor.w	r8, fp, r3
    t24 = t20 ^ y18;
 80007ea:	405c      	eors	r4, r3
    t10 = y2 & y7;
 80007ec:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80007ee:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80007f0:	4003      	ands	r3, r0
    t16 = t15 ^ t12;
 80007f2:	ea81 010a 	eor.w	r1, r1, sl
    t24 = t20 ^ y18;
 80007f6:	405a      	eors	r2, r3
    t22 = t18 ^ y19;
 80007f8:	ea89 0901 	eor.w	r9, r9, r1
    t24 = t20 ^ y18;
 80007fc:	404a      	eors	r2, r1

    t25 = t21 ^ t22;
    t26 = t21 & t23;
 80007fe:	ea0c 0106 	and.w	r1, ip, r6
 8000802:	ea07 0305 	and.w	r3, r7, r5
    t27 = t24 ^ t26;
    t28 = t25 & t27;
    t29 = t28 ^ t22;
    t30 = t23 ^ t24;
    t31 = t22 ^ t26;
 8000806:	ea88 0e01 	eor.w	lr, r8, r1
    t30 = t23 ^ t24;
 800080a:	ea86 0b04 	eor.w	fp, r6, r4
    t32 = t31 & t30;
 800080e:	ea0b 0b0e 	and.w	fp, fp, lr
    t30 = t23 ^ t24;
 8000812:	ea85 0a02 	eor.w	sl, r5, r2
    t31 = t22 ^ t26;
 8000816:	ea89 0e03 	eor.w	lr, r9, r3
    t32 = t31 & t30;
 800081a:	ea0a 0a0e 	and.w	sl, sl, lr
    t27 = t24 ^ t26;
 800081e:	ea84 0e01 	eor.w	lr, r4, r1
    t33 = t32 ^ t24;
    t34 = t23 ^ t33;
    t35 = t27 ^ t33;
 8000822:	ea81 010b 	eor.w	r1, r1, fp
    t36 = t24 & t35;
 8000826:	4021      	ands	r1, r4
    t33 = t32 ^ t24;
 8000828:	ea84 040b 	eor.w	r4, r4, fp
    t34 = t23 ^ t33;
 800082c:	4066      	eors	r6, r4
    t37 = t36 ^ t34;
 800082e:	404e      	eors	r6, r1
    t25 = t21 ^ t22;
 8000830:	ea8c 0c08 	eor.w	ip, ip, r8
    t37 = t36 ^ t34;
 8000834:	960a      	str	r6, [sp, #40]	@ 0x28
    t43 = t29 ^ t40;
    t44 = t33 ^ t37;
    t45 = t42 ^ t41;
    z0 = t44 & y15;
    z1 = t37 & y6;
    z2 = t33 & x7;
 8000836:	9801      	ldr	r0, [sp, #4]
    t38 = t27 ^ t36;
 8000838:	ea8e 0101 	eor.w	r1, lr, r1
    t28 = t25 & t27;
 800083c:	ea0c 0e0e 	and.w	lr, ip, lr
    t29 = t28 ^ t22;
 8000840:	ea8e 0e08 	eor.w	lr, lr, r8
    z2 = t33 & x7;
 8000844:	6806      	ldr	r6, [r0, #0]
    z3 = t43 & y16;
    z4 = t40 & y1;
 8000846:	9814      	ldr	r0, [sp, #80]	@ 0x50
    t39 = t29 & t38;
 8000848:	ea01 010e 	and.w	r1, r1, lr
    t40 = t25 ^ t39;
 800084c:	ea81 010c 	eor.w	r1, r1, ip
    z2 = t33 & x7;
 8000850:	ea06 0c04 	and.w	ip, r6, r4
 8000854:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
    z5 = t29 & y7;
    z6 = t42 & y11;
    z7 = t45 & y17;
    z8 = t41 & y10;
    z9 = t44 & y12;
    z10 = t37 & y3;
 8000858:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    z4 = t40 & y1;
 800085a:	ea00 0c01 	and.w	ip, r0, r1
    z10 = t37 & y3;
 800085e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
    z4 = t40 & y1;
 8000860:	f8cd c098 	str.w	ip, [sp, #152]	@ 0x98
    z10 = t37 & y3;
 8000864:	ea00 0806 	and.w	r8, r0, r6
    z5 = t29 & y7;
 8000868:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
    z11 = t33 & y4;
    z12 = t43 & y13;
    z13 = t40 & y5;
 800086a:	980c      	ldr	r0, [sp, #48]	@ 0x30
    z5 = t29 & y7;
 800086c:	ea06 0b0e 	and.w	fp, r6, lr
    z14 = t29 & y2;
 8000870:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8000872:	ea06 060e 	and.w	r6, r6, lr
    z13 = t40 & y5;
 8000876:	ea00 0c01 	and.w	ip, r0, r1
    z14 = t29 & y2;
 800087a:	961b      	str	r6, [sp, #108]	@ 0x6c
    z1 = t37 & y6;
 800087c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800087e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8000880:	4006      	ands	r6, r0
    z11 = t33 & y4;
 8000882:	9815      	ldr	r0, [sp, #84]	@ 0x54
    z1 = t37 & y6;
 8000884:	961d      	str	r6, [sp, #116]	@ 0x74
    /*
     * Bottom linear transformation.
     */
    t46 = z15 ^ z16;
    t47 = z10 ^ z11;
    t48 = z5 ^ z13;
 8000886:	ea8c 0c0b 	eor.w	ip, ip, fp
 800088a:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
    z11 = t33 & y4;
 800088e:	ea00 0c04 	and.w	ip, r0, r4
    t47 = z10 ^ z11;
 8000892:	ea8c 0c08 	eor.w	ip, ip, r8
 8000896:	f8cd c09c 	str.w	ip, [sp, #156]	@ 0x9c
    t27 = t24 ^ t26;
 800089a:	ea82 0c03 	eor.w	ip, r2, r3
    t35 = t27 ^ t33;
 800089e:	ea83 030a 	eor.w	r3, r3, sl
    t36 = t24 & t35;
 80008a2:	4013      	ands	r3, r2
    t33 = t32 ^ t24;
 80008a4:	ea82 020a 	eor.w	r2, r2, sl
    t25 = t21 ^ t22;
 80008a8:	ea87 0709 	eor.w	r7, r7, r9
    t34 = t23 ^ t33;
 80008ac:	4055      	eors	r5, r2
    t37 = t36 ^ t34;
 80008ae:	ea85 0a03 	eor.w	sl, r5, r3
    t38 = t27 ^ t36;
 80008b2:	ea8c 0303 	eor.w	r3, ip, r3
    t28 = t25 & t27;
 80008b6:	ea07 0c0c 	and.w	ip, r7, ip
    t29 = t28 ^ t22;
 80008ba:	ea8c 0c09 	eor.w	ip, ip, r9
    z2 = t33 & x7;
 80008be:	9801      	ldr	r0, [sp, #4]
    t49 = z9 ^ z10;
    t50 = z2 ^ z12;
    t51 = z2 ^ z5;
 80008c0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
    z13 = t40 & y5;
 80008c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
    z1 = t37 & y6;
 80008c4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
    t39 = t29 & t38;
 80008c8:	ea03 030c 	and.w	r3, r3, ip
    t40 = t25 ^ t39;
 80008cc:	407b      	eors	r3, r7
    z2 = t33 & x7;
 80008ce:	6847      	ldr	r7, [r0, #4]
    z4 = t40 & y1;
 80008d0:	9824      	ldr	r0, [sp, #144]	@ 0x90
    z2 = t33 & x7;
 80008d2:	ea07 0902 	and.w	r9, r7, r2
    t51 = z2 ^ z5;
 80008d6:	ea86 0b0b 	eor.w	fp, r6, fp
    z10 = t37 & y3;
 80008da:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
    z5 = t29 & y7;
 80008dc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
    z2 = t33 & x7;
 80008de:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
    z4 = t40 & y1;
 80008e2:	ea00 0903 	and.w	r9, r0, r3
 80008e6:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
    z10 = t37 & y3;
 80008ea:	ea07 090a 	and.w	r9, r7, sl
    z5 = t29 & y7;
 80008ee:	ea06 070c 	and.w	r7, r6, ip
    z14 = t29 & y2;
 80008f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
    z10 = t37 & y3;
 80008f4:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
    z14 = t29 & y2;
 80008f8:	ea06 090c 	and.w	r9, r6, ip
    z1 = t37 & y6;
 80008fc:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
    z14 = t29 & y2;
 80008fe:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    z1 = t37 & y6;
 8000902:	ea06 090a 	and.w	r9, r6, sl
    t51 = z2 ^ z5;
 8000906:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
    z13 = t40 & y5;
 800090a:	401d      	ands	r5, r3
    z1 = t37 & y6;
 800090c:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
    t51 = z2 ^ z5;
 8000910:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
    z12 = t43 & y13;
 8000912:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    t48 = z5 ^ z13;
 8000914:	ea85 0907 	eor.w	r9, r5, r7
    z11 = t33 & y4;
 8000918:	9d16      	ldr	r5, [sp, #88]	@ 0x58
    t48 = z5 ^ z13;
 800091a:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
    t51 = z2 ^ z5;
 800091e:	ea86 0907 	eor.w	r9, r6, r7
    t47 = z10 ^ z11;
 8000922:	9e14      	ldr	r6, [sp, #80]	@ 0x50
    t51 = z2 ^ z5;
 8000924:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
    z11 = t33 & y4;
 8000928:	4015      	ands	r5, r2
    t47 = z10 ^ z11;
 800092a:	ea85 0906 	eor.w	r9, r5, r6
    t41 = t40 ^ t37;
 800092e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    z9 = t44 & y12;
 8000930:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
    t47 = z10 ^ z11;
 8000932:	f8cd 9080 	str.w	r9, [sp, #128]	@ 0x80
    t41 = t40 ^ t37;
 8000936:	ea86 0501 	eor.w	r5, r6, r1
    t43 = t29 ^ t40;
 800093a:	ea8e 0101 	eor.w	r1, lr, r1
    t42 = t29 ^ t33;
 800093e:	ea8e 0e04 	eor.w	lr, lr, r4
    t44 = t33 ^ t37;
 8000942:	4074      	eors	r4, r6
    z15 = t42 & y9;
 8000944:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8000946:	ea06 0b0e 	and.w	fp, r6, lr
    z3 = t43 & y16;
 800094a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800094c:	400e      	ands	r6, r1
    z12 = t43 & y13;
 800094e:	4001      	ands	r1, r0
    z0 = t44 & y15;
 8000950:	9806      	ldr	r0, [sp, #24]
 8000952:	ea00 0904 	and.w	r9, r0, r4
    z6 = t42 & y11;
 8000956:	9809      	ldr	r0, [sp, #36]	@ 0x24
    z9 = t44 & y12;
 8000958:	4027      	ands	r7, r4
    z16 = t45 & y14;
 800095a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    t49 = z9 ^ z10;
 800095c:	ea87 0708 	eor.w	r7, r7, r8
    z6 = t42 & y11;
 8000960:	ea00 080e 	and.w	r8, r0, lr
    t45 = t42 ^ t41;
 8000964:	ea85 0e0e 	eor.w	lr, r5, lr
    z16 = t45 & y14;
 8000968:	ea04 0a0e 	and.w	sl, r4, lr
    z8 = t41 & y10;
 800096c:	9807      	ldr	r0, [sp, #28]
    z7 = t45 & y17;
 800096e:	9c21      	ldr	r4, [sp, #132]	@ 0x84
    t52 = z7 ^ z8;
    t53 = z0 ^ z3;
 8000970:	ea89 0906 	eor.w	r9, r9, r6
    z7 = t45 & y17;
 8000974:	ea04 0e0e 	and.w	lr, r4, lr
    t54 = z6 ^ z7;
    t55 = z16 ^ z17;
    t56 = z12 ^ t48;
    t57 = t50 ^ t53;
    t58 = z4 ^ t46;
    t59 = z3 ^ t54;
 8000978:	ea88 0806 	eor.w	r8, r8, r6
    t46 = z15 ^ z16;
 800097c:	ea8b 040a 	eor.w	r4, fp, sl
    t50 = z2 ^ z12;
 8000980:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
    z8 = t41 & y10;
 8000982:	ea00 0b05 	and.w	fp, r0, r5
    z17 = t41 & y8;
 8000986:	9804      	ldr	r0, [sp, #16]
    t50 = z2 ^ z12;
 8000988:	404e      	eors	r6, r1
    z17 = t41 & y8;
 800098a:	4005      	ands	r5, r0
    t60 = t46 ^ t57;
    t61 = z14 ^ t57;
 800098c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
    t57 = t50 ^ t53;
 800098e:	ea86 0609 	eor.w	r6, r6, r9
    t55 = z16 ^ z17;
 8000992:	ea85 050a 	eor.w	r5, r5, sl
    t61 = z14 ^ t57;
 8000996:	ea80 0a06 	eor.w	sl, r0, r6
    t56 = z12 ^ t48;
 800099a:	9819      	ldr	r0, [sp, #100]	@ 0x64
    t60 = t46 ^ t57;
 800099c:	4066      	eors	r6, r4
    t56 = z12 ^ t48;
 800099e:	4041      	eors	r1, r0
    t64 = z4 ^ t59;
    t65 = t61 ^ t62;
    t66 = z1 ^ t63;
    s0 = t59 ^ t63;
    s6 = t56 ^ ~t62;
    s7 = t48 ^ ~t60;
 80009a0:	4046      	eors	r6, r0
    t58 = z4 ^ t46;
 80009a2:	9826      	ldr	r0, [sp, #152]	@ 0x98
    t59 = z3 ^ t54;
 80009a4:	ea88 080e 	eor.w	r8, r8, lr
    t52 = z7 ^ z8;
 80009a8:	ea8b 0b0e 	eor.w	fp, fp, lr
    t58 = z4 ^ t46;
 80009ac:	ea80 0e04 	eor.w	lr, r0, r4
    t64 = z4 ^ t59;
 80009b0:	ea80 0408 	eor.w	r4, r0, r8
    t66 = z1 ^ t63;
 80009b4:	981d      	ldr	r0, [sp, #116]	@ 0x74
    t63 = t49 ^ t58;
 80009b6:	ea87 070e 	eor.w	r7, r7, lr
    t62 = t52 ^ t58;
 80009ba:	ea8b 0e0e 	eor.w	lr, fp, lr
    t66 = z1 ^ t63;
 80009be:	ea80 0b07 	eor.w	fp, r0, r7
    s4 = t51 ^ t66;
    s5 = t47 ^ t65;
    s1 = t64 ^ ~s3;
    s2 = t55 ^ ~t67;

    q[7] = s0;
 80009c2:	9801      	ldr	r0, [sp, #4]
    t65 = t61 ^ t62;
 80009c4:	ea8a 0a0e 	eor.w	sl, sl, lr
    s6 = t56 ^ ~t62;
 80009c8:	ea81 0e0e 	eor.w	lr, r1, lr
    s3 = t53 ^ t66;
 80009cc:	ea89 010b 	eor.w	r1, r9, fp
    s0 = t59 ^ t63;
 80009d0:	ea88 0707 	eor.w	r7, r8, r7
    q[6] = s1;
    q[5] = s2;
    q[4] = s3;
 80009d4:	6201      	str	r1, [r0, #32]
    s2 = t55 ^ ~t67;
 80009d6:	4065      	eors	r5, r4
    s1 = t64 ^ ~s3;
 80009d8:	404c      	eors	r4, r1
    s5 = t47 ^ t65;
 80009da:	9927      	ldr	r1, [sp, #156]	@ 0x9c
    q[7] = s0;
 80009dc:	6387      	str	r7, [r0, #56]	@ 0x38
    s4 = t51 ^ t66;
 80009de:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
    s5 = t47 ^ t65;
 80009e0:	ea81 010a 	eor.w	r1, r1, sl
    s2 = t55 ^ ~t67;
 80009e4:	ea85 050a 	eor.w	r5, r5, sl
    s4 = t51 ^ t66;
 80009e8:	ea87 070b 	eor.w	r7, r7, fp
    q[3] = s4;
    q[2] = s5;
 80009ec:	6101      	str	r1, [r0, #16]
    s1 = t64 ^ ~s3;
 80009ee:	43e4      	mvns	r4, r4
    s6 = t56 ^ ~t62;
 80009f0:	ea6f 010e 	mvn.w	r1, lr
    s2 = t55 ^ ~t67;
 80009f4:	43ed      	mvns	r5, r5
    s7 = t48 ^ ~t60;
 80009f6:	43f6      	mvns	r6, r6
    q[3] = s4;
 80009f8:	6187      	str	r7, [r0, #24]
    q[6] = s1;
 80009fa:	6304      	str	r4, [r0, #48]	@ 0x30
    q[5] = s2;
 80009fc:	6285      	str	r5, [r0, #40]	@ 0x28
    q[1] = s6;
 80009fe:	6081      	str	r1, [r0, #8]
    q[0] = s7;
 8000a00:	6006      	str	r6, [r0, #0]
    t41 = t40 ^ t37;
 8000a02:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
    z12 = t43 & y13;
 8000a04:	9803      	ldr	r0, [sp, #12]
    z3 = t43 & y16;
 8000a06:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
    z9 = t44 & y12;
 8000a08:	9f18      	ldr	r7, [sp, #96]	@ 0x60
    z15 = t42 & y9;
 8000a0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
    t41 = t40 ^ t37;
 8000a0c:	ea86 0103 	eor.w	r1, r6, r3
    t43 = t29 ^ t40;
 8000a10:	ea8c 0303 	eor.w	r3, ip, r3
    z3 = t43 & y16;
 8000a14:	401d      	ands	r5, r3
    z12 = t43 & y13;
 8000a16:	4003      	ands	r3, r0
    z0 = t44 & y15;
 8000a18:	9825      	ldr	r0, [sp, #148]	@ 0x94
    t42 = t29 ^ t33;
 8000a1a:	ea8c 0c02 	eor.w	ip, ip, r2
    t44 = t33 ^ t37;
 8000a1e:	4072      	eors	r2, r6
    z0 = t44 & y15;
 8000a20:	ea00 0602 	and.w	r6, r0, r2
    z9 = t44 & y12;
 8000a24:	403a      	ands	r2, r7
    t49 = z9 ^ z10;
 8000a26:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    z16 = t45 & y14;
 8000a28:	9811      	ldr	r0, [sp, #68]	@ 0x44
    t49 = z9 ^ z10;
 8000a2a:	407a      	eors	r2, r7
    z6 = t42 & y11;
 8000a2c:	9f02      	ldr	r7, [sp, #8]
    z15 = t42 & y9;
 8000a2e:	ea04 040c 	and.w	r4, r4, ip
    z6 = t42 & y11;
 8000a32:	ea07 070c 	and.w	r7, r7, ip
    t45 = t42 ^ t41;
 8000a36:	ea81 0c0c 	eor.w	ip, r1, ip
    z16 = t45 & y14;
 8000a3a:	ea00 0e0c 	and.w	lr, r0, ip
    z7 = t45 & y17;
 8000a3e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8000a40:	ea00 0c0c 	and.w	ip, r0, ip
    z8 = t41 & y10;
 8000a44:	9808      	ldr	r0, [sp, #32]
    t53 = z0 ^ z3;
 8000a46:	406e      	eors	r6, r5
    z8 = t41 & y10;
 8000a48:	ea00 0801 	and.w	r8, r0, r1
    t59 = z3 ^ t54;
 8000a4c:	406f      	eors	r7, r5
    z17 = t41 & y8;
 8000a4e:	9805      	ldr	r0, [sp, #20]
    t50 = z2 ^ z12;
 8000a50:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    z17 = t41 & y8;
 8000a52:	4001      	ands	r1, r0
    t50 = z2 ^ z12;
 8000a54:	405d      	eors	r5, r3
    t61 = z14 ^ t57;
 8000a56:	981c      	ldr	r0, [sp, #112]	@ 0x70
    t57 = t50 ^ t53;
 8000a58:	4075      	eors	r5, r6
    t46 = z15 ^ z16;
 8000a5a:	ea84 040e 	eor.w	r4, r4, lr
    t59 = z3 ^ t54;
 8000a5e:	ea87 070c 	eor.w	r7, r7, ip
    t52 = z7 ^ z8;
 8000a62:	ea88 080c 	eor.w	r8, r8, ip
    t61 = z14 ^ t57;
 8000a66:	ea80 0c05 	eor.w	ip, r0, r5
    t56 = z12 ^ t48;
 8000a6a:	981a      	ldr	r0, [sp, #104]	@ 0x68
    t60 = t46 ^ t57;
 8000a6c:	4065      	eors	r5, r4
    t56 = z12 ^ t48;
 8000a6e:	4043      	eors	r3, r0
    s7 = t48 ^ ~t60;
 8000a70:	4045      	eors	r5, r0
    t58 = z4 ^ t46;
 8000a72:	9815      	ldr	r0, [sp, #84]	@ 0x54
    t55 = z16 ^ z17;
 8000a74:	ea81 010e 	eor.w	r1, r1, lr
    t58 = z4 ^ t46;
 8000a78:	4044      	eors	r4, r0
    t64 = z4 ^ t59;
 8000a7a:	ea80 0e07 	eor.w	lr, r0, r7
    t66 = z1 ^ t63;
 8000a7e:	981e      	ldr	r0, [sp, #120]	@ 0x78
    t63 = t49 ^ t58;
 8000a80:	4062      	eors	r2, r4
    s0 = t59 ^ t63;
 8000a82:	4057      	eors	r7, r2
    t62 = t52 ^ t58;
 8000a84:	ea88 0404 	eor.w	r4, r8, r4
    t66 = z1 ^ t63;
 8000a88:	ea80 0802 	eor.w	r8, r0, r2
    q[7] = s0;
 8000a8c:	9a01      	ldr	r2, [sp, #4]
 8000a8e:	63d7      	str	r7, [r2, #60]	@ 0x3c
    s4 = t51 ^ t66;
 8000a90:	9f16      	ldr	r7, [sp, #88]	@ 0x58
    t65 = t61 ^ t62;
 8000a92:	ea8c 0c04 	eor.w	ip, ip, r4
    s6 = t56 ^ ~t62;
 8000a96:	405c      	eors	r4, r3
    s4 = t51 ^ t66;
 8000a98:	ea87 0308 	eor.w	r3, r7, r8
    q[3] = s4;
 8000a9c:	61d3      	str	r3, [r2, #28]
    s5 = t47 ^ t65;
 8000a9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
    s3 = t53 ^ t66;
 8000aa0:	ea86 0608 	eor.w	r6, r6, r8
    s2 = t55 ^ ~t67;
 8000aa4:	ea81 010e 	eor.w	r1, r1, lr
    s5 = t47 ^ t65;
 8000aa8:	ea83 030c 	eor.w	r3, r3, ip
    s1 = t64 ^ ~s3;
 8000aac:	ea8e 0e06 	eor.w	lr, lr, r6
    s2 = t55 ^ ~t67;
 8000ab0:	ea81 010c 	eor.w	r1, r1, ip
    q[2] = s5;
 8000ab4:	6153      	str	r3, [r2, #20]
    s2 = t55 ^ ~t67;
 8000ab6:	43c9      	mvns	r1, r1
    s1 = t64 ^ ~s3;
 8000ab8:	ea6f 030e 	mvn.w	r3, lr
    s6 = t56 ^ ~t62;
 8000abc:	43e4      	mvns	r4, r4
    s7 = t48 ^ ~t60;
 8000abe:	43ed      	mvns	r5, r5
    q[4] = s3;
 8000ac0:	6256      	str	r6, [r2, #36]	@ 0x24
    q[6] = s1;
 8000ac2:	6353      	str	r3, [r2, #52]	@ 0x34
    q[5] = s2;
 8000ac4:	62d1      	str	r1, [r2, #44]	@ 0x2c
    q[1] = s6;
 8000ac6:	60d4      	str	r4, [r2, #12]
    q[0] = s7;
 8000ac8:	6055      	str	r5, [r2, #4]
}
 8000aca:	b029      	add	sp, #164	@ 0xa4
 8000acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ad0 <br_aes_ct64_ortho>:

static void br_aes_ct64_ortho(uint64_t *q) {
 8000ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#define SWAP2(x, y)    SWAPN(0x5555555555555555, 0xAAAAAAAAAAAAAAAA,  1, x, y)
#define SWAP4(x, y)    SWAPN(0x3333333333333333, 0xCCCCCCCCCCCCCCCC,  2, x, y)
#define SWAP8(x, y)    SWAPN(0x0F0F0F0F0F0F0F0F, 0xF0F0F0F0F0F0F0F0,  4, x, y)

    SWAP2(q[0], q[1]);
 8000ad4:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    SWAP2(q[2], q[3]);
 8000ad8:	e9d0 1506 	ldrd	r1, r5, [r0, #24]
    SWAP2(q[4], q[5]);
 8000adc:	e9d0 2b0a 	ldrd	r2, fp, [r0, #40]	@ 0x28
    SWAP2(q[0], q[1]);
 8000ae0:	eb13 0a03 	adds.w	sl, r3, r3
static void br_aes_ct64_ortho(uint64_t *q) {
 8000ae4:	b08b      	sub	sp, #44	@ 0x2c
    SWAP2(q[0], q[1]);
 8000ae6:	eb44 0904 	adc.w	r9, r4, r4
 8000aea:	f003 3caa 	and.w	ip, r3, #2863311530	@ 0xaaaaaaaa
    SWAP2(q[2], q[3]);
 8000aee:	eb11 0801 	adds.w	r8, r1, r1
    SWAP2(q[6], q[7]);
 8000af2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    SWAP2(q[2], q[3]);
 8000af4:	eb45 0705 	adc.w	r7, r5, r5
    SWAP2(q[4], q[5]);
 8000af8:	1896      	adds	r6, r2, r2
 8000afa:	f002 32aa 	and.w	r2, r2, #2863311530	@ 0xaaaaaaaa
 8000afe:	9203      	str	r2, [sp, #12]
    SWAP2(q[2], q[3]);
 8000b00:	f005 3eaa 	and.w	lr, r5, #2863311530	@ 0xaaaaaaaa
    SWAP2(q[4], q[5]);
 8000b04:	f00b 32aa 	and.w	r2, fp, #2863311530	@ 0xaaaaaaaa
 8000b08:	eb4b 050b 	adc.w	r5, fp, fp
    SWAP2(q[6], q[7]);
 8000b0c:	eb13 0b03 	adds.w	fp, r3, r3
 8000b10:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
    SWAP2(q[4], q[5]);
 8000b14:	9205      	str	r2, [sp, #20]
    SWAP2(q[6], q[7]);
 8000b16:	9307      	str	r3, [sp, #28]
 8000b18:	f00b 32aa 	and.w	r2, fp, #2863311530	@ 0xaaaaaaaa
    SWAP2(q[0], q[1]);
 8000b1c:	6803      	ldr	r3, [r0, #0]
    SWAP2(q[6], q[7]);
 8000b1e:	9206      	str	r2, [sp, #24]
    SWAP2(q[0], q[1]);
 8000b20:	6842      	ldr	r2, [r0, #4]
 8000b22:	f00a 3aaa 	and.w	sl, sl, #2863311530	@ 0xaaaaaaaa
 8000b26:	ea4f 0b53 	mov.w	fp, r3, lsr #1
 8000b2a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000b2e:	ea4a 0303 	orr.w	r3, sl, r3
 8000b32:	ea4f 0a52 	mov.w	sl, r2, lsr #1
 8000b36:	f00a 3a55 	and.w	sl, sl, #1431655765	@ 0x55555555
 8000b3a:	f004 34aa 	and.w	r4, r4, #2863311530	@ 0xaaaaaaaa
 8000b3e:	ea4a 0404 	orr.w	r4, sl, r4
 8000b42:	f00b 3b55 	and.w	fp, fp, #1431655765	@ 0x55555555
 8000b46:	ea4b 0c0c 	orr.w	ip, fp, ip
 8000b4a:	9401      	str	r4, [sp, #4]
    SWAP2(q[2], q[3]);
 8000b4c:	6904      	ldr	r4, [r0, #16]
    SWAP2(q[0], q[1]);
 8000b4e:	f8cd c000 	str.w	ip, [sp]
 8000b52:	f009 39aa 	and.w	r9, r9, #2863311530	@ 0xaaaaaaaa
 8000b56:	f002 3c55 	and.w	ip, r2, #1431655765	@ 0x55555555
 8000b5a:	ea49 0c0c 	orr.w	ip, r9, ip
    SWAP2(q[2], q[3]);
 8000b5e:	f008 38aa 	and.w	r8, r8, #2863311530	@ 0xaaaaaaaa
 8000b62:	ea4f 0954 	mov.w	r9, r4, lsr #1
 8000b66:	f004 3455 	and.w	r4, r4, #1431655765	@ 0x55555555
 8000b6a:	ea48 0404 	orr.w	r4, r8, r4
 8000b6e:	f001 31aa 	and.w	r1, r1, #2863311530	@ 0xaaaaaaaa
 8000b72:	f009 3855 	and.w	r8, r9, #1431655765	@ 0x55555555
 8000b76:	ea48 0801 	orr.w	r8, r8, r1
 8000b7a:	6941      	ldr	r1, [r0, #20]
    SWAP2(q[4], q[5]);
 8000b7c:	6a02      	ldr	r2, [r0, #32]
    SWAP2(q[2], q[3]);
 8000b7e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8000b82:	f007 37aa 	and.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 8000b86:	f001 3155 	and.w	r1, r1, #1431655765	@ 0x55555555
 8000b8a:	ea41 0b07 	orr.w	fp, r1, r7
 8000b8e:	f009 3755 	and.w	r7, r9, #1431655765	@ 0x55555555
 8000b92:	ea47 070e 	orr.w	r7, r7, lr
    SWAP2(q[4], q[5]);
 8000b96:	f006 36aa 	and.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 8000b9a:	f002 3e55 	and.w	lr, r2, #1431655765	@ 0x55555555
 8000b9e:	ea46 010e 	orr.w	r1, r6, lr
 8000ba2:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8000ba6:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8000ba8:	9a03      	ldr	r2, [sp, #12]
 8000baa:	9102      	str	r1, [sp, #8]
 8000bac:	f009 3955 	and.w	r9, r9, #1431655765	@ 0x55555555
 8000bb0:	ea49 0102 	orr.w	r1, r9, r2
 8000bb4:	f005 35aa 	and.w	r5, r5, #2863311530	@ 0xaaaaaaaa
 8000bb8:	ea4f 0256 	mov.w	r2, r6, lsr #1
 8000bbc:	f006 3655 	and.w	r6, r6, #1431655765	@ 0x55555555
 8000bc0:	ea45 0506 	orr.w	r5, r5, r6
 8000bc4:	9503      	str	r5, [sp, #12]
 8000bc6:	9e05      	ldr	r6, [sp, #20]
    SWAP2(q[6], q[7]);
 8000bc8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    SWAP2(q[4], q[5]);
 8000bca:	9104      	str	r1, [sp, #16]
 8000bcc:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 8000bd0:	ea42 0106 	orr.w	r1, r2, r6
    SWAP2(q[6], q[7]);
 8000bd4:	f005 3eaa 	and.w	lr, r5, #2863311530	@ 0xaaaaaaaa
 8000bd8:	eb45 0605 	adc.w	r6, r5, r5
 8000bdc:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8000bde:	9a06      	ldr	r2, [sp, #24]
    SWAP2(q[4], q[5]);
 8000be0:	9105      	str	r1, [sp, #20]
    SWAP2(q[6], q[7]);
 8000be2:	ea4f 0955 	mov.w	r9, r5, lsr #1
 8000be6:	f005 3555 	and.w	r5, r5, #1431655765	@ 0x55555555
 8000bea:	4315      	orrs	r5, r2
 8000bec:	9a07      	ldr	r2, [sp, #28]
 8000bee:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8000bf0:	f009 3955 	and.w	r9, r9, #1431655765	@ 0x55555555
 8000bf4:	ea49 0902 	orr.w	r9, r9, r2
 8000bf8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8000bfa:	0852      	lsrs	r2, r2, #1
 8000bfc:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 8000c00:	ea42 020e 	orr.w	r2, r2, lr
 8000c04:	f001 3a55 	and.w	sl, r1, #1431655765	@ 0x55555555

    SWAP4(q[0], q[2]);
 8000c08:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 8000c0c:	f00b 31cc 	and.w	r1, fp, #3435973836	@ 0xcccccccc
    SWAP2(q[6], q[7]);
 8000c10:	f006 36aa 	and.w	r6, r6, #2863311530	@ 0xaaaaaaaa
    SWAP4(q[0], q[2]);
 8000c14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    SWAP2(q[6], q[7]);
 8000c18:	ea46 060a 	orr.w	r6, r6, sl
    SWAP4(q[0], q[2]);
 8000c1c:	f00b 3bcc 	and.w	fp, fp, #3435973836	@ 0xcccccccc
 8000c20:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8000c24:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000c28:	ea4b 0b03 	orr.w	fp, fp, r3
 8000c2c:	ea4f 039c 	mov.w	r3, ip, lsr #2
 8000c30:	f004 34cc 	and.w	r4, r4, #3435973836	@ 0xcccccccc
 8000c34:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000c38:	f00a 3a33 	and.w	sl, sl, #858993459	@ 0x33333333
 8000c3c:	ea4a 0a04 	orr.w	sl, sl, r4
 8000c40:	4319      	orrs	r1, r3
 8000c42:	f8cd a01c 	str.w	sl, [sp, #28]
 8000c46:	f00e 3ecc 	and.w	lr, lr, #3435973836	@ 0xcccccccc
 8000c4a:	9108      	str	r1, [sp, #32]
    SWAP4(q[1], q[3]);
 8000c4c:	00bb      	lsls	r3, r7, #2
 8000c4e:	f007 31cc 	and.w	r1, r7, #3435973836	@ 0xcccccccc
    SWAP4(q[0], q[2]);
 8000c52:	f00c 3c33 	and.w	ip, ip, #858993459	@ 0x33333333
    SWAP4(q[1], q[3]);
 8000c56:	9f00      	ldr	r7, [sp, #0]
    SWAP4(q[0], q[2]);
 8000c58:	ea4e 0c0c 	orr.w	ip, lr, ip
    SWAP4(q[1], q[3]);
 8000c5c:	ea4f 0488 	mov.w	r4, r8, lsl #2
    SWAP4(q[0], q[2]);
 8000c60:	f8cd c018 	str.w	ip, [sp, #24]
    SWAP4(q[1], q[3]);
 8000c64:	f004 34cc 	and.w	r4, r4, #3435973836	@ 0xcccccccc
 8000c68:	f007 3c33 	and.w	ip, r7, #858993459	@ 0x33333333
 8000c6c:	ea4f 0e97 	mov.w	lr, r7, lsr #2
 8000c70:	ea44 070c 	orr.w	r7, r4, ip
 8000c74:	9700      	str	r7, [sp, #0]
 8000c76:	9c01      	ldr	r4, [sp, #4]
 8000c78:	f008 38cc 	and.w	r8, r8, #3435973836	@ 0xcccccccc
 8000c7c:	f00e 3733 	and.w	r7, lr, #858993459	@ 0x33333333
 8000c80:	ea47 0708 	orr.w	r7, r7, r8
 8000c84:	9709      	str	r7, [sp, #36]	@ 0x24
 8000c86:	f003 33cc 	and.w	r3, r3, #3435973836	@ 0xcccccccc
 8000c8a:	08a7      	lsrs	r7, r4, #2
 8000c8c:	f004 3433 	and.w	r4, r4, #858993459	@ 0x33333333
 8000c90:	ea43 0c04 	orr.w	ip, r3, r4
    SWAP4(q[4], q[6]);
 8000c94:	9b02      	ldr	r3, [sp, #8]
    SWAP4(q[1], q[3]);
 8000c96:	f8cd c004 	str.w	ip, [sp, #4]
    SWAP4(q[4], q[6]);
 8000c9a:	089c      	lsrs	r4, r3, #2
 8000c9c:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8000ca0:	f004 3433 	and.w	r4, r4, #858993459	@ 0x33333333
 8000ca4:	f005 35cc 	and.w	r5, r5, #3435973836	@ 0xcccccccc
 8000ca8:	432c      	orrs	r4, r5
 8000caa:	9d03      	ldr	r5, [sp, #12]
 8000cac:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8000cb0:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000cb4:	f00e 3ecc 	and.w	lr, lr, #3435973836	@ 0xcccccccc
 8000cb8:	ea4e 0e03 	orr.w	lr, lr, r3
    SWAP4(q[1], q[3]);
 8000cbc:	f007 3733 	and.w	r7, r7, #858993459	@ 0x33333333
    SWAP4(q[4], q[6]);
 8000cc0:	f005 3333 	and.w	r3, r5, #858993459	@ 0x33333333
 8000cc4:	f00c 3ccc 	and.w	ip, ip, #3435973836	@ 0xcccccccc
    SWAP4(q[1], q[3]);
 8000cc8:	430f      	orrs	r7, r1
    SWAP4(q[4], q[6]);
 8000cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cce:	08a9      	lsrs	r1, r5, #2
    SWAP4(q[5], q[7]);
 8000cd0:	9b04      	ldr	r3, [sp, #16]
    SWAP4(q[4], q[6]);
 8000cd2:	f006 36cc 	and.w	r6, r6, #3435973836	@ 0xcccccccc
 8000cd6:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 8000cda:	4331      	orrs	r1, r6
    SWAP4(q[5], q[7]);
 8000cdc:	f002 38cc 	and.w	r8, r2, #3435973836	@ 0xcccccccc
 8000ce0:	0095      	lsls	r5, r2, #2
 8000ce2:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8000ce6:	089a      	lsrs	r2, r3, #2
 8000ce8:	f009 39cc 	and.w	r9, r9, #3435973836	@ 0xcccccccc
 8000cec:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000cf0:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8000cf4:	f006 36cc 	and.w	r6, r6, #3435973836	@ 0xcccccccc
 8000cf8:	431e      	orrs	r6, r3
 8000cfa:	ea42 0309 	orr.w	r3, r2, r9
 8000cfe:	9a05      	ldr	r2, [sp, #20]
 8000d00:	9302      	str	r3, [sp, #8]
 8000d02:	f002 3933 	and.w	r9, r2, #858993459	@ 0x33333333
 8000d06:	f005 35cc 	and.w	r5, r5, #3435973836	@ 0xcccccccc
 8000d0a:	ea45 0509 	orr.w	r5, r5, r9
 8000d0e:	0893      	lsrs	r3, r2, #2

    SWAP8(q[0], q[4]);
 8000d10:	ea4f 191b 	mov.w	r9, fp, lsr #4
 8000d14:	9a06      	ldr	r2, [sp, #24]
 8000d16:	ea4f 1a0e 	mov.w	sl, lr, lsl #4
 8000d1a:	f009 390f 	and.w	r9, r9, #252645135	@ 0xf0f0f0f
 8000d1e:	f00e 3ef0 	and.w	lr, lr, #4042322160	@ 0xf0f0f0f0
 8000d22:	ea49 090e 	orr.w	r9, r9, lr
    SWAP4(q[5], q[7]);
 8000d26:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
    SWAP8(q[0], q[4]);
 8000d2a:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    SWAP4(q[5], q[7]);
 8000d2e:	ea43 0308 	orr.w	r3, r3, r8
    SWAP8(q[0], q[4]);
 8000d32:	f8c0 9020 	str.w	r9, [r0, #32]
 8000d36:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8000d3a:	f002 390f 	and.w	r9, r2, #252645135	@ 0xf0f0f0f
 8000d3e:	f00c 3cf0 	and.w	ip, ip, #4042322160	@ 0xf0f0f0f0
    SWAP8(q[1], q[5]);
 8000d42:	9a00      	ldr	r2, [sp, #0]
    SWAP8(q[0], q[4]);
 8000d44:	f00e 3e0f 	and.w	lr, lr, #252645135	@ 0xf0f0f0f
 8000d48:	ea4e 0e0c 	orr.w	lr, lr, ip
 8000d4c:	f008 38f0 	and.w	r8, r8, #4042322160	@ 0xf0f0f0f0
 8000d50:	ea48 0809 	orr.w	r8, r8, r9
 8000d54:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
    SWAP8(q[1], q[5]);
 8000d58:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    SWAP8(q[0], q[4]);
 8000d5c:	f8c0 8004 	str.w	r8, [r0, #4]
    SWAP8(q[1], q[5]);
 8000d60:	f002 390f 	and.w	r9, r2, #252645135	@ 0xf0f0f0f
 8000d64:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8000d68:	9a01      	ldr	r2, [sp, #4]
 8000d6a:	f00e 3e0f 	and.w	lr, lr, #252645135	@ 0xf0f0f0f
 8000d6e:	f006 36f0 	and.w	r6, r6, #4042322160	@ 0xf0f0f0f0
 8000d72:	ea4e 0606 	orr.w	r6, lr, r6
 8000d76:	6286      	str	r6, [r0, #40]	@ 0x28
 8000d78:	0916      	lsrs	r6, r2, #4
 8000d7a:	ea4f 1c05 	mov.w	ip, r5, lsl #4
 8000d7e:	f006 360f 	and.w	r6, r6, #252645135	@ 0xf0f0f0f
 8000d82:	f005 35f0 	and.w	r5, r5, #4042322160	@ 0xf0f0f0f0
 8000d86:	f002 3e0f 	and.w	lr, r2, #252645135	@ 0xf0f0f0f
 8000d8a:	4335      	orrs	r5, r6
    SWAP8(q[2], q[6]);
 8000d8c:	9a07      	ldr	r2, [sp, #28]
    SWAP8(q[1], q[5]);
 8000d8e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8000d90:	f00c 3cf0 	and.w	ip, ip, #4042322160	@ 0xf0f0f0f0
 8000d94:	ea4c 0c0e 	orr.w	ip, ip, lr
    SWAP8(q[2], q[6]);
 8000d98:	f001 36f0 	and.w	r6, r1, #4042322160	@ 0xf0f0f0f0
 8000d9c:	010d      	lsls	r5, r1, #4
 8000d9e:	0121      	lsls	r1, r4, #4
    SWAP8(q[1], q[5]);
 8000da0:	f8c0 c00c 	str.w	ip, [r0, #12]
    SWAP8(q[2], q[6]);
 8000da4:	f002 3e0f 	and.w	lr, r2, #252645135	@ 0xf0f0f0f
 8000da8:	f004 3cf0 	and.w	ip, r4, #4042322160	@ 0xf0f0f0f0
 8000dac:	f001 31f0 	and.w	r1, r1, #4042322160	@ 0xf0f0f0f0
 8000db0:	0914      	lsrs	r4, r2, #4
 8000db2:	9a08      	ldr	r2, [sp, #32]
 8000db4:	ea41 010e 	orr.w	r1, r1, lr
 8000db8:	f004 340f 	and.w	r4, r4, #252645135	@ 0xf0f0f0f
 8000dbc:	6101      	str	r1, [r0, #16]
 8000dbe:	ea44 040c 	orr.w	r4, r4, ip
 8000dc2:	0911      	lsrs	r1, r2, #4
 8000dc4:	6304      	str	r4, [r0, #48]	@ 0x30
 8000dc6:	f005 35f0 	and.w	r5, r5, #4042322160	@ 0xf0f0f0f0
 8000dca:	f002 340f 	and.w	r4, r2, #252645135	@ 0xf0f0f0f
 8000dce:	f001 310f 	and.w	r1, r1, #252645135	@ 0xf0f0f0f
 8000dd2:	4325      	orrs	r5, r4
 8000dd4:	4331      	orrs	r1, r6
    SWAP8(q[3], q[7]);
 8000dd6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
    SWAP8(q[2], q[6]);
 8000dd8:	6145      	str	r5, [r0, #20]
 8000dda:	6341      	str	r1, [r0, #52]	@ 0x34
    SWAP8(q[3], q[7]);
 8000ddc:	f003 35f0 	and.w	r5, r3, #4042322160	@ 0xf0f0f0f0
 8000de0:	0119      	lsls	r1, r3, #4
 8000de2:	9b02      	ldr	r3, [sp, #8]
 8000de4:	0932      	lsrs	r2, r6, #4
 8000de6:	011c      	lsls	r4, r3, #4
 8000de8:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 8000dec:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8000df0:	431a      	orrs	r2, r3
 8000df2:	093b      	lsrs	r3, r7, #4
    SWAP8(q[0], q[4]);
 8000df4:	f00b 3b0f 	and.w	fp, fp, #252645135	@ 0xf0f0f0f
    SWAP8(q[3], q[7]);
 8000df8:	f006 360f 	and.w	r6, r6, #252645135	@ 0xf0f0f0f
 8000dfc:	f007 370f 	and.w	r7, r7, #252645135	@ 0xf0f0f0f
    SWAP8(q[0], q[4]);
 8000e00:	f00a 3af0 	and.w	sl, sl, #4042322160	@ 0xf0f0f0f0
    SWAP8(q[1], q[5]);
 8000e04:	f008 38f0 	and.w	r8, r8, #4042322160	@ 0xf0f0f0f0
    SWAP8(q[3], q[7]);
 8000e08:	f001 31f0 	and.w	r1, r1, #4042322160	@ 0xf0f0f0f0
 8000e0c:	f004 34f0 	and.w	r4, r4, #4042322160	@ 0xf0f0f0f0
 8000e10:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
    SWAP8(q[0], q[4]);
 8000e14:	ea4a 0a0b 	orr.w	sl, sl, fp
    SWAP8(q[1], q[5]);
 8000e18:	ea48 0809 	orr.w	r8, r8, r9
    SWAP8(q[3], q[7]);
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	4339      	orrs	r1, r7
 8000e20:	432b      	orrs	r3, r5
    SWAP8(q[0], q[4]);
 8000e22:	f8c0 a000 	str.w	sl, [r0]
    SWAP8(q[1], q[5]);
 8000e26:	f8c0 8008 	str.w	r8, [r0, #8]
    SWAP8(q[3], q[7]);
 8000e2a:	6184      	str	r4, [r0, #24]
 8000e2c:	6382      	str	r2, [r0, #56]	@ 0x38
 8000e2e:	61c1      	str	r1, [r0, #28]
 8000e30:	63c3      	str	r3, [r0, #60]	@ 0x3c
}
 8000e32:	b00b      	add	sp, #44	@ 0x2c
 8000e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e38 <aes_ecb4x.constprop.0>:
static void inc4_be(uint32_t *x) {
    uint32_t t = br_swap32(*x) + 4;
    *x = br_swap32(t);
}

static void aes_ecb4x(unsigned char out[64], const uint32_t ivw[16], const uint64_t *sk_exp, unsigned int nrounds) {
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b0b9      	sub	sp, #228	@ 0xe4
 8000e3e:	f502 7350 	add.w	r3, r2, #832	@ 0x340
    uint32_t w[16];
    uint64_t q[8];
    unsigned int i;

    memcpy(w, ivw, sizeof(w));
 8000e42:	460d      	mov	r5, r1
static void aes_ecb4x(unsigned char out[64], const uint32_t ivw[16], const uint64_t *sk_exp, unsigned int nrounds) {
 8000e44:	4614      	mov	r4, r2
 8000e46:	9016      	str	r0, [sp, #88]	@ 0x58
 8000e48:	9315      	str	r3, [sp, #84]	@ 0x54
 8000e4a:	4692      	mov	sl, r2
    memcpy(w, ivw, sizeof(w));
 8000e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4e:	ae28      	add	r6, sp, #160	@ 0xa0
 8000e50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e5e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    x3 = w[3];
 8000e62:	e9dd 3c2a 	ldrd	r3, ip, [sp, #168]	@ 0xa8
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8000e66:	b29e      	uxth	r6, r3
    x2 |= (x2 << 8);
 8000e68:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    *q0 = x0 | (x2 << 8);
 8000e6c:	0236      	lsls	r6, r6, #8
    x3 = w[3];
 8000e6e:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	@ 0xb8
    *q0 = x0 | (x2 << 8);
 8000e72:	f006 27ff 	and.w	r7, r6, #4278255360	@ 0xff00ff00
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000e76:	fa1f f68c 	uxth.w	r6, ip
 8000e7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    x3 |= (x3 << 8);
 8000e7e:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    *q1 = x1 | (x3 << 8);
 8000e82:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8000e86:	f00c 28ff 	and.w	r8, ip, #4278255360	@ 0xff00ff00
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8000e8a:	fa1f fc80 	uxth.w	ip, r0
 8000e8e:	0c00      	lsrs	r0, r0, #16
    x2 |= (x2 << 8);
 8000e90:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    *q0 = x0 | (x2 << 8);
 8000e94:	0200      	lsls	r0, r0, #8
 8000e96:	f000 20ff 	and.w	r0, r0, #4278255360	@ 0xff00ff00
 8000e9a:	9002      	str	r0, [sp, #8]
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000e9c:	b288      	uxth	r0, r1
 8000e9e:	0c09      	lsrs	r1, r1, #16
    x3 = w[3];
 8000ea0:	e9dd 2532 	ldrd	r2, r5, [sp, #200]	@ 0xc8
    x3 |= (x3 << 8);
 8000ea4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    *q1 = x1 | (x3 << 8);
 8000ea8:	0209      	lsls	r1, r1, #8
 8000eaa:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8000eae:	9103      	str	r1, [sp, #12]
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8000eb0:	b291      	uxth	r1, r2
 8000eb2:	0c12      	lsrs	r2, r2, #16
    x2 |= (x2 << 8);
 8000eb4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8000eb8:	0c1b      	lsrs	r3, r3, #16
    *q0 = x0 | (x2 << 8);
 8000eba:	0212      	lsls	r2, r2, #8
 8000ebc:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
    x2 |= (x2 << 8);
 8000ec0:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    *q0 = x0 | (x2 << 8);
 8000ec4:	9205      	str	r2, [sp, #20]
 8000ec6:	021b      	lsls	r3, r3, #8
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000ec8:	0c2a      	lsrs	r2, r5, #16
    x2 |= (x2 << 8);
 8000eca:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    x2 = w[2];
 8000ece:	f8dd e0d8 	ldr.w	lr, [sp, #216]	@ 0xd8
    *q0 = x0 | (x2 << 8);
 8000ed2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000ed6:	0209      	lsls	r1, r1, #8
    x3 |= (x3 << 8);
 8000ed8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    *q0 = x0 | (x2 << 8);
 8000edc:	9301      	str	r3, [sp, #4]
    *q1 = x1 | (x3 << 8);
 8000ede:	0212      	lsls	r2, r2, #8
    *q0 = x0 | (x2 << 8);
 8000ee0:	f001 23ff 	and.w	r3, r1, #4278255360	@ 0xff00ff00
    x2 |= (x2 << 8);
 8000ee4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000ee8:	b2a9      	uxth	r1, r5
    *q0 = x0 | (x2 << 8);
 8000eea:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8000eee:	9304      	str	r3, [sp, #16]
    x3 |= (x3 << 8);
 8000ef0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    *q1 = x1 | (x3 << 8);
 8000ef4:	f002 23ff 	and.w	r3, r2, #4278255360	@ 0xff00ff00
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8000ef8:	fa1f f28e 	uxth.w	r2, lr
    *q0 = x0 | (x2 << 8);
 8000efc:	f00c 29ff 	and.w	r9, ip, #4278255360	@ 0xff00ff00
    *q1 = x1 | (x3 << 8);
 8000f00:	0209      	lsls	r1, r1, #8
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f02:	f8dd c0dc 	ldr.w	ip, [sp, #220]	@ 0xdc
    *q1 = x1 | (x3 << 8);
 8000f06:	9307      	str	r3, [sp, #28]
    x2 |= (x2 << 8);
 8000f08:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    *q1 = x1 | (x3 << 8);
 8000f0c:	f001 25ff 	and.w	r5, r1, #4278255360	@ 0xff00ff00
    *q0 = x0 | (x2 << 8);
 8000f10:	0212      	lsls	r2, r2, #8
    *q1 = x1 | (x3 << 8);
 8000f12:	9506      	str	r5, [sp, #24]
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f14:	fa1f f18c 	uxth.w	r1, ip
    *q0 = x0 | (x2 << 8);
 8000f18:	f002 25ff 	and.w	r5, r2, #4278255360	@ 0xff00ff00
    x3 |= (x3 << 8);
 8000f1c:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f20:	4662      	mov	r2, ip
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f22:	f8dd c0a0 	ldr.w	ip, [sp, #160]	@ 0xa0
    *q0 = x0 | (x2 << 8);
 8000f26:	9b01      	ldr	r3, [sp, #4]
    *q1 = x1 | (x3 << 8);
 8000f28:	0200      	lsls	r0, r0, #8
 8000f2a:	f000 2bff 	and.w	fp, r0, #4278255360	@ 0xff00ff00
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f2e:	ea4f 401e 	mov.w	r0, lr, lsr #16
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f32:	fa1f fe8c 	uxth.w	lr, ip
 8000f36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    x0 |= (x0 << 8);
 8000f3a:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8000f3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
    x0 |= (x0 << 8);
 8000f42:	ea4e 2e0e 	orr.w	lr, lr, lr, lsl #8
    *q0 = x0 | (x2 << 8);
 8000f46:	ea43 030c 	orr.w	r3, r3, ip
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8000f4a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f4e:	f8dd c0a4 	ldr.w	ip, [sp, #164]	@ 0xa4
    *q0 = x0 | (x2 << 8);
 8000f52:	9319      	str	r3, [sp, #100]	@ 0x64
 8000f54:	ea47 070e 	orr.w	r7, r7, lr
 8000f58:	9718      	str	r7, [sp, #96]	@ 0x60
    x3 |= (x3 << 8);
 8000f5a:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f5e:	fa1f f78c 	uxth.w	r7, ip
 8000f62:	4663      	mov	r3, ip
    *q1 = x1 | (x3 << 8);
 8000f64:	0236      	lsls	r6, r6, #8
    x1 |= (x1 << 8);
 8000f66:	ea47 2707 	orr.w	r7, r7, r7, lsl #8
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f6a:	f8dd c0b0 	ldr.w	ip, [sp, #176]	@ 0xb0
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8000f6e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
    *q1 = x1 | (x3 << 8);
 8000f72:	f006 26ff 	and.w	r6, r6, #4278255360	@ 0xff00ff00
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f76:	0c1b      	lsrs	r3, r3, #16
    *q1 = x1 | (x3 << 8);
 8000f78:	433e      	orrs	r6, r7
    x1 |= (x1 << 8);
 8000f7a:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    *q1 = x1 | (x3 << 8);
 8000f7e:	9620      	str	r6, [sp, #128]	@ 0x80
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8000f80:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f84:	fa1f f68c 	uxth.w	r6, ip
    *q1 = x1 | (x3 << 8);
 8000f88:	ea48 0303 	orr.w	r3, r8, r3
    x0 |= (x0 << 8);
 8000f8c:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    *q1 = x1 | (x3 << 8);
 8000f90:	9321      	str	r3, [sp, #132]	@ 0x84
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8000f92:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f96:	4663      	mov	r3, ip
    *q0 = x0 | (x2 << 8);
 8000f98:	ea49 0606 	orr.w	r6, r9, r6
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f9c:	0c1b      	lsrs	r3, r3, #16
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000f9e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	@ 0xb4
    *q0 = x0 | (x2 << 8);
 8000fa2:	961a      	str	r6, [sp, #104]	@ 0x68
    x0 |= (x0 << 8);
 8000fa4:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    *q0 = x0 | (x2 << 8);
 8000fa8:	9e02      	ldr	r6, [sp, #8]
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8000faa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    *q0 = x0 | (x2 << 8);
 8000fae:	4333      	orrs	r3, r6
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fb0:	fa1f f68c 	uxth.w	r6, ip
    x1 |= (x1 << 8);
 8000fb4:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    *q0 = x0 | (x2 << 8);
 8000fb8:	931b      	str	r3, [sp, #108]	@ 0x6c
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8000fba:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fbe:	4663      	mov	r3, ip
    *q1 = x1 | (x3 << 8);
 8000fc0:	ea4b 0606 	orr.w	r6, fp, r6
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fc4:	0c1b      	lsrs	r3, r3, #16
    *q1 = x1 | (x3 << 8);
 8000fc6:	9622      	str	r6, [sp, #136]	@ 0x88
    x1 |= (x1 << 8);
 8000fc8:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    *q1 = x1 | (x3 << 8);
 8000fcc:	9e03      	ldr	r6, [sp, #12]
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8000fce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    *q1 = x1 | (x3 << 8);
 8000fd2:	4333      	orrs	r3, r6
 8000fd4:	9323      	str	r3, [sp, #140]	@ 0x8c
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fd6:	f8dd c0c0 	ldr.w	ip, [sp, #192]	@ 0xc0
    *q0 = x0 | (x2 << 8);
 8000fda:	9f04      	ldr	r7, [sp, #16]
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fdc:	fa1f f68c 	uxth.w	r6, ip
    x0 |= (x0 << 8);
 8000fe0:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fe4:	4663      	mov	r3, ip
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8000fe6:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
    *q0 = x0 | (x2 << 8);
 8000fea:	433e      	orrs	r6, r7
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8000fec:	0c1b      	lsrs	r3, r3, #16
    *q0 = x0 | (x2 << 8);
 8000fee:	961c      	str	r6, [sp, #112]	@ 0x70
    x0 |= (x0 << 8);
 8000ff0:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    *q0 = x0 | (x2 << 8);
 8000ff4:	9e05      	ldr	r6, [sp, #20]
    *q1 = x1 | (x3 << 8);
 8000ff6:	9f06      	ldr	r7, [sp, #24]
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8000ff8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    *q0 = x0 | (x2 << 8);
 8000ffc:	4333      	orrs	r3, r6
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8000ffe:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
    *q0 = x0 | (x2 << 8);
 8001000:	931d      	str	r3, [sp, #116]	@ 0x74
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8001002:	b2b3      	uxth	r3, r6
    x1 |= (x1 << 8);
 8001004:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8001008:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    *q1 = x1 | (x3 << 8);
 800100c:	433b      	orrs	r3, r7
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800100e:	0c36      	lsrs	r6, r6, #16
    *q1 = x1 | (x3 << 8);
 8001010:	9324      	str	r3, [sp, #144]	@ 0x90
    x1 |= (x1 << 8);
 8001012:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    *q1 = x1 | (x3 << 8);
 8001016:	9b07      	ldr	r3, [sp, #28]
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8001018:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
    *q1 = x1 | (x3 << 8);
 800101c:	431e      	orrs	r6, r3
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800101e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
    *q1 = x1 | (x3 << 8);
 8001020:	9625      	str	r6, [sp, #148]	@ 0x94
    x2 |= (x2 << 8);
 8001022:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8001026:	b29e      	uxth	r6, r3
 8001028:	0c1b      	lsrs	r3, r3, #16
    *q0 = x0 | (x2 << 8);
 800102a:	0200      	lsls	r0, r0, #8
    x0 |= (x0 << 8);
 800102c:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8001030:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    *q0 = x0 | (x2 << 8);
 8001034:	f000 20ff 	and.w	r0, r0, #4278255360	@ 0xff00ff00
 8001038:	4318      	orrs	r0, r3
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800103a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
    *q0 = x0 | (x2 << 8);
 800103c:	901f      	str	r0, [sp, #124]	@ 0x7c
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800103e:	0c12      	lsrs	r2, r2, #16
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8001040:	b298      	uxth	r0, r3
    x3 |= (x3 << 8);
 8001042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001046:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800104a:	0c1b      	lsrs	r3, r3, #16
    *q1 = x1 | (x3 << 8);
 800104c:	0212      	lsls	r2, r2, #8
 800104e:	0209      	lsls	r1, r1, #8
    x0 |= (x0 << 8);
 8001050:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    x1 |= (x1 << 8);
 8001054:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
 8001058:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 800105c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8001060:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8001064:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
    *q1 = x1 | (x3 << 8);
 8001068:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 800106c:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 8001070:	4301      	orrs	r1, r0
 8001072:	431a      	orrs	r2, r3
    *q0 = x0 | (x2 << 8);
 8001074:	4335      	orrs	r5, r6
    for (i = 0; i < 4; i++) {
        br_aes_ct64_interleave_in(&q[i], &q[i + 4], w + (i << 2));
    }
    br_aes_ct64_ortho(q);
 8001076:	a818      	add	r0, sp, #96	@ 0x60
    *q0 = x0 | (x2 << 8);
 8001078:	951e      	str	r5, [sp, #120]	@ 0x78
    *q1 = x1 | (x3 << 8);
 800107a:	9126      	str	r1, [sp, #152]	@ 0x98
 800107c:	9227      	str	r2, [sp, #156]	@ 0x9c
    br_aes_ct64_ortho(q);
 800107e:	f7ff fd27 	bl	8000ad0 <br_aes_ct64_ortho>
    q[0] ^= sk[0];
 8001082:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	4041      	eors	r1, r0
 800108a:	9118      	str	r1, [sp, #96]	@ 0x60
 800108c:	6861      	ldr	r1, [r4, #4]
    q[1] ^= sk[1];
 800108e:	e9dd 351a 	ldrd	r3, r5, [sp, #104]	@ 0x68
    q[0] ^= sk[0];
 8001092:	404a      	eors	r2, r1
 8001094:	9219      	str	r2, [sp, #100]	@ 0x64
    q[1] ^= sk[1];
 8001096:	68a2      	ldr	r2, [r4, #8]
 8001098:	4053      	eors	r3, r2
 800109a:	931a      	str	r3, [sp, #104]	@ 0x68
 800109c:	68e3      	ldr	r3, [r4, #12]
    q[3] ^= sk[3];
 800109e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
    q[2] ^= sk[2];
 80010a0:	e9dd 671c 	ldrd	r6, r7, [sp, #112]	@ 0x70
    q[1] ^= sk[1];
 80010a4:	405d      	eors	r5, r3
    q[2] ^= sk[2];
 80010a6:	6923      	ldr	r3, [r4, #16]
    q[1] ^= sk[1];
 80010a8:	951b      	str	r5, [sp, #108]	@ 0x6c
    q[2] ^= sk[2];
 80010aa:	405e      	eors	r6, r3
 80010ac:	6963      	ldr	r3, [r4, #20]
 80010ae:	961c      	str	r6, [sp, #112]	@ 0x70
 80010b0:	405f      	eors	r7, r3
    q[3] ^= sk[3];
 80010b2:	69a3      	ldr	r3, [r4, #24]
    q[2] ^= sk[2];
 80010b4:	971d      	str	r7, [sp, #116]	@ 0x74
    q[3] ^= sk[3];
 80010b6:	4053      	eors	r3, r2
 80010b8:	931e      	str	r3, [sp, #120]	@ 0x78
 80010ba:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80010bc:	69e3      	ldr	r3, [r4, #28]
 80010be:	4053      	eors	r3, r2
 80010c0:	931f      	str	r3, [sp, #124]	@ 0x7c
    q[4] ^= sk[4];
 80010c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80010c4:	6a23      	ldr	r3, [r4, #32]
 80010c6:	4053      	eors	r3, r2
 80010c8:	9320      	str	r3, [sp, #128]	@ 0x80
 80010ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80010cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80010ce:	4053      	eors	r3, r2
 80010d0:	9321      	str	r3, [sp, #132]	@ 0x84
    q[5] ^= sk[5];
 80010d2:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	@ 0x88
 80010d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80010d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    q[7] ^= sk[7];
 80010da:	9417      	str	r4, [sp, #92]	@ 0x5c
    q[5] ^= sk[5];
 80010dc:	4053      	eors	r3, r2
 80010de:	4041      	eors	r1, r0
 80010e0:	9322      	str	r3, [sp, #136]	@ 0x88
    q[6] ^= sk[6];
 80010e2:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
    q[5] ^= sk[5];
 80010e6:	9123      	str	r1, [sp, #140]	@ 0x8c
    q[6] ^= sk[6];
 80010e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80010ea:	404a      	eors	r2, r1
 80010ec:	9224      	str	r2, [sp, #144]	@ 0x90
 80010ee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    q[7] ^= sk[7];
 80010f0:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	@ 0x98
    q[6] ^= sk[6];
 80010f4:	4053      	eors	r3, r2
 80010f6:	9325      	str	r3, [sp, #148]	@ 0x94
    q[7] ^= sk[7];
 80010f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80010fa:	405d      	eors	r5, r3
 80010fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80010fe:	9526      	str	r5, [sp, #152]	@ 0x98
 8001100:	405e      	eors	r6, r3
 8001102:	9627      	str	r6, [sp, #156]	@ 0x9c

    add_round_key(q, sk_exp);
    for (i = 1; i < nrounds; i++) {
        br_aes_ct64_bitslice_Sbox(q);
 8001104:	a818      	add	r0, sp, #96	@ 0x60
 8001106:	f7ff fa3b 	bl	8000580 <br_aes_ct64_bitslice_Sbox>
        x = q[i];
 800110a:	e9dd 3b19 	ldrd	r3, fp, [sp, #100]	@ 0x64
 800110e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8001110:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001112:	090a      	lsrs	r2, r1, #4
 8001114:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 8001118:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800111c:	0308      	lsls	r0, r1, #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800111e:	0c12      	lsrs	r2, r2, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001120:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001124:	021d      	lsls	r5, r3, #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001126:	0412      	lsls	r2, r2, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001128:	4302      	orrs	r2, r0
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800112a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800112e:	f3c3 2007 	ubfx	r0, r3, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001132:	4328      	orrs	r0, r5
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001134:	0b1d      	lsrs	r5, r3, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001136:	011b      	lsls	r3, r3, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001138:	f405 2570 	and.w	r5, r5, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800113c:	0d1b      	lsrs	r3, r3, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800113e:	4328      	orrs	r0, r5
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001140:	b289      	uxth	r1, r1
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001142:	051b      	lsls	r3, r3, #20
 8001144:	4303      	orrs	r3, r0
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001146:	ea42 0501 	orr.w	r5, r2, r1
    r0 = (q0 >> 16) | (q0 << 48);
 800114a:	0c12      	lsrs	r2, r2, #16
 800114c:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001150:	ea4f 2e04 	mov.w	lr, r4, lsl #8
    r0 = (q0 >> 16) | (q0 << 48);
 8001154:	0c1a      	lsrs	r2, r3, #16
 8001156:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800115a:	9007      	str	r0, [sp, #28]
 800115c:	ea80 0105 	eor.w	r1, r0, r5
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001160:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001164:	ea4f 101b 	mov.w	r0, fp, lsr #4
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001168:	f3c4 2707 	ubfx	r7, r4, #8, #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800116c:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001170:	ea47 070e 	orr.w	r7, r7, lr
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001174:	ea4f 3e14 	mov.w	lr, r4, lsr #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001178:	0124      	lsls	r4, r4, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800117a:	f40e 2e70 	and.w	lr, lr, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800117e:	0d24      	lsrs	r4, r4, #20
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 8001180:	ea82 0503 	eor.w	r5, r2, r3
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001184:	ea47 070e 	orr.w	r7, r7, lr
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001188:	0524      	lsls	r4, r4, #20
 800118a:	433c      	orrs	r4, r7
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800118c:	9506      	str	r5, [sp, #24]
        x = q[i];
 800118e:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001190:	940b      	str	r4, [sp, #44]	@ 0x2c
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001192:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 8001194:	9105      	str	r1, [sp, #20]
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001196:	022e      	lsls	r6, r5, #8
 8001198:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800119c:	ea4f 1814 	mov.w	r8, r4, lsr #4
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80011a0:	f3c5 2407 	ubfx	r4, r5, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80011a4:	4334      	orrs	r4, r6
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80011a6:	0b2e      	lsrs	r6, r5, #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80011a8:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80011ac:	f406 2670 	and.w	r6, r6, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011b0:	012d      	lsls	r5, r5, #4
        x = q[i];
 80011b2:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80011b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 80011b6:	9208      	str	r2, [sp, #32]
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80011b8:	4334      	orrs	r4, r6
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011ba:	0d2d      	lsrs	r5, r5, #20
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80011bc:	9e26      	ldr	r6, [sp, #152]	@ 0x98
        x = q[i];
 80011be:	9a21      	ldr	r2, [sp, #132]	@ 0x84
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011c0:	052d      	lsls	r5, r5, #20
 80011c2:	4325      	orrs	r5, r4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80011c4:	ea4f 2c01 	mov.w	ip, r1, lsl #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80011c8:	ea4f 1e16 	mov.w	lr, r6, lsr #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80011cc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011d0:	950d      	str	r5, [sp, #52]	@ 0x34
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80011d2:	ea4e 7e01 	orr.w	lr, lr, r1, lsl #28
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80011d6:	f3c1 2607 	ubfx	r6, r1, #8, #8
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80011da:	0b0d      	lsrs	r5, r1, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011dc:	0109      	lsls	r1, r1, #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80011de:	ea46 060c 	orr.w	r6, r6, ip
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80011e2:	f405 2570 	and.w	r5, r5, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011e6:	0d09      	lsrs	r1, r1, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80011e8:	432e      	orrs	r6, r5
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011ea:	0509      	lsls	r1, r1, #20
 80011ec:	ea46 0c01 	orr.w	ip, r6, r1
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80011f0:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80011f4:	f8cd c008 	str.w	ip, [sp, #8]
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80011f8:	0c00      	lsrs	r0, r0, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80011fa:	ea4f 3c0b 	mov.w	ip, fp, lsl #12
 80011fe:	f00c 4c70 	and.w	ip, ip, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001202:	0400      	lsls	r0, r0, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001204:	ea40 000c 	orr.w	r0, r0, ip
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001208:	fa1f fb8b 	uxth.w	fp, fp
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800120c:	ea40 0b0b 	orr.w	fp, r0, fp
    r1 = (q1 >> 16) | (q1 << 48);
 8001210:	0c00      	lsrs	r0, r0, #16
 8001212:	ea40 4c07 	orr.w	ip, r0, r7, lsl #16
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001216:	981c      	ldr	r0, [sp, #112]	@ 0x70
    r1 = (q1 >> 16) | (q1 << 48);
 8001218:	f8cd c010 	str.w	ip, [sp, #16]
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800121c:	ea4f 2903 	mov.w	r9, r3, lsl #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001220:	ea4f 1c10 	mov.w	ip, r0, lsr #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001224:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001228:	ea4c 7c03 	orr.w	ip, ip, r3, lsl #28
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800122c:	f3c3 2707 	ubfx	r7, r3, #8, #8
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001230:	0b18      	lsrs	r0, r3, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001232:	011b      	lsls	r3, r3, #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001234:	ea47 0709 	orr.w	r7, r7, r9
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001238:	f400 2070 	and.w	r0, r0, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800123c:	0d1b      	lsrs	r3, r3, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800123e:	4307      	orrs	r7, r0
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001240:	051b      	lsls	r3, r3, #20
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001242:	981e      	ldr	r0, [sp, #120]	@ 0x78
        x = q[i];
 8001244:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 8001246:	9925      	ldr	r1, [sp, #148]	@ 0x94
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001248:	433b      	orrs	r3, r7
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800124a:	f028 4870 	bic.w	r8, r8, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800124e:	930c      	str	r3, [sp, #48]	@ 0x30
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001250:	ea4f 4818 	mov.w	r8, r8, lsr #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001254:	0303      	lsls	r3, r0, #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001256:	ea4f 4808 	mov.w	r8, r8, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800125a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800125e:	ea48 0303 	orr.w	r3, r8, r3
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001262:	b280      	uxth	r0, r0
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001264:	4318      	orrs	r0, r3
    r3 = (q3 >> 16) | (q3 << 48);
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800126c:	9c26      	ldr	r4, [sp, #152]	@ 0x98
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800126e:	f8dd 8098 	ldr.w	r8, [sp, #152]	@ 0x98
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001272:	f02e 4e70 	bic.w	lr, lr, #4026531840	@ 0xf0000000
 8001276:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800127a:	0324      	lsls	r4, r4, #12
 800127c:	f004 4470 	and.w	r4, r4, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001280:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001284:	ea4e 0e04 	orr.w	lr, lr, r4
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001288:	fa1f f488 	uxth.w	r4, r8
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800128c:	ea4e 0404 	orr.w	r4, lr, r4
 8001290:	9403      	str	r4, [sp, #12]
 8001292:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001294:	f02c 4c70 	bic.w	ip, ip, #4026531840	@ 0xf0000000
    r7 = (q7 >> 16) | (q7 << 48);
 8001298:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800129c:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80012a4:	0326      	lsls	r6, r4, #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012a6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80012aa:	f006 4670 	and.w	r6, r6, #4026531840	@ 0xf0000000
 80012ae:	ea4c 0606 	orr.w	r6, ip, r6
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 80012b2:	fa1f fc84 	uxth.w	ip, r4
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80012b6:	ea46 040c 	orr.w	r4, r6, ip
 80012ba:	9411      	str	r4, [sp, #68]	@ 0x44
    r2 = (q2 >> 16) | (q2 << 48);
 80012bc:	0c36      	lsrs	r6, r6, #16
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012be:	9c20      	ldr	r4, [sp, #128]	@ 0x80
    r7 = (q7 >> 16) | (q7 << 48);
 80012c0:	f8cd e004 	str.w	lr, [sp, #4]
    r2 = (q2 >> 16) | (q2 << 48);
 80012c4:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80012c8:	0217      	lsls	r7, r2, #8
 80012ca:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012ce:	ea4f 1814 	mov.w	r8, r4, lsr #4
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80012d2:	f3c2 2e07 	ubfx	lr, r2, #8, #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012d6:	ea48 7802 	orr.w	r8, r8, r2, lsl #28
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80012da:	ea4e 0e07 	orr.w	lr, lr, r7
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80012de:	0b17      	lsrs	r7, r2, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80012e0:	0112      	lsls	r2, r2, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80012e2:	f407 2770 	and.w	r7, r7, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80012e6:	0d12      	lsrs	r2, r2, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80012e8:	ea4e 0e07 	orr.w	lr, lr, r7
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80012ec:	0512      	lsls	r2, r2, #20
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012ee:	f028 4870 	bic.w	r8, r8, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80012f2:	ea4e 0c02 	orr.w	ip, lr, r2
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012f6:	ea4f 4818 	mov.w	r8, r8, lsr #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80012fa:	0322      	lsls	r2, r4, #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80012fc:	ea4f 4808 	mov.w	r8, r8, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001300:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8001304:	ea48 0202 	orr.w	r2, r8, r2
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001308:	fa1f f884 	uxth.w	r8, r4
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800130c:	ea42 0808 	orr.w	r8, r2, r8
    r4 = (q4 >> 16) | (q4 << 48);
 8001310:	0c12      	lsrs	r2, r2, #16
 8001312:	ea42 4e0e 	orr.w	lr, r2, lr, lsl #16
    r2 = (q2 >> 16) | (q2 << 48);
 8001316:	9609      	str	r6, [sp, #36]	@ 0x24
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001318:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800131c:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001320:	9a22      	ldr	r2, [sp, #136]	@ 0x88
    r4 = (q4 >> 16) | (q4 << 48);
 8001322:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001326:	0912      	lsrs	r2, r2, #4
 8001328:	f8df e648 	ldr.w	lr, [pc, #1608]	@ 8001974 <aes_ecb4x.constprop.0+0xb3c>
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 800132c:	9e01      	ldr	r6, [sp, #4]
 800132e:	9c03      	ldr	r4, [sp, #12]
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001330:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001334:	ea4f 2c05 	mov.w	ip, r5, lsl #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001338:	ea02 0e0e 	and.w	lr, r2, lr
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800133c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001340:	f3c5 2207 	ubfx	r2, r5, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001344:	ea42 020c 	orr.w	r2, r2, ip
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001348:	ea4f 3c15 	mov.w	ip, r5, lsr #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800134c:	012d      	lsls	r5, r5, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800134e:	f40c 2c70 	and.w	ip, ip, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001352:	0d2d      	lsrs	r5, r5, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001354:	ea42 020c 	orr.w	r2, r2, ip
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001358:	052d      	lsls	r5, r5, #20
 800135a:	ea42 0c05 	orr.w	ip, r2, r5
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800135e:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8001360:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001364:	020f      	lsls	r7, r1, #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001366:	ea4f 1e15 	mov.w	lr, r5, lsr #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800136a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800136e:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001372:	ea4e 7e01 	orr.w	lr, lr, r1, lsl #28
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001376:	f3c1 2c07 	ubfx	ip, r1, #8, #8
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800137a:	0b0d      	lsrs	r5, r1, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800137c:	0109      	lsls	r1, r1, #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800137e:	ea4c 0c07 	orr.w	ip, ip, r7
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001382:	f405 2570 	and.w	r5, r5, #983040	@ 0xf0000
    r1 = (q1 >> 16) | (q1 << 48);
 8001386:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001388:	0d09      	lsrs	r1, r1, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800138a:	ea4c 0c05 	orr.w	ip, ip, r5
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800138e:	0509      	lsls	r1, r1, #20
 8001390:	ea4c 0801 	orr.w	r8, ip, r1
    r1 = (q1 >> 16) | (q1 << 48);
 8001394:	ea4f 4917 	mov.w	r9, r7, lsr #16
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 8001398:	9904      	ldr	r1, [sp, #16]
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800139a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
    r1 = (q1 >> 16) | (q1 << 48);
 800139e:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013a2:	ea89 0807 	eor.w	r8, r9, r7
 80013a6:	ea81 050b 	eor.w	r5, r1, fp
 80013aa:	9f05      	ldr	r7, [sp, #20]
 80013ac:	4071      	eors	r1, r6
 80013ae:	4061      	eors	r1, r4
 80013b0:	4079      	eors	r1, r7
 80013b2:	ea81 0b08 	eor.w	fp, r1, r8
    r3 = (q3 >> 16) | (q3 << 48);
 80013b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013b8:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
    r3 = (q3 >> 16) | (q3 << 48);
 80013bc:	0c0f      	lsrs	r7, r1, #16
 80013be:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013c2:	4058      	eors	r0, r3
 80013c4:	4073      	eors	r3, r6
    r7 = (q7 >> 16) | (q7 << 48);
 80013c6:	9e02      	ldr	r6, [sp, #8]
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013c8:	ea87 0b01 	eor.w	fp, r7, r1
    r7 = (q7 >> 16) | (q7 << 48);
 80013cc:	0c31      	lsrs	r1, r6, #16
 80013ce:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013d2:	ea89 0901 	eor.w	r9, r9, r1
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013d6:	404f      	eors	r7, r1
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013d8:	ea89 0906 	eor.w	r9, r9, r6
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013dc:	4077      	eors	r7, r6
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013de:	9e06      	ldr	r6, [sp, #24]
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013e0:	9104      	str	r1, [sp, #16]
 80013e2:	4063      	eors	r3, r4
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013e4:	ea89 0906 	eor.w	r9, r9, r6
    q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 80013e8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80013ea:	9e09      	ldr	r6, [sp, #36]	@ 0x24
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80013ec:	9922      	ldr	r1, [sp, #136]	@ 0x88
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013ee:	ea89 0905 	eor.w	r9, r9, r5
    q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 80013f2:	4075      	eors	r5, r6
 80013f4:	4066      	eors	r6, r4
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013f6:	4073      	eors	r3, r6
    q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 80013f8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 80013fc:	ea83 090b 	eor.w	r9, r3, fp
 8001400:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001404:	030b      	lsls	r3, r1, #12
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001406:	f8dd 9088 	ldr.w	r9, [sp, #136]	@ 0x88
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800140a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800140c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001410:	430b      	orrs	r3, r1
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001412:	fa1f f989 	uxth.w	r9, r9
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001416:	ea43 0909 	orr.w	r9, r3, r9
    r5 = (q5 >> 16) | (q5 << 48);
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001420:	9a24      	ldr	r2, [sp, #144]	@ 0x90
    r5 = (q5 >> 16) | (q5 << 48);
 8001422:	9309      	str	r3, [sp, #36]	@ 0x24
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001424:	f02e 4e70 	bic.w	lr, lr, #4026531840	@ 0xf0000000
 8001428:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800142c:	0312      	lsls	r2, r2, #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800142e:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001432:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8001436:	ea4e 0202 	orr.w	r2, lr, r2
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800143a:	f8dd e090 	ldr.w	lr, [sp, #144]	@ 0x90
    r2 = (q2 >> 16) | (q2 << 48);
 800143e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001440:	fa1f fe8e 	uxth.w	lr, lr
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001444:	ea42 0e0e 	orr.w	lr, r2, lr
    r6 = (q6 >> 16) | (q6 << 48);
 8001448:	0c12      	lsrs	r2, r2, #16
 800144a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    r2 = (q2 >> 16) | (q2 << 48);
 800144e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001452:	ea4c 4c04 	orr.w	ip, ip, r4, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001456:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
    q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 800145a:	ea8c 0e03 	eor.w	lr, ip, r3
 800145e:	ea8c 0c08 	eor.w	ip, ip, r8
 8001462:	ea8c 0c06 	eor.w	ip, ip, r6
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 8001466:	ea87 070e 	eor.w	r7, r7, lr
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800146a:	9c03      	ldr	r4, [sp, #12]
    q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 800146c:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 8001470:	ea87 0c00 	eor.w	ip, r7, r0
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 8001474:	9f01      	ldr	r7, [sp, #4]
    q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 8001476:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800147a:	9e07      	ldr	r6, [sp, #28]
 800147c:	9904      	ldr	r1, [sp, #16]
 800147e:	9b08      	ldr	r3, [sp, #32]
 8001480:	ea87 0c04 	eor.w	ip, r7, r4
    q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 8001484:	ea85 050e 	eor.w	r5, r5, lr
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 8001488:	ea86 0e0c 	eor.w	lr, r6, ip
 800148c:	9e06      	ldr	r6, [sp, #24]
 800148e:	f8cd c01c 	str.w	ip, [sp, #28]
 8001492:	ea8e 0e06 	eor.w	lr, lr, r6
 8001496:	9e02      	ldr	r6, [sp, #8]
    r4 = (q4 >> 16) | (q4 << 48);
 8001498:	9c12      	ldr	r4, [sp, #72]	@ 0x48
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800149a:	404e      	eors	r6, r1
 800149c:	ea83 0c06 	eor.w	ip, r3, r6
 80014a0:	9b05      	ldr	r3, [sp, #20]
    q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 80014a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 80014a4:	ea8c 0c03 	eor.w	ip, ip, r3
    r4 = (q4 >> 16) | (q4 << 48);
 80014a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 80014aa:	f8cd c014 	str.w	ip, [sp, #20]
    r4 = (q4 >> 16) | (q4 << 48);
 80014ae:	ea4f 4813 	mov.w	r8, r3, lsr #16
    q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 80014b2:	ea81 0c04 	eor.w	ip, r1, r4
    r4 = (q4 >> 16) | (q4 << 48);
 80014b6:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
    q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 80014ba:	9c03      	ldr	r4, [sp, #12]
 80014bc:	404f      	eors	r7, r1
 80014be:	9904      	ldr	r1, [sp, #16]
 80014c0:	4067      	eors	r7, r4
 80014c2:	9c02      	ldr	r4, [sp, #8]
 80014c4:	4078      	eors	r0, r7
 80014c6:	ea88 0703 	eor.w	r7, r8, r3
 80014ca:	ea88 0801 	eor.w	r8, r8, r1
 80014ce:	ea88 0804 	eor.w	r8, r8, r4
    q[0] ^= sk[0];
 80014d2:	f8da 4040 	ldr.w	r4, [sl, #64]	@ 0x40
 80014d6:	9905      	ldr	r1, [sp, #20]
    q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 80014d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    q[0] ^= sk[0];
 80014da:	ea8e 0404 	eor.w	r4, lr, r4
 80014de:	9418      	str	r4, [sp, #96]	@ 0x60
 80014e0:	f8da 4044 	ldr.w	r4, [sl, #68]	@ 0x44
 80014e4:	404c      	eors	r4, r1
 80014e6:	9419      	str	r4, [sp, #100]	@ 0x64
    q[1] ^= sk[1];
 80014e8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80014ea:	f8da 4048 	ldr.w	r4, [sl, #72]	@ 0x48
 80014ee:	404c      	eors	r4, r1
 80014f0:	941a      	str	r4, [sp, #104]	@ 0x68
 80014f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80014f4:	f8da 404c 	ldr.w	r4, [sl, #76]	@ 0x4c
 80014f8:	404c      	eors	r4, r1
 80014fa:	941b      	str	r4, [sp, #108]	@ 0x6c
    q[2] ^= sk[2];
 80014fc:	f8da 4050 	ldr.w	r4, [sl, #80]	@ 0x50
 8001500:	4065      	eors	r5, r4
 8001502:	951c      	str	r5, [sp, #112]	@ 0x70
 8001504:	f8da 4054 	ldr.w	r4, [sl, #84]	@ 0x54
 8001508:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800150a:	406c      	eors	r4, r5
 800150c:	941d      	str	r4, [sp, #116]	@ 0x74
    q[3] ^= sk[3];
 800150e:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 8001512:	9d11      	ldr	r5, [sp, #68]	@ 0x44
    r5 = (q5 >> 16) | (q5 << 48);
 8001514:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    q[3] ^= sk[3];
 8001516:	406c      	eors	r4, r5
 8001518:	941e      	str	r4, [sp, #120]	@ 0x78
 800151a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800151c:	f8da 405c 	ldr.w	r4, [sl, #92]	@ 0x5c
 8001520:	406c      	eors	r4, r5
 8001522:	941f      	str	r4, [sp, #124]	@ 0x7c
    r5 = (q5 >> 16) | (q5 << 48);
 8001524:	0c0c      	lsrs	r4, r1, #16
 8001526:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
    q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 800152a:	ea84 0501 	eor.w	r5, r4, r1
    q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 800152e:	ea88 080b 	eor.w	r8, r8, fp
    q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 8001532:	407c      	eors	r4, r7
    q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 8001534:	ea80 0b07 	eor.w	fp, r0, r7
    q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 8001538:	ea83 000c 	eor.w	r0, r3, ip
 800153c:	ea83 0309 	eor.w	r3, r3, r9
    q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 8001540:	ea83 0e02 	eor.w	lr, r3, r2
    q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 8001544:	405c      	eors	r4, r3
    q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 8001546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 8001548:	9f01      	ldr	r7, [sp, #4]
    r6 = (q6 >> 16) | (q6 << 48);
 800154a:	9910      	ldr	r1, [sp, #64]	@ 0x40
    q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 800154c:	405a      	eors	r2, r3
    q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 800154e:	4057      	eors	r7, r2
 8001550:	407e      	eors	r6, r7
    r6 = (q6 >> 16) | (q6 << 48);
 8001552:	0c0f      	lsrs	r7, r1, #16
 8001554:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 8001558:	ea88 080c 	eor.w	r8, r8, ip
    q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 800155c:	ea87 0c01 	eor.w	ip, r7, r1
    q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 8001560:	9904      	ldr	r1, [sp, #16]
 8001562:	9b07      	ldr	r3, [sp, #28]
 8001564:	ea81 010c 	eor.w	r1, r1, ip
 8001568:	4059      	eors	r1, r3
    q[4] ^= sk[4];
 800156a:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
 800156e:	ea8b 0303 	eor.w	r3, fp, r3
 8001572:	9320      	str	r3, [sp, #128]	@ 0x80
 8001574:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 8001578:	ea88 0303 	eor.w	r3, r8, r3
 800157c:	9321      	str	r3, [sp, #132]	@ 0x84
    q[5] ^= sk[5];
 800157e:	f8da 3068 	ldr.w	r3, [sl, #104]	@ 0x68
    q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 8001582:	4068      	eors	r0, r5
    q[5] ^= sk[5];
 8001584:	4058      	eors	r0, r3
    q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 8001586:	406f      	eors	r7, r5
    q[6] ^= sk[6];
 8001588:	f8da 3070 	ldr.w	r3, [sl, #112]	@ 0x70
    q[5] ^= sk[5];
 800158c:	9022      	str	r0, [sp, #136]	@ 0x88
    for (i = 1; i < nrounds; i++) {
 800158e:	f10a 0a40 	add.w	sl, sl, #64	@ 0x40
    q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 8001592:	4057      	eors	r7, r2
 8001594:	ea8e 0c0c 	eor.w	ip, lr, ip
    q[7] ^= sk[7];
 8001598:	f8da 2038 	ldr.w	r2, [sl, #56]	@ 0x38
    q[6] ^= sk[6];
 800159c:	ea8c 0303 	eor.w	r3, ip, r3
 80015a0:	9324      	str	r3, [sp, #144]	@ 0x90
    q[5] ^= sk[5];
 80015a2:	f8da 302c 	ldr.w	r3, [sl, #44]	@ 0x2c
 80015a6:	405c      	eors	r4, r3
    q[7] ^= sk[7];
 80015a8:	f8da 303c 	ldr.w	r3, [sl, #60]	@ 0x3c
    q[5] ^= sk[5];
 80015ac:	9423      	str	r4, [sp, #140]	@ 0x8c
    q[7] ^= sk[7];
 80015ae:	4056      	eors	r6, r2
 80015b0:	4059      	eors	r1, r3
    q[6] ^= sk[6];
 80015b2:	f8da 2034 	ldr.w	r2, [sl, #52]	@ 0x34
    for (i = 1; i < nrounds; i++) {
 80015b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    q[7] ^= sk[7];
 80015b8:	9626      	str	r6, [sp, #152]	@ 0x98
    q[6] ^= sk[6];
 80015ba:	4057      	eors	r7, r2
    for (i = 1; i < nrounds; i++) {
 80015bc:	4553      	cmp	r3, sl
    q[6] ^= sk[6];
 80015be:	9725      	str	r7, [sp, #148]	@ 0x94
    q[7] ^= sk[7];
 80015c0:	9127      	str	r1, [sp, #156]	@ 0x9c
    for (i = 1; i < nrounds; i++) {
 80015c2:	f47f ad9f 	bne.w	8001104 <aes_ecb4x.constprop.0+0x2cc>
        shift_rows(q);
        mix_columns(q);
        add_round_key(q, sk_exp + (i << 3));
    }
    br_aes_ct64_bitslice_Sbox(q);
 80015c6:	a818      	add	r0, sp, #96	@ 0x60
 80015c8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80015ca:	f7fe ffd9 	bl	8000580 <br_aes_ct64_bitslice_Sbox>
        x = q[i];
 80015ce:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80015d0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80015d2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80015d4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80015d6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80015da:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80015dc:	f8dd b084 	ldr.w	fp, [sp, #132]	@ 0x84
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80015e0:	0937      	lsrs	r7, r6, #4
 80015e2:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
 80015e6:	f027 4770 	bic.w	r7, r7, #4026531840	@ 0xf0000000
 80015ea:	0c3f      	lsrs	r7, r7, #16
 80015ec:	043f      	lsls	r7, r7, #16
 80015ee:	9701      	str	r7, [sp, #4]
 80015f0:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80015f2:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 80015f6:	4fdf      	ldr	r7, [pc, #892]	@ (8001974 <aes_ecb4x.constprop.0+0xb3c>)
 80015f8:	ea4e 7e02 	orr.w	lr, lr, r2, lsl #28
 80015fc:	ea0e 0707 	and.w	r7, lr, r7
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001600:	ea4f 2e02 	mov.w	lr, r2, lsl #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001604:	9702      	str	r7, [sp, #8]
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001606:	f40e 477f 	and.w	r7, lr, #65280	@ 0xff00
 800160a:	9703      	str	r7, [sp, #12]
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800160c:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 800160e:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 8001612:	4fd8      	ldr	r7, [pc, #864]	@ (8001974 <aes_ecb4x.constprop.0+0xb3c>)
 8001614:	ea4e 7e03 	orr.w	lr, lr, r3, lsl #28
 8001618:	ea4f 181c 	mov.w	r8, ip, lsr #4
 800161c:	ea0e 0707 	and.w	r7, lr, r7
 8001620:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001624:	ea4f 2e03 	mov.w	lr, r3, lsl #8
 8001628:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800162c:	f028 4870 	bic.w	r8, r8, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001630:	f8cd e014 	str.w	lr, [sp, #20]
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001634:	ea4f 4818 	mov.w	r8, r8, lsr #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001638:	ea4f 3e0c 	mov.w	lr, ip, lsl #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800163c:	ea4f 4808 	mov.w	r8, r8, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001640:	f00e 4e70 	and.w	lr, lr, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001644:	ea4f 2a05 	mov.w	sl, r5, lsl #8
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001648:	ea48 0e0e 	orr.w	lr, r8, lr
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800164c:	fa1f fc8c 	uxth.w	ip, ip
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001650:	ea4e 080c 	orr.w	r8, lr, ip
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001654:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001658:	f3c5 2e07 	ubfx	lr, r5, #8, #8
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800165c:	ea4f 3c15 	mov.w	ip, r5, lsr #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001660:	012d      	lsls	r5, r5, #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001662:	ea4e 0e0a 	orr.w	lr, lr, sl
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001666:	f40c 2c70 	and.w	ip, ip, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800166a:	0d2d      	lsrs	r5, r5, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800166c:	ea4e 0c0c 	orr.w	ip, lr, ip
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001670:	052d      	lsls	r5, r5, #20
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001672:	9704      	str	r7, [sp, #16]
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001674:	ea4c 0e05 	orr.w	lr, ip, r5
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001678:	9f01      	ldr	r7, [sp, #4]
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800167a:	f8dd c078 	ldr.w	ip, [sp, #120]	@ 0x78
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800167e:	0335      	lsls	r5, r6, #12
 8001680:	f005 4570 	and.w	r5, r5, #4026531840	@ 0xf0000000
 8001684:	433d      	orrs	r5, r7
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001686:	ea4f 2901 	mov.w	r9, r1, lsl #8
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800168a:	b2b6      	uxth	r6, r6
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800168c:	ea45 0a06 	orr.w	sl, r5, r6
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001690:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001694:	f3c1 2607 	ubfx	r6, r1, #8, #8
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001698:	0b0d      	lsrs	r5, r1, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800169a:	0109      	lsls	r1, r1, #4
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800169c:	ea46 0609 	orr.w	r6, r6, r9
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016a0:	f405 2570 	and.w	r5, r5, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016a4:	0d09      	lsrs	r1, r1, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016a6:	4335      	orrs	r5, r6
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016a8:	0509      	lsls	r1, r1, #20
 80016aa:	ea45 0601 	orr.w	r6, r5, r1
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80016ae:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80016b0:	9f02      	ldr	r7, [sp, #8]
 80016b2:	0329      	lsls	r1, r5, #12
 80016b4:	f001 4170 	and.w	r1, r1, #4026531840	@ 0xf0000000
 80016b8:	4339      	orrs	r1, r7
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 80016ba:	b2ad      	uxth	r5, r5
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80016bc:	430d      	orrs	r5, r1
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80016be:	9903      	ldr	r1, [sp, #12]
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80016c0:	f3c2 2707 	ubfx	r7, r2, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80016c4:	430f      	orrs	r7, r1
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016c6:	0b11      	lsrs	r1, r2, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016c8:	0112      	lsls	r2, r2, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016ca:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016ce:	0d12      	lsrs	r2, r2, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016d0:	4339      	orrs	r1, r7
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016d2:	0512      	lsls	r2, r2, #20
 80016d4:	4311      	orrs	r1, r2
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80016d6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80016d8:	9f04      	ldr	r7, [sp, #16]
 80016da:	0312      	lsls	r2, r2, #12
 80016dc:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80016e0:	433a      	orrs	r2, r7
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 80016e2:	fa1f f78c 	uxth.w	r7, ip
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80016e6:	433a      	orrs	r2, r7
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80016e8:	9f05      	ldr	r7, [sp, #20]
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80016ea:	f3c3 2c07 	ubfx	ip, r3, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80016ee:	ea4c 0c07 	orr.w	ip, ip, r7
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016f2:	0b1f      	lsrs	r7, r3, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016f4:	011b      	lsls	r3, r3, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016f6:	f407 2770 	and.w	r7, r7, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80016fa:	0d1b      	lsrs	r3, r3, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80016fc:	ea4c 0707 	orr.w	r7, ip, r7
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	431f      	orrs	r7, r3
    q[0] ^= sk[0];
 8001704:	f8d4 3380 	ldr.w	r3, [r4, #896]	@ 0x380
 8001708:	ea88 0303 	eor.w	r3, r8, r3
 800170c:	9318      	str	r3, [sp, #96]	@ 0x60
 800170e:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 8001712:	ea8e 0303 	eor.w	r3, lr, r3
 8001716:	9319      	str	r3, [sp, #100]	@ 0x64
    q[1] ^= sk[1];
 8001718:	f8d4 3388 	ldr.w	r3, [r4, #904]	@ 0x388
 800171c:	ea8a 0303 	eor.w	r3, sl, r3
 8001720:	931a      	str	r3, [sp, #104]	@ 0x68
 8001722:	f8d4 338c 	ldr.w	r3, [r4, #908]	@ 0x38c
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001726:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 8001974 <aes_ecb4x.constprop.0+0xb3c>
    q[1] ^= sk[1];
 800172a:	405e      	eors	r6, r3
    q[2] ^= sk[2];
 800172c:	f8d4 3390 	ldr.w	r3, [r4, #912]	@ 0x390
    q[1] ^= sk[1];
 8001730:	961b      	str	r6, [sp, #108]	@ 0x6c
    q[2] ^= sk[2];
 8001732:	405d      	eors	r5, r3
 8001734:	951c      	str	r5, [sp, #112]	@ 0x70
 8001736:	f8d4 3394 	ldr.w	r3, [r4, #916]	@ 0x394
 800173a:	4059      	eors	r1, r3
    q[3] ^= sk[3];
 800173c:	f8d4 3398 	ldr.w	r3, [r4, #920]	@ 0x398
    q[2] ^= sk[2];
 8001740:	911d      	str	r1, [sp, #116]	@ 0x74
    q[3] ^= sk[3];
 8001742:	405a      	eors	r2, r3
 8001744:	f8d4 339c 	ldr.w	r3, [r4, #924]	@ 0x39c
 8001748:	921e      	str	r2, [sp, #120]	@ 0x78
 800174a:	405f      	eors	r7, r3
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800174c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
    q[3] ^= sk[3];
 800174e:	971f      	str	r7, [sp, #124]	@ 0x7c
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001750:	ea4f 1813 	mov.w	r8, r3, lsr #4
 8001754:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8001756:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8001758:	091e      	lsrs	r6, r3, #4
 800175a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800175c:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001760:	021d      	lsls	r5, r3, #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001762:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8001764:	0919      	lsrs	r1, r3, #4
 8001766:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8001768:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800176c:	021a      	lsls	r2, r3, #8
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800176e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8001776:	ea03 0a0a 	and.w	sl, r3, sl
 800177a:	ea48 780b 	orr.w	r8, r8, fp, lsl #28
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800177e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001780:	f028 4870 	bic.w	r8, r8, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001784:	ea4f 3e03 	mov.w	lr, r3, lsl #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001788:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800178c:	ea4f 4808 	mov.w	r8, r8, lsl #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001790:	f00e 4e70 	and.w	lr, lr, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001794:	ea4f 2c0b 	mov.w	ip, fp, lsl #8
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001798:	ea48 0e0e 	orr.w	lr, r8, lr
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800179c:	fa1f f883 	uxth.w	r8, r3
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80017a0:	ea4e 0e08 	orr.w	lr, lr, r8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80017a4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80017a8:	f3cb 2807 	ubfx	r8, fp, #8, #8
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80017ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80017ae:	ea48 080c 	orr.w	r8, r8, ip
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80017b2:	ea4f 3c1b 	mov.w	ip, fp, lsr #12
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80017b6:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80017ba:	f40c 2c70 	and.w	ip, ip, #983040	@ 0xf0000
 80017be:	ea48 0c0c 	orr.w	ip, r8, ip
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80017c2:	0c36      	lsrs	r6, r6, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80017c4:	ea4f 3803 	mov.w	r8, r3, lsl #12
 80017c8:	f008 4870 	and.w	r8, r8, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 80017cc:	0436      	lsls	r6, r6, #16
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80017ce:	ea4f 190b 	mov.w	r9, fp, lsl #4
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80017d2:	ea46 0608 	orr.w	r6, r6, r8
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 80017d6:	fa1f f883 	uxth.w	r8, r3
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80017da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80017dc:	ea4f 5919 	mov.w	r9, r9, lsr #20
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80017e0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80017e4:	ea4f 5909 	mov.w	r9, r9, lsl #20
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80017e8:	ea46 0608 	orr.w	r6, r6, r8
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 80017ec:	f3c3 2807 	ubfx	r8, r3, #8, #8
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80017f0:	ea4c 0c09 	orr.w	ip, ip, r9
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 80017f4:	ea48 0805 	orr.w	r8, r8, r5
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 80017f8:	ea4f 1903 	mov.w	r9, r3, lsl #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 80017fc:	0b1d      	lsrs	r5, r3, #12
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 80017fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001800:	f021 4170 	bic.w	r1, r1, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001804:	f405 2570 	and.w	r5, r5, #983040	@ 0xf0000
 8001808:	ea48 0505 	orr.w	r5, r8, r5
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800180c:	0c09      	lsrs	r1, r1, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800180e:	ea4f 3803 	mov.w	r8, r3, lsl #12
 8001812:	f008 4870 	and.w	r8, r8, #4026531840	@ 0xf0000000
               | ((x & (uint64_t)0x00000000FFF00000) >> 4)
 8001816:	0409      	lsls	r1, r1, #16
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001818:	ea41 0108 	orr.w	r1, r1, r8
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 800181c:	fa1f f883 	uxth.w	r8, r3
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001820:	9b25      	ldr	r3, [sp, #148]	@ 0x94
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001822:	ea4f 5919 	mov.w	r9, r9, lsr #20
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001826:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800182a:	ea4f 5909 	mov.w	r9, r9, lsl #20
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800182e:	ea41 0108 	orr.w	r1, r1, r8
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001832:	f3c3 2807 	ubfx	r8, r3, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001836:	ea48 0802 	orr.w	r8, r8, r2
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800183a:	ea45 0509 	orr.w	r5, r5, r9
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800183e:	0b1a      	lsrs	r2, r3, #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001840:	ea4f 1903 	mov.w	r9, r3, lsl #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001844:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 8001848:	9b26      	ldr	r3, [sp, #152]	@ 0x98
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800184a:	ea4f 5919 	mov.w	r9, r9, lsr #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800184e:	ea48 0202 	orr.w	r2, r8, r2
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001852:	ea4f 5909 	mov.w	r9, r9, lsl #20
 8001856:	ea42 0809 	orr.w	r8, r2, r9
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800185a:	031a      	lsls	r2, r3, #12
 800185c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8001860:	ea4a 0302 	orr.w	r3, sl, r2
        q[i] = (x & (uint64_t)0x000000000000FFFF)
 8001864:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8001866:	fa1f f982 	uxth.w	r9, r2
               | ((x & (uint64_t)0x00000000000F0000) << 12)
 800186a:	ea43 0209 	orr.w	r2, r3, r9
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800186e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 8001870:	023f      	lsls	r7, r7, #8
 8001872:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
               | ((x & (uint64_t)0x0000FF0000000000) >> 8)
 8001876:	f3c3 2307 	ubfx	r3, r3, #8, #8
               | ((x & (uint64_t)0x000000FF00000000) << 8)
 800187a:	433b      	orrs	r3, r7
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800187c:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 800187e:	ea4f 3917 	mov.w	r9, r7, lsr #12
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001882:	013f      	lsls	r7, r7, #4
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 8001884:	f409 2970 	and.w	r9, r9, #983040	@ 0xf0000
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 8001888:	0d3f      	lsrs	r7, r7, #20
               | ((x & (uint64_t)0xF000000000000000) >> 12)
 800188a:	ea43 0309 	orr.w	r3, r3, r9
               | ((x & (uint64_t)0x0FFF000000000000) << 4);
 800188e:	053f      	lsls	r7, r7, #20
 8001890:	433b      	orrs	r3, r7
    q[4] ^= sk[4];
 8001892:	f8d4 73a0 	ldr.w	r7, [r4, #928]	@ 0x3a0
 8001896:	ea8e 0707 	eor.w	r7, lr, r7
 800189a:	9720      	str	r7, [sp, #128]	@ 0x80
 800189c:	f8d4 73a4 	ldr.w	r7, [r4, #932]	@ 0x3a4
 80018a0:	ea8c 0707 	eor.w	r7, ip, r7
 80018a4:	9721      	str	r7, [sp, #132]	@ 0x84
    q[5] ^= sk[5];
 80018a6:	f8d4 73a8 	ldr.w	r7, [r4, #936]	@ 0x3a8
 80018aa:	407e      	eors	r6, r7
 80018ac:	9622      	str	r6, [sp, #136]	@ 0x88
 80018ae:	f8d4 63ac 	ldr.w	r6, [r4, #940]	@ 0x3ac
 80018b2:	4075      	eors	r5, r6
 80018b4:	9523      	str	r5, [sp, #140]	@ 0x8c
    q[6] ^= sk[6];
 80018b6:	f8d4 53b0 	ldr.w	r5, [r4, #944]	@ 0x3b0
 80018ba:	4069      	eors	r1, r5
 80018bc:	9124      	str	r1, [sp, #144]	@ 0x90
 80018be:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 80018c2:	ea88 0101 	eor.w	r1, r8, r1
 80018c6:	9125      	str	r1, [sp, #148]	@ 0x94
    q[7] ^= sk[7];
 80018c8:	f8d4 13b8 	ldr.w	r1, [r4, #952]	@ 0x3b8
 80018cc:	404a      	eors	r2, r1
 80018ce:	f8d4 13bc 	ldr.w	r1, [r4, #956]	@ 0x3bc
 80018d2:	9226      	str	r2, [sp, #152]	@ 0x98
 80018d4:	404b      	eors	r3, r1
    shift_rows(q);
    add_round_key(q, sk_exp + 8 * nrounds);

    br_aes_ct64_ortho(q);
 80018d6:	a818      	add	r0, sp, #96	@ 0x60
    q[7] ^= sk[7];
 80018d8:	9327      	str	r3, [sp, #156]	@ 0x9c
    br_aes_ct64_ortho(q);
 80018da:	f7ff f8f9 	bl	8000ad0 <br_aes_ct64_ortho>
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
    for (i = 0; i < 4; i ++) {
        br_aes_ct64_interleave_out(w + (i << 2), q[i], q[i + 4]);
 80018e0:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 80018e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018e6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018ea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80018ec:	0a1f      	lsrs	r7, r3, #8
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018ee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80018f0:	0a1e      	lsrs	r6, r3, #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018f2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80018f4:	0a18      	lsrs	r0, r3, #8
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80018f8:	0a19      	lsrs	r1, r3, #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80018fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	9310      	str	r3, [sp, #64]	@ 0x40
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001900:	9b26      	ldr	r3, [sp, #152]	@ 0x98
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001902:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	9311      	str	r3, [sp, #68]	@ 0x44
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800190a:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800190e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
    x2 |= (x2 >> 8);
 8001910:	ea4a 2a1a 	orr.w	sl, sl, sl, lsr #8
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001914:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
    x2 |= (x2 >> 8);
 8001918:	f8cd a014 	str.w	sl, [sp, #20]
    x0 |= (x0 >> 8);
 800191c:	ea4b 2b1b 	orr.w	fp, fp, fp, lsr #8
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001920:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    x0 |= (x0 >> 8);
 8001924:	f8cd b008 	str.w	fp, [sp, #8]
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001928:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 800192c:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001930:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    x3 |= (x3 >> 8);
 8001932:	ea4a 2a1a 	orr.w	sl, sl, sl, lsr #8
 8001936:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
    x1 |= (x1 >> 8);
 800193a:	ea4b 2b1b 	orr.w	fp, fp, fp, lsr #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800193e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    x1 |= (x1 >> 8);
 8001942:	f8cd b00c 	str.w	fp, [sp, #12]
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001946:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 800194a:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800194e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
    x2 |= (x2 >> 8);
 8001950:	ea4a 2a1a 	orr.w	sl, sl, sl, lsr #8
 8001954:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
    x0 |= (x0 >> 8);
 8001958:	ea4b 2b1b 	orr.w	fp, fp, fp, lsr #8
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800195c:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    x0 |= (x0 >> 8);
 8001960:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001964:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001968:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800196c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    x3 |= (x3 >> 8);
 800196e:	ea4a 2a1a 	orr.w	sl, sl, sl, lsr #8
 8001972:	e001      	b.n	8001978 <aes_ecb4x.constprop.0+0xb40>
 8001974:	0fff0000 	.word	0x0fff0000
        br_aes_ct64_interleave_out(w + (i << 2), q[i], q[i + 4]);
 8001978:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	@ 0x60
    x3 |= (x3 >> 8);
 800197c:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
    x1 |= (x1 >> 8);
 8001980:	ea4b 2b1b 	orr.w	fp, fp, fp, lsr #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001984:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    x1 |= (x1 >> 8);
 8001988:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800198c:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001990:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001994:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
    x0 |= (x0 >> 8);
 8001996:	ea4b 2b1b 	orr.w	fp, fp, fp, lsr #8
    x2 |= (x2 >> 8);
 800199a:	ea4a 2a1a 	orr.w	sl, sl, sl, lsr #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800199e:	ea4f 2814 	mov.w	r8, r4, lsr #8
    x0 |= (x0 >> 8);
 80019a2:	f8cd b004 	str.w	fp, [sp, #4]
    x2 |= (x2 >> 8);
 80019a6:	f8cd a010 	str.w	sl, [sp, #16]
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 80019aa:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80019ae:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 80019b2:	f004 13ff 	and.w	r3, r4, #16711935	@ 0xff00ff
    x0 |= (x0 >> 8);
 80019b6:	b2e4      	uxtb	r4, r4
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 80019b8:	ea44 2413 	orr.w	r4, r4, r3, lsr #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80019bc:	ea4f 2915 	mov.w	r9, r5, lsr #8
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 80019c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 80019c2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
    x0 |= (x0 >> 8);
 80019c6:	ea45 2515 	orr.w	r5, r5, r5, lsr #8
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 80019ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80019ce:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 80019d2:	f003 14ff 	and.w	r4, r3, #16711935	@ 0xff00ff
 80019d6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    x1 |= (x1 >> 8);
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	ea42 2212 	orr.w	r2, r2, r2, lsr #8
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 80019e0:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 80019e4:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80019e8:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
    x2 |= (x2 >> 8);
 80019ec:	fa5f f888 	uxtb.w	r8, r8
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 80019f0:	ea48 2813 	orr.w	r8, r8, r3, lsr #8
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80019f4:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 80019f8:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80019fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
    x3 |= (x3 >> 8);
 8001a00:	fa5f fc8c 	uxtb.w	ip, ip
    x2 |= (x2 >> 8);
 8001a04:	ea49 2919 	orr.w	r9, r9, r9, lsr #8
    x3 |= (x3 >> 8);
 8001a08:	ea4e 2e1e 	orr.w	lr, lr, lr, lsr #8
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a0c:	ea4c 2c13 	orr.w	ip, ip, r3, lsr #8
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001a10:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001a14:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001a18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001a1a:	f8cd 8018 	str.w	r8, [sp, #24]
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001a1e:	f8cd c01c 	str.w	ip, [sp, #28]
    x0 |= (x0 >> 8);
 8001a22:	f8dd c068 	ldr.w	ip, [sp, #104]	@ 0x68
    dst[0] = (unsigned char)x;
 8001a26:	9414      	str	r4, [sp, #80]	@ 0x50
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001a28:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    x0 |= (x0 >> 8);
 8001a2c:	fa5f f38c 	uxtb.w	r3, ip
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a30:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001a34:	9a02      	ldr	r2, [sp, #8]
 8001a36:	ea43 4c02 	orr.w	ip, r3, r2, lsl #16
 8001a3a:	f8cd c020 	str.w	ip, [sp, #32]
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001a3e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
    x1 |= (x1 >> 8);
 8001a40:	f8dd c088 	ldr.w	ip, [sp, #136]	@ 0x88
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001a44:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    x1 |= (x1 >> 8);
 8001a48:	fa5f f38c 	uxtb.w	r3, ip
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a4c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001a50:	9a03      	ldr	r2, [sp, #12]
 8001a52:	ea43 4c02 	orr.w	ip, r3, r2, lsl #16
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001a56:	9a05      	ldr	r2, [sp, #20]
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001a58:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001a5c:	f007 13ff 	and.w	r3, r7, #16711935	@ 0xff00ff
    x2 |= (x2 >> 8);
 8001a60:	b2ff      	uxtb	r7, r7
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a62:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001a66:	ea47 4c02 	orr.w	ip, r7, r2, lsl #16
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001a6a:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001a6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001a70:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
    x3 |= (x3 >> 8);
 8001a74:	b2f6      	uxtb	r6, r6
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a76:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001a7a:	ea46 4c07 	orr.w	ip, r6, r7, lsl #16
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001a7e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001a80:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001a82:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001a86:	f006 12ff 	and.w	r2, r6, #16711935	@ 0xff00ff
    x0 |= (x0 >> 8);
 8001a8a:	b2f3      	uxtb	r3, r6
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001a8c:	9e24      	ldr	r6, [sp, #144]	@ 0x90
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a8e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001a92:	ea43 4c07 	orr.w	ip, r3, r7, lsl #16
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001a96:	f006 12ff 	and.w	r2, r6, #16711935	@ 0xff00ff
    x1 |= (x1 >> 8);
 8001a9a:	b2f3      	uxtb	r3, r6
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8001a9c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001aa2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001aa4:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001aa8:	ea43 4c02 	orr.w	ip, r3, r2, lsl #16
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001aac:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
    x2 |= (x2 >> 8);
 8001ab0:	b2c0      	uxtb	r0, r0
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8001ab2:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001ab6:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001aba:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001abe:	ea40 4c07 	orr.w	ip, r0, r7, lsl #16
    x3 |= (x3 >> 8);
 8001ac2:	b2c9      	uxtb	r1, r1
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001ac4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001ac6:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8001aca:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001ace:	ea41 4c07 	orr.w	ip, r1, r7, lsl #16
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001ad2:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001ad4:	9901      	ldr	r1, [sp, #4]
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001ad6:	9810      	ldr	r0, [sp, #64]	@ 0x40
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001ad8:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
    x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 8001adc:	f007 12ff 	and.w	r2, r7, #16711935	@ 0xff00ff
    x0 |= (x0 >> 8);
 8001ae0:	b2fb      	uxtb	r3, r7
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001ae2:	9f26      	ldr	r7, [sp, #152]	@ 0x98
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001ae4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8001ae6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001aea:	ea43 4c01 	orr.w	ip, r3, r1, lsl #16
    x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 8001aee:	f007 12ff 	and.w	r2, r7, #16711935	@ 0xff00ff
    x1 |= (x1 >> 8);
 8001af2:	b2fb      	uxtb	r3, r7
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8001af4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    x1 |= (x1 >> 8);
 8001af8:	ea4b 2b1b 	orr.w	fp, fp, fp, lsr #8
    w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 8001afc:	f8cd c008 	str.w	ip, [sp, #8]
    x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001b00:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001b04:	ea43 4c0b 	orr.w	ip, r3, fp, lsl #16
    x2 |= (x2 >> 8);
 8001b08:	b2c3      	uxtb	r3, r0
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001b0a:	9804      	ldr	r0, [sp, #16]
    w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 8001b0c:	f8cd c00c 	str.w	ip, [sp, #12]
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8001b10:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001b14:	ea43 4c00 	orr.w	ip, r3, r0, lsl #16
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001b18:	f006 12ff 	and.w	r2, r6, #16711935	@ 0xff00ff
    x3 |= (x3 >> 8);
 8001b1c:	b2f3      	uxtb	r3, r6
    x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 8001b1e:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8001b22:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    x3 |= (x3 >> 8);
 8001b26:	ea4a 2a1a 	orr.w	sl, sl, sl, lsr #8
    w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 8001b2a:	f8cd c010 	str.w	ip, [sp, #16]
    w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 8001b2e:	ea43 4c0a 	orr.w	ip, r3, sl, lsl #16
 8001b32:	f8cd c014 	str.w	ip, [sp, #20]
    dst[0] = (unsigned char)x;
 8001b36:	9a07      	ldr	r2, [sp, #28]
 8001b38:	9908      	ldr	r1, [sp, #32]
 8001b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b3c:	f04f 0b00 	mov.w	fp, #0
 8001b40:	f04f 0e00 	mov.w	lr, #0
 8001b44:	462e      	mov	r6, r5
 8001b46:	f365 0b07 	bfi	fp, r5, #0, #8
 8001b4a:	f361 0e07 	bfi	lr, r1, #0, #8
 8001b4e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8001b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    dst[1] = (unsigned char)(x >> 8);
 8001b52:	9615      	str	r6, [sp, #84]	@ 0x54
    dst[0] = (unsigned char)x;
 8001b54:	f04f 0a00 	mov.w	sl, #0
 8001b58:	f04f 0900 	mov.w	r9, #0
 8001b5c:	f04f 0c00 	mov.w	ip, #0
 8001b60:	f364 0a07 	bfi	sl, r4, #0, #8
 8001b64:	f368 0907 	bfi	r9, r8, #0, #8
 8001b68:	f360 0c07 	bfi	ip, r0, #0, #8
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b70:	f04f 0800 	mov.w	r8, #0
 8001b74:	2700      	movs	r7, #0
 8001b76:	2300      	movs	r3, #0
 8001b78:	f361 0307 	bfi	r3, r1, #0, #8
 8001b7c:	f362 0807 	bfi	r8, r2, #0, #8
 8001b80:	f365 0707 	bfi	r7, r5, #0, #8
 8001b84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8001b86:	9310      	str	r3, [sp, #64]	@ 0x40
 8001b88:	4621      	mov	r1, r4
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8001b8e:	f360 0507 	bfi	r5, r0, #0, #8
 8001b92:	2300      	movs	r3, #0
 8001b94:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001b96:	f362 0307 	bfi	r3, r2, #0, #8
 8001b9a:	f364 0107 	bfi	r1, r4, #0, #8
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	9311      	str	r3, [sp, #68]	@ 0x44
 8001ba2:	f360 0207 	bfi	r2, r0, #0, #8
 8001ba6:	9b03      	ldr	r3, [sp, #12]
 8001ba8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001baa:	9902      	ldr	r1, [sp, #8]
 8001bac:	9212      	str	r2, [sp, #72]	@ 0x48
 8001bae:	2400      	movs	r4, #0
 8001bb0:	9a04      	ldr	r2, [sp, #16]
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f361 0407 	bfi	r4, r1, #0, #8
 8001bb8:	f363 0007 	bfi	r0, r3, #0, #8
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	9b05      	ldr	r3, [sp, #20]
 8001bc0:	f362 0107 	bfi	r1, r2, #0, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f363 0207 	bfi	r2, r3, #0, #8
    dst[1] = (unsigned char)(x >> 8);
 8001bca:	0a33      	lsrs	r3, r6, #8
    dst[0] = (unsigned char)x;
 8001bcc:	f363 2b0f 	bfi	fp, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001bd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    dst[0] = (unsigned char)x;
 8001bd2:	9201      	str	r2, [sp, #4]
    dst[1] = (unsigned char)(x >> 8);
 8001bd4:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001bd6:	f363 2a0f 	bfi	sl, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001bda:	9b06      	ldr	r3, [sp, #24]
    dst[0] = (unsigned char)x;
 8001bdc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8001bde:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    dst[1] = (unsigned char)(x >> 8);
 8001be0:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001be2:	f363 290f 	bfi	r9, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001be6:	9b07      	ldr	r3, [sp, #28]
 8001be8:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001bea:	f363 280f 	bfi	r8, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001bee:	9b08      	ldr	r3, [sp, #32]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001bf2:	f363 2e0f 	bfi	lr, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bf8:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001bfa:	f363 2c0f 	bfi	ip, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001bfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001c00:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c02:	f363 270f 	bfi	r7, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001c08:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c0a:	f363 220f 	bfi	r2, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    dst[0] = (unsigned char)x;
 8001c10:	9210      	str	r2, [sp, #64]	@ 0x40
    dst[1] = (unsigned char)(x >> 8);
 8001c12:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c14:	f363 250f 	bfi	r5, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001c1a:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c1c:	f363 260f 	bfi	r6, r3, #8, #8
 8001c20:	9611      	str	r6, [sp, #68]	@ 0x44
    dst[1] = (unsigned char)(x >> 8);
 8001c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    dst[0] = (unsigned char)x;
 8001c24:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8001c26:	9a01      	ldr	r2, [sp, #4]
    dst[1] = (unsigned char)(x >> 8);
 8001c28:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c2a:	f363 260f 	bfi	r6, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    dst[0] = (unsigned char)x;
 8001c30:	9612      	str	r6, [sp, #72]	@ 0x48
 8001c32:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
    dst[1] = (unsigned char)(x >> 8);
 8001c34:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c36:	f363 260f 	bfi	r6, r3, #8, #8
 8001c3a:	9613      	str	r6, [sp, #76]	@ 0x4c
    dst[1] = (unsigned char)(x >> 8);
 8001c3c:	9e02      	ldr	r6, [sp, #8]
 8001c3e:	0a33      	lsrs	r3, r6, #8
    dst[0] = (unsigned char)x;
 8001c40:	f363 240f 	bfi	r4, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c44:	9b03      	ldr	r3, [sp, #12]
 8001c46:	9e04      	ldr	r6, [sp, #16]
 8001c48:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c4a:	f363 200f 	bfi	r0, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c4e:	0a33      	lsrs	r3, r6, #8
    dst[0] = (unsigned char)x;
 8001c50:	f363 210f 	bfi	r1, r3, #8, #8
    dst[1] = (unsigned char)(x >> 8);
 8001c54:	9b05      	ldr	r3, [sp, #20]
    dst[2] = (unsigned char)(x >> 16);
 8001c56:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    dst[1] = (unsigned char)(x >> 8);
 8001c58:	0a1b      	lsrs	r3, r3, #8
    dst[0] = (unsigned char)x;
 8001c5a:	f363 220f 	bfi	r2, r3, #8, #8
    dst[2] = (unsigned char)(x >> 16);
 8001c5e:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001c60:	f363 4b17 	bfi	fp, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001c64:	0e33      	lsrs	r3, r6, #24
    dst[2] = (unsigned char)(x >> 16);
 8001c66:	9e14      	ldr	r6, [sp, #80]	@ 0x50
    dst[0] = (unsigned char)x;
 8001c68:	9201      	str	r2, [sp, #4]
 8001c6a:	f363 6b1f 	bfi	fp, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001c6e:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001c70:	f363 4a17 	bfi	sl, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001c74:	0e33      	lsrs	r3, r6, #24
    dst[2] = (unsigned char)(x >> 16);
 8001c76:	9e06      	ldr	r6, [sp, #24]
    dst[0] = (unsigned char)x;
 8001c78:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8001c7a:	f363 6a1f 	bfi	sl, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001c7e:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001c80:	f363 4917 	bfi	r9, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001c84:	0e33      	lsrs	r3, r6, #24
    dst[2] = (unsigned char)(x >> 16);
 8001c86:	9e07      	ldr	r6, [sp, #28]
    dst[0] = (unsigned char)x;
 8001c88:	f8c2 b000 	str.w	fp, [r2]
 8001c8c:	f363 691f 	bfi	r9, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001c90:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001c92:	f363 4817 	bfi	r8, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001c96:	0e33      	lsrs	r3, r6, #24
    dst[2] = (unsigned char)(x >> 16);
 8001c98:	9e08      	ldr	r6, [sp, #32]
    dst[0] = (unsigned char)x;
 8001c9a:	f8c2 a004 	str.w	sl, [r2, #4]
 8001c9e:	f363 681f 	bfi	r8, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001ca2:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001ca4:	f363 4e17 	bfi	lr, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001ca8:	0e33      	lsrs	r3, r6, #24
    dst[2] = (unsigned char)(x >> 16);
 8001caa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
    dst[0] = (unsigned char)x;
 8001cac:	f8c2 9008 	str.w	r9, [r2, #8]
 8001cb0:	f363 6e1f 	bfi	lr, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001cb4:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001cb6:	f363 4c17 	bfi	ip, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001cba:	0e33      	lsrs	r3, r6, #24
    dst[2] = (unsigned char)(x >> 16);
 8001cbc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    dst[0] = (unsigned char)x;
 8001cbe:	f8c2 800c 	str.w	r8, [r2, #12]
 8001cc2:	f363 6c1f 	bfi	ip, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001cc6:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001cc8:	f363 4717 	bfi	r7, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001ccc:	0e33      	lsrs	r3, r6, #24
    dst[0] = (unsigned char)x;
 8001cce:	f363 671f 	bfi	r7, r3, #24, #8
 8001cd2:	6197      	str	r7, [r2, #24]
    dst[2] = (unsigned char)(x >> 16);
 8001cd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
    dst[0] = (unsigned char)x;
 8001cd6:	f8c2 e010 	str.w	lr, [r2, #16]
 8001cda:	f8c2 c014 	str.w	ip, [r2, #20]
 8001cde:	4616      	mov	r6, r2
 8001ce0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    dst[2] = (unsigned char)(x >> 16);
 8001ce2:	0c3b      	lsrs	r3, r7, #16
    dst[0] = (unsigned char)x;
 8001ce4:	f363 4217 	bfi	r2, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001ce8:	0e3b      	lsrs	r3, r7, #24
    dst[0] = (unsigned char)x;
 8001cea:	4617      	mov	r7, r2
 8001cec:	f363 671f 	bfi	r7, r3, #24, #8
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	61f3      	str	r3, [r6, #28]
 8001cf4:	4637      	mov	r7, r6
    dst[2] = (unsigned char)(x >> 16);
 8001cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cf8:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001cfa:	f363 4517 	bfi	r5, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001cfe:	0e33      	lsrs	r3, r6, #24
    dst[0] = (unsigned char)x;
 8001d00:	f363 651f 	bfi	r5, r3, #24, #8
 8001d04:	463e      	mov	r6, r7
 8001d06:	623d      	str	r5, [r7, #32]
    dst[2] = (unsigned char)(x >> 16);
 8001d08:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
    dst[0] = (unsigned char)x;
 8001d0a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8001d0c:	9a01      	ldr	r2, [sp, #4]
    dst[2] = (unsigned char)(x >> 16);
 8001d0e:	0c3b      	lsrs	r3, r7, #16
    dst[0] = (unsigned char)x;
 8001d10:	f363 4517 	bfi	r5, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d14:	0e3b      	lsrs	r3, r7, #24
    dst[0] = (unsigned char)x;
 8001d16:	f363 651f 	bfi	r5, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001d1a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
    dst[0] = (unsigned char)x;
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	6273      	str	r3, [r6, #36]	@ 0x24
 8001d20:	4635      	mov	r5, r6
 8001d22:	9e12      	ldr	r6, [sp, #72]	@ 0x48
    dst[2] = (unsigned char)(x >> 16);
 8001d24:	0c3b      	lsrs	r3, r7, #16
    dst[0] = (unsigned char)x;
 8001d26:	f363 4617 	bfi	r6, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d2a:	0e3b      	lsrs	r3, r7, #24
    dst[0] = (unsigned char)x;
 8001d2c:	f363 661f 	bfi	r6, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001d30:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
    dst[0] = (unsigned char)x;
 8001d32:	62ae      	str	r6, [r5, #40]	@ 0x28
 8001d34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
    dst[2] = (unsigned char)(x >> 16);
 8001d36:	0c3b      	lsrs	r3, r7, #16
    dst[0] = (unsigned char)x;
 8001d38:	f363 4617 	bfi	r6, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d3c:	0e3b      	lsrs	r3, r7, #24
    dst[0] = (unsigned char)x;
 8001d3e:	f363 661f 	bfi	r6, r3, #24, #8
 8001d42:	62ee      	str	r6, [r5, #44]	@ 0x2c
    dst[2] = (unsigned char)(x >> 16);
 8001d44:	9e02      	ldr	r6, [sp, #8]
 8001d46:	0c33      	lsrs	r3, r6, #16
    dst[0] = (unsigned char)x;
 8001d48:	f363 4417 	bfi	r4, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d4c:	0e33      	lsrs	r3, r6, #24
    dst[0] = (unsigned char)x;
 8001d4e:	f363 641f 	bfi	r4, r3, #24, #8
 8001d52:	632c      	str	r4, [r5, #48]	@ 0x30
    dst[2] = (unsigned char)(x >> 16);
 8001d54:	9c03      	ldr	r4, [sp, #12]
 8001d56:	0c23      	lsrs	r3, r4, #16
    dst[0] = (unsigned char)x;
 8001d58:	f363 4017 	bfi	r0, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d5c:	0e23      	lsrs	r3, r4, #24
    dst[0] = (unsigned char)x;
 8001d5e:	f363 601f 	bfi	r0, r3, #24, #8
 8001d62:	6368      	str	r0, [r5, #52]	@ 0x34
    dst[2] = (unsigned char)(x >> 16);
 8001d64:	9804      	ldr	r0, [sp, #16]
 8001d66:	0c03      	lsrs	r3, r0, #16
    dst[0] = (unsigned char)x;
 8001d68:	f363 4117 	bfi	r1, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d6c:	0e03      	lsrs	r3, r0, #24
    dst[2] = (unsigned char)(x >> 16);
 8001d6e:	9805      	ldr	r0, [sp, #20]
    dst[0] = (unsigned char)x;
 8001d70:	f363 611f 	bfi	r1, r3, #24, #8
    dst[2] = (unsigned char)(x >> 16);
 8001d74:	0c03      	lsrs	r3, r0, #16
    dst[0] = (unsigned char)x;
 8001d76:	f363 4217 	bfi	r2, r3, #16, #8
    dst[3] = (unsigned char)(x >> 24);
 8001d7a:	0e03      	lsrs	r3, r0, #24
    dst[0] = (unsigned char)x;
 8001d7c:	f363 621f 	bfi	r2, r3, #24, #8
 8001d80:	9201      	str	r2, [sp, #4]
 8001d82:	63a9      	str	r1, [r5, #56]	@ 0x38
 8001d84:	63ea      	str	r2, [r5, #60]	@ 0x3c
    }
    br_range_enc32le(out, w, 16);
}
 8001d86:	b039      	add	sp, #228	@ 0xe4
 8001d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d8c <aes256_ecb_keyexp>:

void aes192_ctr_keyexp(aes192ctx *r, const unsigned char *key) {
    aes192_ecb_keyexp(r, key);
}

void aes256_ecb_keyexp(aes256ctx *r, const unsigned char *key) {
 8001d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d90:	4605      	mov	r5, r0
 8001d92:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
    uint64_t skey[30];
    r->sk_exp = malloc(sizeof(uint64_t) * PQC_AES256_STATESIZE);
 8001d96:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
void aes256_ecb_keyexp(aes256ctx *r, const unsigned char *key) {
 8001d9a:	460f      	mov	r7, r1
    r->sk_exp = malloc(sizeof(uint64_t) * PQC_AES256_STATESIZE);
 8001d9c:	f00a f892 	bl	800bec4 <malloc>
 8001da0:	9001      	str	r0, [sp, #4]
 8001da2:	6028      	str	r0, [r5, #0]
    if (r->sk_exp == NULL) {
 8001da4:	2800      	cmp	r0, #0
 8001da6:	f000 8153 	beq.w	8002050 <aes256_ecb_keyexp+0x2c4>
        *v ++ = br_dec32le(src);
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
            tmp = sub_word(tmp) ^ Rcon[k];
 8001db2:	4ca9      	ldr	r4, [pc, #676]	@ (8002058 <aes256_ecb_keyexp+0x2cc>)
        *v ++ = br_dec32le(src);
 8001db4:	ad4e      	add	r5, sp, #312	@ 0x138
 8001db6:	462e      	mov	r6, r5
 8001db8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001dba:	6938      	ldr	r0, [r7, #16]
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
    for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 8001dc2:	f04f 0a00 	mov.w	sl, #0
        *v ++ = br_dec32le(src);
 8001dc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    tmp = skey[(key_len >> 2) - 1];
 8001dc8:	f50d 7b02 	add.w	fp, sp, #520	@ 0x208
 8001dcc:	462e      	mov	r6, r5
 8001dce:	46a8      	mov	r8, r5
 8001dd0:	461f      	mov	r7, r3
    for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 8001dd2:	46d1      	mov	r9, sl
        if (j == 0) {
 8001dd4:	f1b9 0f00 	cmp.w	r9, #0
 8001dd8:	f000 8107 	beq.w	8001fea <aes256_ecb_keyexp+0x25e>
        } else if (nk > 6 && j == 4) {
 8001ddc:	f1b9 0f04 	cmp.w	r9, #4
 8001de0:	f000 811f 	beq.w	8002022 <aes256_ecb_keyexp+0x296>
        if (++ j == nk) {
 8001de4:	f109 0901 	add.w	r9, r9, #1
        tmp ^= skey[i - nk];
 8001de8:	f8d8 2000 	ldr.w	r2, [r8]
        if (++ j == nk) {
 8001dec:	f1b9 0f08 	cmp.w	r9, #8
        tmp ^= skey[i - nk];
 8001df0:	ea87 0702 	eor.w	r7, r7, r2
            k ++;
 8001df4:	bf04      	itt	eq
 8001df6:	f10a 0a01 	addeq.w	sl, sl, #1
            j = 0;
 8001dfa:	f04f 0900 	moveq.w	r9, #0
        skey[i] = tmp;
 8001dfe:	f8c8 7020 	str.w	r7, [r8, #32]
    for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 8001e02:	f108 0804 	add.w	r8, r8, #4
 8001e06:	45c3      	cmp	fp, r8
 8001e08:	d1e4      	bne.n	8001dd4 <aes256_ecb_keyexp+0x48>
 8001e0a:	af12      	add	r7, sp, #72	@ 0x48
    x3 = w[3];
 8001e0c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
    x1 = w[1];
 8001e10:	e9d6 0e00 	ldrd	r0, lr, [r6]
    x2 &= (uint64_t)0x0000FFFF0000FFFF;
 8001e14:	fa1f fc82 	uxth.w	ip, r2
 8001e18:	0c12      	lsrs	r2, r2, #16
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8001e1a:	fa1f f880 	uxth.w	r8, r0
    x2 |= (x2 << 8);
 8001e1e:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8001e22:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    x0 &= (uint64_t)0x0000FFFF0000FFFF;
 8001e26:	0c00      	lsrs	r0, r0, #16
    *q0 = x0 | (x2 << 8);
 8001e28:	0212      	lsls	r2, r2, #8
 8001e2a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    x0 |= (x0 << 8);
 8001e2e:	ea48 2808 	orr.w	r8, r8, r8, lsl #8
 8001e32:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    *q0 = x0 | (x2 << 8);
 8001e36:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8001e3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
    *q0 = x0 | (x2 << 8);
 8001e3e:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
    x0 &= (uint64_t)0x00FF00FF00FF00FF;
 8001e42:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
    *q0 = x0 | (x2 << 8);
 8001e46:	4302      	orrs	r2, r0
 8001e48:	ea4c 0408 	orr.w	r4, ip, r8
    x3 &= (uint64_t)0x0000FFFF0000FFFF;
 8001e4c:	b299      	uxth	r1, r3
 8001e4e:	0c1b      	lsrs	r3, r3, #16
    *q0 = x0 | (x2 << 8);
 8001e50:	e9cd 4202 	strd	r4, r2, [sp, #8]
        q[1] = q[0];
 8001e54:	e9cd 4204 	strd	r4, r2, [sp, #16]
        q[2] = q[0];
 8001e58:	e9cd 2407 	strd	r2, r4, [sp, #28]
        q[3] = q[0];
 8001e5c:	9209      	str	r2, [sp, #36]	@ 0x24
    x1 &= (uint64_t)0x0000FFFF0000FFFF;
 8001e5e:	fa1f fc8e 	uxth.w	ip, lr
 8001e62:	ea4f 421e 	mov.w	r2, lr, lsr #16
    x3 |= (x3 << 8);
 8001e66:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001e6a:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
    *q1 = x1 | (x3 << 8);
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	0209      	lsls	r1, r1, #8
    x1 |= (x1 << 8);
 8001e72:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8001e76:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    x1 &= (uint64_t)0x00FF00FF00FF00FF;
 8001e7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8001e7e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    *q1 = x1 | (x3 << 8);
 8001e82:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8001e86:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001e8a:	ea41 010c 	orr.w	r1, r1, ip
 8001e8e:	4313      	orrs	r3, r2
        br_aes_ct64_ortho(q);
 8001e90:	a802      	add	r0, sp, #8
    *q1 = x1 | (x3 << 8);
 8001e92:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
        q[5] = q[4];
 8001e96:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
        q[6] = q[4];
 8001e9a:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
        q[7] = q[4];
 8001e9e:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
        q[2] = q[0];
 8001ea2:	9406      	str	r4, [sp, #24]
        br_aes_ct64_ortho(q);
 8001ea4:	f7fe fe14 	bl	8000ad0 <br_aes_ct64_ortho>
            | (q[1] & (uint64_t)0x2222222222222222)
 8001ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
            (q[0] & (uint64_t)0x1111111111111111)
 8001eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
            | (q[1] & (uint64_t)0x2222222222222222)
 8001eb0:	f000 3022 	and.w	r0, r0, #572662306	@ 0x22222222
            (q[0] & (uint64_t)0x1111111111111111)
 8001eb4:	f002 3211 	and.w	r2, r2, #286331153	@ 0x11111111
            | (q[1] & (uint64_t)0x2222222222222222)
 8001eb8:	4302      	orrs	r2, r0
            | (q[2] & (uint64_t)0x4444444444444444)
 8001eba:	9806      	ldr	r0, [sp, #24]
            (q[0] & (uint64_t)0x1111111111111111)
 8001ebc:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
            | (q[1] & (uint64_t)0x2222222222222222)
 8001ec0:	f001 3c22 	and.w	ip, r1, #572662306	@ 0x22222222
            | (q[2] & (uint64_t)0x4444444444444444)
 8001ec4:	f000 3044 	and.w	r0, r0, #1145324612	@ 0x44444444
            | (q[1] & (uint64_t)0x2222222222222222)
 8001ec8:	ea43 010c 	orr.w	r1, r3, ip
            | (q[2] & (uint64_t)0x4444444444444444)
 8001ecc:	4302      	orrs	r2, r0
            | (q[3] & (uint64_t)0x8888888888888888);
 8001ece:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8001ed2:	f003 3388 	and.w	r3, r3, #2290649224	@ 0x88888888
 8001ed6:	f000 3c88 	and.w	ip, r0, #2290649224	@ 0x88888888
 8001eda:	431a      	orrs	r2, r3
            | (q[5] & (uint64_t)0x2222222222222222)
 8001edc:	980c      	ldr	r0, [sp, #48]	@ 0x30
            (q[4] & (uint64_t)0x1111111111111111)
 8001ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
        comp_skey[j + 0] =
 8001ee0:	603a      	str	r2, [r7, #0]
            | (q[5] & (uint64_t)0x2222222222222222)
 8001ee2:	f000 3022 	and.w	r0, r0, #572662306	@ 0x22222222
            (q[4] & (uint64_t)0x1111111111111111)
 8001ee6:	f003 3211 	and.w	r2, r3, #286331153	@ 0x11111111
            | (q[5] & (uint64_t)0x2222222222222222)
 8001eea:	4302      	orrs	r2, r0
            (q[4] & (uint64_t)0x1111111111111111)
 8001eec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
            | (q[5] & (uint64_t)0x2222222222222222)
 8001eee:	980d      	ldr	r0, [sp, #52]	@ 0x34
            (q[4] & (uint64_t)0x1111111111111111)
 8001ef0:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
            | (q[5] & (uint64_t)0x2222222222222222)
 8001ef4:	f000 3022 	and.w	r0, r0, #572662306	@ 0x22222222
 8001ef8:	4303      	orrs	r3, r0
            | (q[2] & (uint64_t)0x4444444444444444)
 8001efa:	9807      	ldr	r0, [sp, #28]
 8001efc:	f000 3044 	and.w	r0, r0, #1145324612	@ 0x44444444
 8001f00:	4301      	orrs	r1, r0
            | (q[3] & (uint64_t)0x8888888888888888);
 8001f02:	ea41 010c 	orr.w	r1, r1, ip
        comp_skey[j + 0] =
 8001f06:	6079      	str	r1, [r7, #4]
            | (q[6] & (uint64_t)0x4444444444444444)
 8001f08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8001f0c:	f000 3c44 	and.w	ip, r0, #1145324612	@ 0x44444444
 8001f10:	f001 3044 	and.w	r0, r1, #1145324612	@ 0x44444444
            | (q[7] & (uint64_t)0x8888888888888888);
 8001f14:	9910      	ldr	r1, [sp, #64]	@ 0x40
            | (q[6] & (uint64_t)0x4444444444444444)
 8001f16:	ea42 020c 	orr.w	r2, r2, ip
            | (q[7] & (uint64_t)0x8888888888888888);
 8001f1a:	f001 3188 	and.w	r1, r1, #2290649224	@ 0x88888888
 8001f1e:	430a      	orrs	r2, r1
        comp_skey[j + 1] =
 8001f20:	60ba      	str	r2, [r7, #8]
            | (q[7] & (uint64_t)0x8888888888888888);
 8001f22:	9a11      	ldr	r2, [sp, #68]	@ 0x44
    for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 8001f24:	3710      	adds	r7, #16
            | (q[6] & (uint64_t)0x4444444444444444)
 8001f26:	4303      	orrs	r3, r0
            | (q[7] & (uint64_t)0x8888888888888888);
 8001f28:	f002 3288 	and.w	r2, r2, #2290649224	@ 0x88888888
 8001f2c:	4313      	orrs	r3, r2
    for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 8001f2e:	42bd      	cmp	r5, r7
 8001f30:	f106 0610 	add.w	r6, r6, #16
        comp_skey[j + 1] =
 8001f34:	f847 3c04 	str.w	r3, [r7, #-4]
    for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 8001f38:	f47f af68 	bne.w	8001e0c <aes256_ecb_keyexp+0x80>
    for (u = 0, v = 0; u < n; u ++, v += 4) {
 8001f3c:	9c01      	ldr	r4, [sp, #4]
 8001f3e:	af10      	add	r7, sp, #64	@ 0x40
 8001f40:	f50d 7c98 	add.w	ip, sp, #304	@ 0x130
        x0 = x1 = x2 = x3 = comp_skey[u];
 8001f44:	f857 3f08 	ldr.w	r3, [r7, #8]!
 8001f48:	687a      	ldr	r2, [r7, #4]
        x0 &= (uint64_t)0x1111111111111111;
 8001f4a:	f003 3611 	and.w	r6, r3, #286331153	@ 0x11111111
 8001f4e:	f002 3a11 	and.w	sl, r2, #286331153	@ 0x11111111
        x1 >>= 1;
 8001f52:	0858      	lsrs	r0, r3, #1
 8001f54:	ea4f 0952 	mov.w	r9, r2, lsr #1
        skey[v + 0] = (x0 << 4) - x0;
 8001f58:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8001f5c:	ea4f 1e06 	mov.w	lr, r6, lsl #4
        x1 >>= 1;
 8001f60:	f000 3011 	and.w	r0, r0, #286331153	@ 0x11111111
        skey[v + 0] = (x0 << 4) - x0;
 8001f64:	ebbe 0e06 	subs.w	lr, lr, r6
        x1 >>= 1;
 8001f68:	f009 3911 	and.w	r9, r9, #286331153	@ 0x11111111
        skey[v + 0] = (x0 << 4) - x0;
 8001f6c:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001f70:	eb65 050a 	sbc.w	r5, r5, sl
        x2 >>= 2;
 8001f74:	0899      	lsrs	r1, r3, #2
 8001f76:	ea4f 0892 	mov.w	r8, r2, lsr #2
        skey[v + 1] = (x1 << 4) - x1;
 8001f7a:	ea4f 1a09 	mov.w	sl, r9, lsl #4
 8001f7e:	0106      	lsls	r6, r0, #4
        x2 >>= 2;
 8001f80:	f001 3111 	and.w	r1, r1, #286331153	@ 0x11111111
        skey[v + 1] = (x1 << 4) - x1;
 8001f84:	1a36      	subs	r6, r6, r0
        x2 >>= 2;
 8001f86:	f008 3811 	and.w	r8, r8, #286331153	@ 0x11111111
        skey[v + 1] = (x1 << 4) - x1;
 8001f8a:	ea4a 7a10 	orr.w	sl, sl, r0, lsr #28
 8001f8e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8001f92:	eb6a 0009 	sbc.w	r0, sl, r9
        x3 >>= 3;
 8001f96:	f002 3211 	and.w	r2, r2, #286331153	@ 0x11111111
        skey[v + 2] = (x2 << 4) - x2;
 8001f9a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8001f9e:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8001fa2:	ebb9 0901 	subs.w	r9, r9, r1
 8001fa6:	ea4a 7a11 	orr.w	sl, sl, r1, lsr #28
 8001faa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        skey[v + 3] = (x3 << 4) - x3;
 8001fae:	ea4f 1102 	mov.w	r1, r2, lsl #4
 8001fb2:	ea41 7113 	orr.w	r1, r1, r3, lsr #28
        x3 >>= 3;
 8001fb6:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
        skey[v + 2] = (x2 << 4) - x2;
 8001fba:	eb6a 0808 	sbc.w	r8, sl, r8
        skey[v + 3] = (x3 << 4) - x3;
 8001fbe:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 8001fc2:	ebba 0303 	subs.w	r3, sl, r3
 8001fc6:	eb61 0202 	sbc.w	r2, r1, r2
    for (u = 0, v = 0; u < n; u ++, v += 4) {
 8001fca:	45bc      	cmp	ip, r7
        skey[v + 0] = (x0 << 4) - x0;
 8001fcc:	e9c4 e500 	strd	lr, r5, [r4]
        skey[v + 1] = (x1 << 4) - x1;
 8001fd0:	e9c4 6002 	strd	r6, r0, [r4, #8]
        skey[v + 2] = (x2 << 4) - x2;
 8001fd4:	e9c4 9804 	strd	r9, r8, [r4, #16]
        skey[v + 3] = (x3 << 4) - x3;
 8001fd8:	e9c4 3206 	strd	r3, r2, [r4, #24]
    for (u = 0, v = 0; u < n; u ++, v += 4) {
 8001fdc:	f104 0420 	add.w	r4, r4, #32
 8001fe0:	d1b0      	bne.n	8001f44 <aes256_ecb_keyexp+0x1b8>
        exit(111);
    }

    br_aes_ct64_keysched(skey, key, 32);
    br_aes_ct64_skey_expand(r->sk_exp, skey, 14);
}
 8001fe2:	f50d 7d0b 	add.w	sp, sp, #556	@ 0x22c
 8001fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset(q, 0, sizeof q);
 8001fea:	4649      	mov	r1, r9
 8001fec:	2238      	movs	r2, #56	@ 0x38
 8001fee:	a814      	add	r0, sp, #80	@ 0x50
 8001ff0:	f00a fa42 	bl	800c478 <memset>
            tmp = (tmp << 24) | (tmp >> 8);
 8001ff4:	ea4f 2737 	mov.w	r7, r7, ror #8
    br_aes_ct64_ortho(q);
 8001ff8:	a812      	add	r0, sp, #72	@ 0x48
    q[0] = x;
 8001ffa:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8001ffe:	9712      	str	r7, [sp, #72]	@ 0x48
    br_aes_ct64_ortho(q);
 8002000:	f7fe fd66 	bl	8000ad0 <br_aes_ct64_ortho>
    br_aes_ct64_bitslice_Sbox(q);
 8002004:	f7fe fabc 	bl	8000580 <br_aes_ct64_bitslice_Sbox>
    br_aes_ct64_ortho(q);
 8002008:	a812      	add	r0, sp, #72	@ 0x48
 800200a:	f7fe fd61 	bl	8000ad0 <br_aes_ct64_ortho>
            tmp = sub_word(tmp) ^ Rcon[k];
 800200e:	f814 700a 	ldrb.w	r7, [r4, sl]
        tmp ^= skey[i - nk];
 8002012:	f8d8 1000 	ldr.w	r1, [r8]
    return (uint32_t)q[0];
 8002016:	9a12      	ldr	r2, [sp, #72]	@ 0x48
        tmp ^= skey[i - nk];
 8002018:	404f      	eors	r7, r1
 800201a:	4057      	eors	r7, r2
        if (++ j == nk) {
 800201c:	f04f 0901 	mov.w	r9, #1
 8002020:	e6ed      	b.n	8001dfe <aes256_ecb_keyexp+0x72>
    memset(q, 0, sizeof q);
 8002022:	2100      	movs	r1, #0
 8002024:	2238      	movs	r2, #56	@ 0x38
 8002026:	a814      	add	r0, sp, #80	@ 0x50
 8002028:	f00a fa26 	bl	800c478 <memset>
    q[0] = x;
 800202c:	2200      	movs	r2, #0
    br_aes_ct64_ortho(q);
 800202e:	a812      	add	r0, sp, #72	@ 0x48
    q[0] = x;
 8002030:	9213      	str	r2, [sp, #76]	@ 0x4c
 8002032:	9712      	str	r7, [sp, #72]	@ 0x48
    br_aes_ct64_ortho(q);
 8002034:	f7fe fd4c 	bl	8000ad0 <br_aes_ct64_ortho>
    br_aes_ct64_bitslice_Sbox(q);
 8002038:	f7fe faa2 	bl	8000580 <br_aes_ct64_bitslice_Sbox>
    br_aes_ct64_ortho(q);
 800203c:	a812      	add	r0, sp, #72	@ 0x48
 800203e:	f7fe fd47 	bl	8000ad0 <br_aes_ct64_ortho>
    return (uint32_t)q[0];
 8002042:	9f12      	ldr	r7, [sp, #72]	@ 0x48
        tmp ^= skey[i - nk];
 8002044:	f8d8 2000 	ldr.w	r2, [r8]
        if (++ j == nk) {
 8002048:	f04f 0905 	mov.w	r9, #5
        tmp ^= skey[i - nk];
 800204c:	4057      	eors	r7, r2
        if (++ j == nk) {
 800204e:	e6d6      	b.n	8001dfe <aes256_ecb_keyexp+0x72>
        exit(111);
 8002050:	206f      	movs	r0, #111	@ 0x6f
 8002052:	f009 ff25 	bl	800bea0 <exit>
 8002056:	bf00      	nop
 8002058:	0800ce58 	.word	0x0800ce58

0800205c <aes256_ecb>:

void aes192_ctr(unsigned char *out, size_t outlen, const unsigned char *iv, const aes192ctx *ctx) {
    aes_ctr(out, outlen, iv, ctx->sk_exp, 12);
}

void aes256_ecb(unsigned char *out, const unsigned char *in, size_t nblocks, const aes256ctx *ctx) {
 800205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    while (nblocks >= 4) {
 8002060:	2a03      	cmp	r2, #3
    aes_ecb(out, in, nblocks, ctx->sk_exp, 14);
 8002062:	f8d3 8000 	ldr.w	r8, [r3]
void aes256_ecb(unsigned char *out, const unsigned char *in, size_t nblocks, const aes256ctx *ctx) {
 8002066:	b0a0      	sub	sp, #128	@ 0x80
 8002068:	4617      	mov	r7, r2
 800206a:	4681      	mov	r9, r0
 800206c:	468a      	mov	sl, r1
    while (nblocks >= 4) {
 800206e:	d94c      	bls.n	800210a <aes256_ecb+0xae>
 8002070:	460c      	mov	r4, r1
 8002072:	4616      	mov	r6, r2
 8002074:	4605      	mov	r5, r0
           | ((uint32_t)src[3] << 24);
 8002076:	6863      	ldr	r3, [r4, #4]
        *v ++ = br_dec32le(src);
 8002078:	9301      	str	r3, [sp, #4]
           | ((uint32_t)src[3] << 24);
 800207a:	68a3      	ldr	r3, [r4, #8]
        *v ++ = br_dec32le(src);
 800207c:	9302      	str	r3, [sp, #8]
           | ((uint32_t)src[3] << 24);
 800207e:	68e3      	ldr	r3, [r4, #12]
        *v ++ = br_dec32le(src);
 8002080:	9303      	str	r3, [sp, #12]
           | ((uint32_t)src[3] << 24);
 8002082:	6923      	ldr	r3, [r4, #16]
        *v ++ = br_dec32le(src);
 8002084:	9304      	str	r3, [sp, #16]
           | ((uint32_t)src[3] << 24);
 8002086:	6963      	ldr	r3, [r4, #20]
        *v ++ = br_dec32le(src);
 8002088:	9305      	str	r3, [sp, #20]
           | ((uint32_t)src[3] << 24);
 800208a:	69a3      	ldr	r3, [r4, #24]
        *v ++ = br_dec32le(src);
 800208c:	9306      	str	r3, [sp, #24]
           | ((uint32_t)src[3] << 24);
 800208e:	69e3      	ldr	r3, [r4, #28]
        *v ++ = br_dec32le(src);
 8002090:	9307      	str	r3, [sp, #28]
           | ((uint32_t)src[3] << 24);
 8002092:	6a23      	ldr	r3, [r4, #32]
        *v ++ = br_dec32le(src);
 8002094:	9308      	str	r3, [sp, #32]
           | ((uint32_t)src[3] << 24);
 8002096:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        *v ++ = br_dec32le(src);
 8002098:	9309      	str	r3, [sp, #36]	@ 0x24
           | ((uint32_t)src[3] << 24);
 800209a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800209c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800209e:	f8d4 e030 	ldr.w	lr, [r4, #48]	@ 0x30
        *v ++ = br_dec32le(src);
 80020a2:	930a      	str	r3, [sp, #40]	@ 0x28
           | ((uint32_t)src[3] << 24);
 80020a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80020a6:	f8d4 c038 	ldr.w	ip, [r4, #56]	@ 0x38
        *v ++ = br_dec32le(src);
 80020aa:	930b      	str	r3, [sp, #44]	@ 0x2c
           | ((uint32_t)src[3] << 24);
 80020ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80020ae:	f854 2b40 	ldr.w	r2, [r4], #64
        *v ++ = br_dec32le(src);
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	e9cd e10c 	strd	lr, r1, [sp, #48]	@ 0x30
        aes_ecb4x(out, blocks, rkeys, nrounds);
 80020b8:	4628      	mov	r0, r5
        nblocks -= 4;
 80020ba:	3e04      	subs	r6, #4
        aes_ecb4x(out, blocks, rkeys, nrounds);
 80020bc:	4642      	mov	r2, r8
 80020be:	4669      	mov	r1, sp
        *v ++ = br_dec32le(src);
 80020c0:	e9cd c30e 	strd	ip, r3, [sp, #56]	@ 0x38
        aes_ecb4x(out, blocks, rkeys, nrounds);
 80020c4:	f7fe feb8 	bl	8000e38 <aes_ecb4x.constprop.0>
    while (nblocks >= 4) {
 80020c8:	2e03      	cmp	r6, #3
        out += 64;
 80020ca:	f105 0540 	add.w	r5, r5, #64	@ 0x40
    while (nblocks >= 4) {
 80020ce:	d8d2      	bhi.n	8002076 <aes256_ecb+0x1a>
 80020d0:	1f3b      	subs	r3, r7, #4
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3301      	adds	r3, #1
        nblocks -= 4;
 80020d6:	f007 0403 	and.w	r4, r7, #3
        in += 64;
 80020da:	eb0a 1a83 	add.w	sl, sl, r3, lsl #6
        out += 64;
 80020de:	eb09 1983 	add.w	r9, r9, r3, lsl #6
    if (nblocks) {
 80020e2:	b17c      	cbz	r4, 8002104 <aes256_ecb+0xa8>
        *v ++ = br_dec32le(src);
 80020e4:	0124      	lsls	r4, r4, #4
 80020e6:	4651      	mov	r1, sl
 80020e8:	4622      	mov	r2, r4
 80020ea:	4668      	mov	r0, sp
 80020ec:	f00a fa4f 	bl	800c58e <memcpy>
        aes_ecb4x(t, blocks, rkeys, nrounds);
 80020f0:	4642      	mov	r2, r8
 80020f2:	4669      	mov	r1, sp
 80020f4:	a810      	add	r0, sp, #64	@ 0x40
 80020f6:	f7fe fe9f 	bl	8000e38 <aes_ecb4x.constprop.0>
        memcpy(out, t, nblocks * 16);
 80020fa:	4622      	mov	r2, r4
 80020fc:	a910      	add	r1, sp, #64	@ 0x40
 80020fe:	4648      	mov	r0, r9
 8002100:	f00a fa45 	bl	800c58e <memcpy>
}
 8002104:	b020      	add	sp, #128	@ 0x80
 8002106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (nblocks >= 4) {
 800210a:	4614      	mov	r4, r2
 800210c:	e7e9      	b.n	80020e2 <aes256_ecb+0x86>
 800210e:	bf00      	nop

08002110 <aes256_ctx_release>:
void aes192_ctx_release(aes192ctx *r) {
    free(r->sk_exp);
}

void aes256_ctx_release(aes256ctx *r) {
    free(r->sk_exp);
 8002110:	6800      	ldr	r0, [r0, #0]
 8002112:	f009 bedf 	b.w	800bed4 <free>
 8002116:	bf00      	nop

08002118 <invertingOnATF>:
#undef _MOD_RED_


/* this one assume every entry is already vectorized: including atf in entry */
void
invertingOnATF(uint32_t *atf_out, const uint32_t *atf_in, const uint32_t *columns){
 8002118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	f5ad 3da0 	sub.w	sp, sp, #81920	@ 0x14000
 8002120:	b0a3      	sub	sp, #140	@ 0x8c
 8002122:	f50d 5737 	add.w	r7, sp, #11712	@ 0x2dc0
 8002126:	900a      	str	r0, [sp, #40]	@ 0x28
  int index=0;
 8002128:	2000      	movs	r0, #0
invertingOnATF(uint32_t *atf_out, const uint32_t *atf_in, const uint32_t *columns){
 800212a:	468b      	mov	fp, r1
 800212c:	4614      	mov	r4, r2
 800212e:	3728      	adds	r7, #40	@ 0x28
  for(i=0; i<N-2; i++)
 8002130:	4606      	mov	r6, r0
    for(j=i+1; j<N-1; j++)
 8002132:	3601      	adds	r6, #1
 8002134:	f1c6 010c 	rsb	r1, r6, #12
 8002138:	f1c6 0e0b 	rsb	lr, r6, #11
 800213c:	463b      	mov	r3, r7
 800213e:	46b4      	mov	ip, r6
 8002140:	46b8      	mov	r8, r7
 8002142:	46a2      	mov	sl, r4
 8002144:	e128      	b.n	8002398 <invertingOnATF+0x280>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 8002146:	e9d2 670a 	ldrd	r6, r7, [r2, #40]	@ 0x28
 800214a:	6a14      	ldr	r4, [r2, #32]
 800214c:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
 8002150:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 8002152:	f8c3 720c 	str.w	r7, [r3, #524]	@ 0x20c
 8002156:	e9c3 4681 	strd	r4, r6, [r3, #516]	@ 0x204
 800215a:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800215c:	f8c3 4210 	str.w	r4, [r3, #528]	@ 0x210
 8002160:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8002162:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
 8002166:	6b94      	ldr	r4, [r2, #56]	@ 0x38
 8002168:	f8c3 4218 	str.w	r4, [r3, #536]	@ 0x218
 800216c:	2902      	cmp	r1, #2
 800216e:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8002170:	f8c3 421c 	str.w	r4, [r3, #540]	@ 0x21c
      for(k=j+1; k<N; k++){
 8002174:	f000 8108 	beq.w	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 8002178:	e9d2 5612 	ldrd	r5, r6, [r2, #72]	@ 0x48
 800217c:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 800217e:	f8c3 4220 	str.w	r4, [r3, #544]	@ 0x220
 8002182:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002184:	f8c3 622c 	str.w	r6, [r3, #556]	@ 0x22c
 8002188:	e9c3 4589 	strd	r4, r5, [r3, #548]	@ 0x224
 800218c:	6d14      	ldr	r4, [r2, #80]	@ 0x50
 800218e:	f8c3 4230 	str.w	r4, [r3, #560]	@ 0x230
 8002192:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8002194:	f8c3 4234 	str.w	r4, [r3, #564]	@ 0x234
 8002198:	6d94      	ldr	r4, [r2, #88]	@ 0x58
 800219a:	f8c3 4238 	str.w	r4, [r3, #568]	@ 0x238
 800219e:	2903      	cmp	r1, #3
 80021a0:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
 80021a2:	f8c3 423c 	str.w	r4, [r3, #572]	@ 0x23c
      for(k=j+1; k<N; k++){
 80021a6:	f000 80ef 	beq.w	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 80021aa:	e9d2 561a 	ldrd	r5, r6, [r2, #104]	@ 0x68
 80021ae:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 80021b0:	f8c3 4240 	str.w	r4, [r3, #576]	@ 0x240
 80021b4:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80021b6:	f8c3 624c 	str.w	r6, [r3, #588]	@ 0x24c
 80021ba:	e9c3 4591 	strd	r4, r5, [r3, #580]	@ 0x244
 80021be:	6f14      	ldr	r4, [r2, #112]	@ 0x70
 80021c0:	f8c3 4250 	str.w	r4, [r3, #592]	@ 0x250
 80021c4:	6f54      	ldr	r4, [r2, #116]	@ 0x74
 80021c6:	f8c3 4254 	str.w	r4, [r3, #596]	@ 0x254
 80021ca:	6f94      	ldr	r4, [r2, #120]	@ 0x78
 80021cc:	f8c3 4258 	str.w	r4, [r3, #600]	@ 0x258
 80021d0:	2904      	cmp	r1, #4
 80021d2:	6fd4      	ldr	r4, [r2, #124]	@ 0x7c
 80021d4:	f8c3 425c 	str.w	r4, [r3, #604]	@ 0x25c
      for(k=j+1; k<N; k++){
 80021d8:	f000 80d6 	beq.w	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 80021dc:	e9d2 5622 	ldrd	r5, r6, [r2, #136]	@ 0x88
 80021e0:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
 80021e4:	f8c3 4260 	str.w	r4, [r3, #608]	@ 0x260
 80021e8:	f8d2 4084 	ldr.w	r4, [r2, #132]	@ 0x84
 80021ec:	f8c3 626c 	str.w	r6, [r3, #620]	@ 0x26c
 80021f0:	e9c3 4599 	strd	r4, r5, [r3, #612]	@ 0x264
 80021f4:	f8d2 4090 	ldr.w	r4, [r2, #144]	@ 0x90
 80021f8:	f8c3 4270 	str.w	r4, [r3, #624]	@ 0x270
 80021fc:	f8d2 4094 	ldr.w	r4, [r2, #148]	@ 0x94
 8002200:	f8c3 4274 	str.w	r4, [r3, #628]	@ 0x274
 8002204:	f8d2 4098 	ldr.w	r4, [r2, #152]	@ 0x98
 8002208:	f8c3 4278 	str.w	r4, [r3, #632]	@ 0x278
 800220c:	2905      	cmp	r1, #5
 800220e:	f8d2 409c 	ldr.w	r4, [r2, #156]	@ 0x9c
 8002212:	f8c3 427c 	str.w	r4, [r3, #636]	@ 0x27c
      for(k=j+1; k<N; k++){
 8002216:	f000 80b7 	beq.w	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 800221a:	e9d2 562a 	ldrd	r5, r6, [r2, #168]	@ 0xa8
 800221e:	f8d2 40a0 	ldr.w	r4, [r2, #160]	@ 0xa0
 8002222:	f8c3 4280 	str.w	r4, [r3, #640]	@ 0x280
 8002226:	f8d2 40a4 	ldr.w	r4, [r2, #164]	@ 0xa4
 800222a:	f8c3 628c 	str.w	r6, [r3, #652]	@ 0x28c
 800222e:	e9c3 45a1 	strd	r4, r5, [r3, #644]	@ 0x284
 8002232:	f8d2 40b0 	ldr.w	r4, [r2, #176]	@ 0xb0
 8002236:	f8c3 4290 	str.w	r4, [r3, #656]	@ 0x290
 800223a:	f8d2 40b4 	ldr.w	r4, [r2, #180]	@ 0xb4
 800223e:	f8c3 4294 	str.w	r4, [r3, #660]	@ 0x294
 8002242:	f8d2 40b8 	ldr.w	r4, [r2, #184]	@ 0xb8
 8002246:	f8c3 4298 	str.w	r4, [r3, #664]	@ 0x298
 800224a:	2906      	cmp	r1, #6
 800224c:	f8d2 40bc 	ldr.w	r4, [r2, #188]	@ 0xbc
 8002250:	f8c3 429c 	str.w	r4, [r3, #668]	@ 0x29c
      for(k=j+1; k<N; k++){
 8002254:	f000 8098 	beq.w	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 8002258:	e9d2 5632 	ldrd	r5, r6, [r2, #200]	@ 0xc8
 800225c:	f8d2 40c0 	ldr.w	r4, [r2, #192]	@ 0xc0
 8002260:	f8c3 42a0 	str.w	r4, [r3, #672]	@ 0x2a0
 8002264:	f8d2 40c4 	ldr.w	r4, [r2, #196]	@ 0xc4
 8002268:	f8c3 62ac 	str.w	r6, [r3, #684]	@ 0x2ac
 800226c:	e9c3 45a9 	strd	r4, r5, [r3, #676]	@ 0x2a4
 8002270:	f8d2 40d0 	ldr.w	r4, [r2, #208]	@ 0xd0
 8002274:	f8c3 42b0 	str.w	r4, [r3, #688]	@ 0x2b0
 8002278:	f8d2 40d4 	ldr.w	r4, [r2, #212]	@ 0xd4
 800227c:	f8c3 42b4 	str.w	r4, [r3, #692]	@ 0x2b4
 8002280:	f8d2 40d8 	ldr.w	r4, [r2, #216]	@ 0xd8
 8002284:	f8c3 42b8 	str.w	r4, [r3, #696]	@ 0x2b8
 8002288:	2907      	cmp	r1, #7
 800228a:	f8d2 40dc 	ldr.w	r4, [r2, #220]	@ 0xdc
 800228e:	f8c3 42bc 	str.w	r4, [r3, #700]	@ 0x2bc
      for(k=j+1; k<N; k++){
 8002292:	d079      	beq.n	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 8002294:	e9d2 563a 	ldrd	r5, r6, [r2, #232]	@ 0xe8
 8002298:	f8d2 40e0 	ldr.w	r4, [r2, #224]	@ 0xe0
 800229c:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
 80022a0:	f8d2 40e4 	ldr.w	r4, [r2, #228]	@ 0xe4
 80022a4:	f8c3 62cc 	str.w	r6, [r3, #716]	@ 0x2cc
 80022a8:	e9c3 45b1 	strd	r4, r5, [r3, #708]	@ 0x2c4
 80022ac:	f8d2 40f0 	ldr.w	r4, [r2, #240]	@ 0xf0
 80022b0:	f8c3 42d0 	str.w	r4, [r3, #720]	@ 0x2d0
 80022b4:	f8d2 40f4 	ldr.w	r4, [r2, #244]	@ 0xf4
 80022b8:	f8c3 42d4 	str.w	r4, [r3, #724]	@ 0x2d4
 80022bc:	f8d2 40f8 	ldr.w	r4, [r2, #248]	@ 0xf8
 80022c0:	f8c3 42d8 	str.w	r4, [r3, #728]	@ 0x2d8
 80022c4:	2908      	cmp	r1, #8
 80022c6:	f8d2 40fc 	ldr.w	r4, [r2, #252]	@ 0xfc
 80022ca:	f8c3 42dc 	str.w	r4, [r3, #732]	@ 0x2dc
      for(k=j+1; k<N; k++){
 80022ce:	d05b      	beq.n	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 80022d0:	e9d2 5642 	ldrd	r5, r6, [r2, #264]	@ 0x108
 80022d4:	f8d2 4100 	ldr.w	r4, [r2, #256]	@ 0x100
 80022d8:	f8c3 42e0 	str.w	r4, [r3, #736]	@ 0x2e0
 80022dc:	f8d2 4104 	ldr.w	r4, [r2, #260]	@ 0x104
 80022e0:	f8c3 62ec 	str.w	r6, [r3, #748]	@ 0x2ec
 80022e4:	e9c3 45b9 	strd	r4, r5, [r3, #740]	@ 0x2e4
 80022e8:	f8d2 4110 	ldr.w	r4, [r2, #272]	@ 0x110
 80022ec:	f8c3 42f0 	str.w	r4, [r3, #752]	@ 0x2f0
 80022f0:	f8d2 4114 	ldr.w	r4, [r2, #276]	@ 0x114
 80022f4:	f8c3 42f4 	str.w	r4, [r3, #756]	@ 0x2f4
 80022f8:	f8d2 4118 	ldr.w	r4, [r2, #280]	@ 0x118
 80022fc:	f8c3 42f8 	str.w	r4, [r3, #760]	@ 0x2f8
 8002300:	2909      	cmp	r1, #9
 8002302:	f8d2 411c 	ldr.w	r4, [r2, #284]	@ 0x11c
 8002306:	f8c3 42fc 	str.w	r4, [r3, #764]	@ 0x2fc
      for(k=j+1; k<N; k++){
 800230a:	d03d      	beq.n	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 800230c:	e9d2 564a 	ldrd	r5, r6, [r2, #296]	@ 0x128
 8002310:	f8d2 4120 	ldr.w	r4, [r2, #288]	@ 0x120
 8002314:	f8c3 4300 	str.w	r4, [r3, #768]	@ 0x300
 8002318:	f8d2 4124 	ldr.w	r4, [r2, #292]	@ 0x124
 800231c:	f8c3 630c 	str.w	r6, [r3, #780]	@ 0x30c
 8002320:	e9c3 45c1 	strd	r4, r5, [r3, #772]	@ 0x304
 8002324:	f8d2 4130 	ldr.w	r4, [r2, #304]	@ 0x130
 8002328:	f8c3 4310 	str.w	r4, [r3, #784]	@ 0x310
 800232c:	f8d2 4134 	ldr.w	r4, [r2, #308]	@ 0x134
 8002330:	f8c3 4314 	str.w	r4, [r3, #788]	@ 0x314
 8002334:	f8d2 4138 	ldr.w	r4, [r2, #312]	@ 0x138
 8002338:	f8c3 4318 	str.w	r4, [r3, #792]	@ 0x318
 800233c:	290b      	cmp	r1, #11
 800233e:	f8d2 413c 	ldr.w	r4, [r2, #316]	@ 0x13c
 8002342:	f8c3 431c 	str.w	r4, [r3, #796]	@ 0x31c
      for(k=j+1; k<N; k++){
 8002346:	d11f      	bne.n	8002388 <invertingOnATF+0x270>
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 8002348:	f8d2 514c 	ldr.w	r5, [r2, #332]	@ 0x14c
 800234c:	f8d2 4148 	ldr.w	r4, [r2, #328]	@ 0x148
 8002350:	9502      	str	r5, [sp, #8]
 8002352:	f8d2 5158 	ldr.w	r5, [r2, #344]	@ 0x158
 8002356:	f8d2 6140 	ldr.w	r6, [r2, #320]	@ 0x140
 800235a:	9401      	str	r4, [sp, #4]
 800235c:	9503      	str	r5, [sp, #12]
 800235e:	e9d2 4754 	ldrd	r4, r7, [r2, #336]	@ 0x150
 8002362:	f8d2 515c 	ldr.w	r5, [r2, #348]	@ 0x15c
 8002366:	f8d2 2144 	ldr.w	r2, [r2, #324]	@ 0x144
 800236a:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
 800236e:	9a01      	ldr	r2, [sp, #4]
 8002370:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328
 8002374:	9a02      	ldr	r2, [sp, #8]
 8002376:	f8c3 6320 	str.w	r6, [r3, #800]	@ 0x320
 800237a:	e9c3 24cb 	strd	r2, r4, [r3, #812]	@ 0x32c
 800237e:	9a03      	ldr	r2, [sp, #12]
 8002380:	f8c3 7334 	str.w	r7, [r3, #820]	@ 0x334
 8002384:	e9c3 25ce 	strd	r2, r5, [r3, #824]	@ 0x338
      for(k=j+1; k<N; k++){
 8002388:	3008      	adds	r0, #8
	      index+=vec_size;
 800238a:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
    for(j=i+1; j<N-1; j++)
 800238e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8002392:	3901      	subs	r1, #1
 8002394:	f10e 3eff 	add.w	lr, lr, #4294967295
      for(k=j+1; k<N; k++){
 8002398:	eb0b 0280 	add.w	r2, fp, r0, lsl #2
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 800239c:	2901      	cmp	r1, #1
 800239e:	6894      	ldr	r4, [r2, #8]
 80023a0:	f8c3 41e8 	str.w	r4, [r3, #488]	@ 0x1e8
 80023a4:	68d4      	ldr	r4, [r2, #12]
 80023a6:	f8c3 41ec 	str.w	r4, [r3, #492]	@ 0x1ec
 80023aa:	6914      	ldr	r4, [r2, #16]
 80023ac:	f8c3 41f0 	str.w	r4, [r3, #496]	@ 0x1f0
 80023b0:	6954      	ldr	r4, [r2, #20]
 80023b2:	f8c3 41f4 	str.w	r4, [r3, #500]	@ 0x1f4
 80023b6:	6994      	ldr	r4, [r2, #24]
 80023b8:	f8c3 41f8 	str.w	r4, [r3, #504]	@ 0x1f8
 80023bc:	69d4      	ldr	r4, [r2, #28]
 80023be:	f8c3 41fc 	str.w	r4, [r3, #508]	@ 0x1fc
 80023c2:	f85b 4020 	ldr.w	r4, [fp, r0, lsl #2]
 80023c6:	f8c3 41e0 	str.w	r4, [r3, #480]	@ 0x1e0
 80023ca:	6854      	ldr	r4, [r2, #4]
 80023cc:	f8c3 41e4 	str.w	r4, [r3, #484]	@ 0x1e4
 80023d0:	f47f aeb9 	bne.w	8002146 <invertingOnATF+0x2e>
 80023d4:	4666      	mov	r6, ip
  for(i=0; i<N-2; i++)
 80023d6:	2e0b      	cmp	r6, #11
 80023d8:	4654      	mov	r4, sl
 80023da:	f100 0008 	add.w	r0, r0, #8
 80023de:	f508 57b7 	add.w	r7, r8, #5856	@ 0x16e0
 80023e2:	f47f aea6 	bne.w	8002132 <invertingOnATF+0x1a>
  /* make copies of the same ATF */
  decompressATFS_32_to_32_vecpacks(atf, atf_in, NB32_VEC_C);

  for(i=0;i<N;i++)
    for (r = 0; r < NB32_VEC_C; r++)
      diagonal[i*NB32_VEC_C + r]=columns[i*(N+1)*NB32_VEC_C + r];
 80023e6:	e9da 6500 	ldrd	r6, r5, [sl]
 80023ea:	951b      	str	r5, [sp, #108]	@ 0x6c
 80023ec:	f8da 51cc 	ldr.w	r5, [sl, #460]	@ 0x1cc
 80023f0:	9525      	str	r5, [sp, #148]	@ 0x94
 80023f2:	f8da 51d0 	ldr.w	r5, [sl, #464]	@ 0x1d0
 80023f6:	9526      	str	r5, [sp, #152]	@ 0x98
 80023f8:	f8da 51d4 	ldr.w	r5, [sl, #468]	@ 0x1d4
 80023fc:	9527      	str	r5, [sp, #156]	@ 0x9c
 80023fe:	f8da 51d8 	ldr.w	r5, [sl, #472]	@ 0x1d8
 8002402:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002406:	961a      	str	r6, [sp, #104]	@ 0x68
 8002408:	9528      	str	r5, [sp, #160]	@ 0xa0
 800240a:	f8da 61c8 	ldr.w	r6, [sl, #456]	@ 0x1c8
 800240e:	f8da 51dc 	ldr.w	r5, [sl, #476]	@ 0x1dc
 8002412:	931c      	str	r3, [sp, #112]	@ 0x70
 8002414:	e9da 0103 	ldrd	r0, r1, [sl, #12]
 8002418:	e9da 2305 	ldrd	r2, r3, [sl, #20]
 800241c:	9624      	str	r6, [sp, #144]	@ 0x90
 800241e:	9529      	str	r5, [sp, #164]	@ 0xa4
 8002420:	e9da 5670 	ldrd	r5, r6, [sl, #448]	@ 0x1c0
 8002424:	f8da 701c 	ldr.w	r7, [sl, #28]
 8002428:	9623      	str	r6, [sp, #140]	@ 0x8c
 800242a:	e9cd 011d 	strd	r0, r1, [sp, #116]	@ 0x74
 800242e:	e9cd 7521 	strd	r7, r5, [sp, #132]	@ 0x84
 8002432:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8002436:	f8da 3388 	ldr.w	r3, [sl, #904]	@ 0x388
 800243a:	f8da 0558 	ldr.w	r0, [sl, #1368]	@ 0x558
 800243e:	9038      	str	r0, [sp, #224]	@ 0xe0
 8002440:	f8da 0390 	ldr.w	r0, [sl, #912]	@ 0x390
 8002444:	f8da 538c 	ldr.w	r5, [sl, #908]	@ 0x38c
 8002448:	902e      	str	r0, [sp, #184]	@ 0xb8
 800244a:	f8da 0394 	ldr.w	r0, [sl, #916]	@ 0x394
 800244e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8002450:	952d      	str	r5, [sp, #180]	@ 0xb4
 8002452:	f8da 3548 	ldr.w	r3, [sl, #1352]	@ 0x548
 8002456:	902f      	str	r0, [sp, #188]	@ 0xbc
 8002458:	e9da 65e0 	ldrd	r6, r5, [sl, #896]	@ 0x380
 800245c:	f8da 0398 	ldr.w	r0, [sl, #920]	@ 0x398
 8002460:	9334      	str	r3, [sp, #208]	@ 0xd0
 8002462:	9030      	str	r0, [sp, #192]	@ 0xc0
 8002464:	f8da 354c 	ldr.w	r3, [sl, #1356]	@ 0x54c
 8002468:	f8da 039c 	ldr.w	r0, [sl, #924]	@ 0x39c
 800246c:	9335      	str	r3, [sp, #212]	@ 0xd4
 800246e:	9031      	str	r0, [sp, #196]	@ 0xc4
 8002470:	f8da 3554 	ldr.w	r3, [sl, #1364]	@ 0x554
 8002474:	f8da 0540 	ldr.w	r0, [sl, #1344]	@ 0x540
 8002478:	9337      	str	r3, [sp, #220]	@ 0xdc
 800247a:	962a      	str	r6, [sp, #168]	@ 0xa8
 800247c:	f8da 355c 	ldr.w	r3, [sl, #1372]	@ 0x55c
 8002480:	f8da 6550 	ldr.w	r6, [sl, #1360]	@ 0x550
 8002484:	9032      	str	r0, [sp, #200]	@ 0xc8
 8002486:	f8da 0544 	ldr.w	r0, [sl, #1348]	@ 0x544
 800248a:	9636      	str	r6, [sp, #216]	@ 0xd8
 800248c:	952b      	str	r5, [sp, #172]	@ 0xac
 800248e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8002490:	9033      	str	r0, [sp, #204]	@ 0xcc
 8002492:	f8da 0708 	ldr.w	r0, [sl, #1800]	@ 0x708
 8002496:	f8da 28d4 	ldr.w	r2, [sl, #2260]	@ 0x8d4
 800249a:	9247      	str	r2, [sp, #284]	@ 0x11c
 800249c:	f8da 28d8 	ldr.w	r2, [sl, #2264]	@ 0x8d8
 80024a0:	9248      	str	r2, [sp, #288]	@ 0x120
 80024a2:	f8da 28dc 	ldr.w	r2, [sl, #2268]	@ 0x8dc
 80024a6:	9249      	str	r2, [sp, #292]	@ 0x124
 80024a8:	f8da 2710 	ldr.w	r2, [sl, #1808]	@ 0x710
 80024ac:	f8da 1714 	ldr.w	r1, [sl, #1812]	@ 0x714
 80024b0:	923e      	str	r2, [sp, #248]	@ 0xf8
 80024b2:	f8da 2700 	ldr.w	r2, [sl, #1792]	@ 0x700
 80024b6:	913f      	str	r1, [sp, #252]	@ 0xfc
 80024b8:	923a      	str	r2, [sp, #232]	@ 0xe8
 80024ba:	f8da 1718 	ldr.w	r1, [sl, #1816]	@ 0x718
 80024be:	f8da 2704 	ldr.w	r2, [sl, #1796]	@ 0x704
 80024c2:	9140      	str	r1, [sp, #256]	@ 0x100
 80024c4:	923b      	str	r2, [sp, #236]	@ 0xec
 80024c6:	f8da 171c 	ldr.w	r1, [sl, #1820]	@ 0x71c
 80024ca:	f8da 28d0 	ldr.w	r2, [sl, #2256]	@ 0x8d0
 80024ce:	9141      	str	r1, [sp, #260]	@ 0x104
 80024d0:	9246      	str	r2, [sp, #280]	@ 0x118
 80024d2:	f8da 18c8 	ldr.w	r1, [sl, #2248]	@ 0x8c8
 80024d6:	f8da 28c0 	ldr.w	r2, [sl, #2240]	@ 0x8c0
 80024da:	903c      	str	r0, [sp, #240]	@ 0xf0
 80024dc:	9144      	str	r1, [sp, #272]	@ 0x110
 80024de:	f8da 070c 	ldr.w	r0, [sl, #1804]	@ 0x70c
 80024e2:	f8da 18cc 	ldr.w	r1, [sl, #2252]	@ 0x8cc
 80024e6:	9242      	str	r2, [sp, #264]	@ 0x108
 80024e8:	f8da 28c4 	ldr.w	r2, [sl, #2244]	@ 0x8c4
 80024ec:	903d      	str	r0, [sp, #244]	@ 0xf4
 80024ee:	9145      	str	r1, [sp, #276]	@ 0x114
 80024f0:	9243      	str	r2, [sp, #268]	@ 0x10c
 80024f2:	f8da 2a88 	ldr.w	r2, [sl, #2696]	@ 0xa88
 80024f6:	f8da 3c54 	ldr.w	r3, [sl, #3156]	@ 0xc54
 80024fa:	9357      	str	r3, [sp, #348]	@ 0x15c
 80024fc:	f8da 3c58 	ldr.w	r3, [sl, #3160]	@ 0xc58
 8002500:	9358      	str	r3, [sp, #352]	@ 0x160
 8002502:	f8da 3c5c 	ldr.w	r3, [sl, #3164]	@ 0xc5c
 8002506:	9359      	str	r3, [sp, #356]	@ 0x164
 8002508:	f8da 3a90 	ldr.w	r3, [sl, #2704]	@ 0xa90
 800250c:	f8da 6a94 	ldr.w	r6, [sl, #2708]	@ 0xa94
 8002510:	934e      	str	r3, [sp, #312]	@ 0x138
 8002512:	f8da 3a80 	ldr.w	r3, [sl, #2688]	@ 0xa80
 8002516:	964f      	str	r6, [sp, #316]	@ 0x13c
 8002518:	934a      	str	r3, [sp, #296]	@ 0x128
 800251a:	f8da 6a98 	ldr.w	r6, [sl, #2712]	@ 0xa98
 800251e:	f8da 3a84 	ldr.w	r3, [sl, #2692]	@ 0xa84
 8002522:	9650      	str	r6, [sp, #320]	@ 0x140
 8002524:	f241 3850 	movw	r8, #4944	@ 0x1350
 8002528:	f8da 6a9c 	ldr.w	r6, [sl, #2716]	@ 0xa9c
 800252c:	934b      	str	r3, [sp, #300]	@ 0x12c
 800252e:	f8da 3c50 	ldr.w	r3, [sl, #3152]	@ 0xc50
 8002532:	924c      	str	r2, [sp, #304]	@ 0x130
 8002534:	9651      	str	r6, [sp, #324]	@ 0x144
 8002536:	eb0a 0208 	add.w	r2, sl, r8
 800253a:	f8da 6c48 	ldr.w	r6, [sl, #3144]	@ 0xc48
 800253e:	9356      	str	r3, [sp, #344]	@ 0x158
 8002540:	f8da 3c40 	ldr.w	r3, [sl, #3136]	@ 0xc40
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	9654      	str	r6, [sp, #336]	@ 0x150
 8002548:	f8da 2a8c 	ldr.w	r2, [sl, #2700]	@ 0xa8c
 800254c:	f8da 6c4c 	ldr.w	r6, [sl, #3148]	@ 0xc4c
 8002550:	9352      	str	r3, [sp, #328]	@ 0x148
 8002552:	f8da 3c44 	ldr.w	r3, [sl, #3140]	@ 0xc44
 8002556:	924d      	str	r2, [sp, #308]	@ 0x134
 8002558:	9655      	str	r6, [sp, #340]	@ 0x154
 800255a:	9353      	str	r3, [sp, #332]	@ 0x14c
 800255c:	f8da 0fd4 	ldr.w	r0, [sl, #4052]	@ 0xfd4
 8002560:	9067      	str	r0, [sp, #412]	@ 0x19c
 8002562:	f8da 0fd8 	ldr.w	r0, [sl, #4056]	@ 0xfd8
 8002566:	9068      	str	r0, [sp, #416]	@ 0x1a0
 8002568:	f8da 0fdc 	ldr.w	r0, [sl, #4060]	@ 0xfdc
 800256c:	9069      	str	r0, [sp, #420]	@ 0x1a4
 800256e:	f8da 0e10 	ldr.w	r0, [sl, #3600]	@ 0xe10
 8002572:	f8da 5e14 	ldr.w	r5, [sl, #3604]	@ 0xe14
 8002576:	905e      	str	r0, [sp, #376]	@ 0x178
 8002578:	f8da 0e00 	ldr.w	r0, [sl, #3584]	@ 0xe00
 800257c:	955f      	str	r5, [sp, #380]	@ 0x17c
 800257e:	905a      	str	r0, [sp, #360]	@ 0x168
 8002580:	f8da 5e18 	ldr.w	r5, [sl, #3608]	@ 0xe18
 8002584:	f8da 0e04 	ldr.w	r0, [sl, #3588]	@ 0xe04
 8002588:	9560      	str	r5, [sp, #384]	@ 0x180
 800258a:	f241 1990 	movw	r9, #4496	@ 0x1190
 800258e:	f8da 5e1c 	ldr.w	r5, [sl, #3612]	@ 0xe1c
 8002592:	905b      	str	r0, [sp, #364]	@ 0x16c
 8002594:	f8da 0fd0 	ldr.w	r0, [sl, #4048]	@ 0xfd0
 8002598:	9561      	str	r5, [sp, #388]	@ 0x184
 800259a:	eb0a 0109 	add.w	r1, sl, r9
 800259e:	f8da 5fc8 	ldr.w	r5, [sl, #4040]	@ 0xfc8
 80025a2:	9066      	str	r0, [sp, #408]	@ 0x198
 80025a4:	f8da 0fc0 	ldr.w	r0, [sl, #4032]	@ 0xfc0
 80025a8:	f8da 3e08 	ldr.w	r3, [sl, #3592]	@ 0xe08
 80025ac:	f8da 2e0c 	ldr.w	r2, [sl, #3596]	@ 0xe0c
 80025b0:	9564      	str	r5, [sp, #400]	@ 0x190
 80025b2:	9062      	str	r0, [sp, #392]	@ 0x188
 80025b4:	f8da 5fcc 	ldr.w	r5, [sl, #4044]	@ 0xfcc
 80025b8:	f8da 0fc4 	ldr.w	r0, [sl, #4036]	@ 0xfc4
 80025bc:	935c      	str	r3, [sp, #368]	@ 0x170
 80025be:	925d      	str	r2, [sp, #372]	@ 0x174
 80025c0:	9565      	str	r5, [sp, #404]	@ 0x194
 80025c2:	9063      	str	r0, [sp, #396]	@ 0x18c
 80025c4:	f851 0c08 	ldr.w	r0, [r1, #-8]
 80025c8:	906c      	str	r0, [sp, #432]	@ 0x1b0
 80025ca:	f85a 0009 	ldr.w	r0, [sl, r9]
 80025ce:	906e      	str	r0, [sp, #440]	@ 0x1b8
 80025d0:	f50a 5e8d 	add.w	lr, sl, #4512	@ 0x11a0
 80025d4:	f85a 0008 	ldr.w	r0, [sl, r8]
 80025d8:	9076      	str	r0, [sp, #472]	@ 0x1d8
 80025da:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80025de:	6849      	ldr	r1, [r1, #4]
 80025e0:	916f      	str	r1, [sp, #444]	@ 0x1bc
 80025e2:	f50a 5c8c 	add.w	ip, sl, #4480	@ 0x1180
 80025e6:	f85e 1c08 	ldr.w	r1, [lr, #-8]
 80025ea:	9170      	str	r1, [sp, #448]	@ 0x1c0
 80025ec:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 80025f0:	9a01      	ldr	r2, [sp, #4]
 80025f2:	9171      	str	r1, [sp, #452]	@ 0x1c4
 80025f4:	f8dc 1000 	ldr.w	r1, [ip]
 80025f8:	916a      	str	r1, [sp, #424]	@ 0x1a8
 80025fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80025fe:	916b      	str	r1, [sp, #428]	@ 0x1ac
 8002600:	f50a 579b 	add.w	r7, sl, #4960	@ 0x1360
 8002604:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8002608:	9174      	str	r1, [sp, #464]	@ 0x1d0
 800260a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800260e:	6852      	ldr	r2, [r2, #4]
 8002610:	9277      	str	r2, [sp, #476]	@ 0x1dc
 8002612:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8002616:	9278      	str	r2, [sp, #480]	@ 0x1e0
 8002618:	f50a 569a 	add.w	r6, sl, #4928	@ 0x1340
 800261c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8002620:	9175      	str	r1, [sp, #468]	@ 0x1d4
 8002622:	9279      	str	r2, [sp, #484]	@ 0x1e4
 8002624:	e9d6 1200 	ldrd	r1, r2, [r6]
 8002628:	f50a 5380 	add.w	r3, sl, #4096	@ 0x1000
 800262c:	906d      	str	r0, [sp, #436]	@ 0x1b4
 800262e:	e9cd 1272 	strd	r1, r2, [sp, #456]	@ 0x1c8
 8002632:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 8002636:	927b      	str	r2, [sp, #492]	@ 0x1ec
 8002638:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 800263c:	927e      	str	r2, [sp, #504]	@ 0x1f8
 800263e:	f8d3 2514 	ldr.w	r2, [r3, #1300]	@ 0x514
 8002642:	927f      	str	r2, [sp, #508]	@ 0x1fc
 8002644:	f8d3 2518 	ldr.w	r2, [r3, #1304]	@ 0x518
 8002648:	f8d3 5508 	ldr.w	r5, [r3, #1288]	@ 0x508
 800264c:	f8d3 150c 	ldr.w	r1, [r3, #1292]	@ 0x50c
 8002650:	9280      	str	r2, [sp, #512]	@ 0x200
 8002652:	f8d3 251c 	ldr.w	r2, [r3, #1308]	@ 0x51c
 8002656:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800265a:	937a      	str	r3, [sp, #488]	@ 0x1e8

  setInversionModuloP_vec_C(diagonal);
 800265c:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8002660:	3328      	adds	r3, #40	@ 0x28
 8002662:	a81a      	add	r0, sp, #104	@ 0x68
 8002664:	9310      	str	r3, [sp, #64]	@ 0x40
      diagonal[i*NB32_VEC_C + r]=columns[i*(N+1)*NB32_VEC_C + r];
 8002666:	e9cd 517c 	strd	r5, r1, [sp, #496]	@ 0x1f0
 800266a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800266c:	9281      	str	r2, [sp, #516]	@ 0x204
  setInversionModuloP_vec_C(diagonal);
 800266e:	f003 f87f 	bl	8005770 <setInversionModuloP_vec_C>
 8002672:	abea      	add	r3, sp, #936	@ 0x3a8
 8002674:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 8002678:	f5aa 73c0 	sub.w	r3, sl, #384	@ 0x180
 800267c:	9311      	str	r3, [sp, #68]	@ 0x44
 800267e:	ab82      	add	r3, sp, #520	@ 0x208
 8002680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002682:	2360      	movs	r3, #96	@ 0x60
 8002684:	930c      	str	r3, [sp, #48]	@ 0x30
 8002686:	230c      	movs	r3, #12
 8002688:	9309      	str	r3, [sp, #36]	@ 0x24
 800268a:	f04f 0e0d 	mov.w	lr, #13

  for(j=N-1;j>=0;j--){
    for(i=0;i<N;i++)
 800268e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002690:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8002694:	fb03 f30e 	mul.w	r3, r3, lr
 8002698:	9308      	str	r3, [sp, #32]
 800269a:	18d7      	adds	r7, r2, r3
 800269c:	f10e 33ff 	add.w	r3, lr, #4294967295
    for(j=i+1; j<N-1; j++)
 80026a0:	f50d 7902 	add.w	r9, sp, #520	@ 0x208
    for(i=0;i<N;i++)
 80026a4:	f04f 0800 	mov.w	r8, #0
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	46f2      	mov	sl, lr
      if (i!=j)
 80026ac:	9b02      	ldr	r3, [sp, #8]
 80026ae:	4598      	cmp	r8, r3
 80026b0:	d016      	beq.n	80026e0 <invertingOnATF+0x5c8>
 80026b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80026b4:	f1a7 0420 	sub.w	r4, r7, #32
 80026b8:	f503 76c0 	add.w	r6, r3, #384	@ 0x180
 80026bc:	464d      	mov	r5, r9
        for (r = 0; r < NB32_VEC_C; r++)
          column[i*NB32_VEC_C + r]=reductionModuloP(multiplicationModuloP((PRIME-diagonal[j*NB32_VEC_C + r]),columns[(j*N+i)*NB32_VEC_C + r]));
 80026be:	f856 0b04 	ldr.w	r0, [r6], #4
 80026c2:	f854 1b04 	ldr.w	r1, [r4], #4
 80026c6:	f1c0 20ff 	rsb	r0, r0, #4278255360	@ 0xff00ff00
 80026ca:	f500 007f 	add.w	r0, r0, #16711680	@ 0xff0000
 80026ce:	30fb      	adds	r0, #251	@ 0xfb
 80026d0:	f002 f8de 	bl	8004890 <multiplicationModuloP>
 80026d4:	f002 f8f0 	bl	80048b8 <reductionModuloP>
        for (r = 0; r < NB32_VEC_C; r++)
 80026d8:	42bc      	cmp	r4, r7
          column[i*NB32_VEC_C + r]=reductionModuloP(multiplicationModuloP((PRIME-diagonal[j*NB32_VEC_C + r]),columns[(j*N+i)*NB32_VEC_C + r]));
 80026da:	f845 0b04 	str.w	r0, [r5], #4
        for (r = 0; r < NB32_VEC_C; r++)
 80026de:	d1ee      	bne.n	80026be <invertingOnATF+0x5a6>
    for(i=0;i<N;i++)
 80026e0:	f108 0801 	add.w	r8, r8, #1
 80026e4:	f1b8 0f0d 	cmp.w	r8, #13
 80026e8:	f109 0920 	add.w	r9, r9, #32
 80026ec:	f107 0720 	add.w	r7, r7, #32
 80026f0:	d1dc      	bne.n	80026ac <invertingOnATF+0x594>
    for (r = 0; r < NB32_VEC_C; r++)
      column[j*NB32_VEC_C + r]=diagonal[j*NB32_VEC_C + r];
 80026f2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80026f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80026f6:	e9d7 6560 	ldrd	r6, r5, [r7, #384]	@ 0x180
 80026fa:	e9d7 4062 	ldrd	r4, r0, [r7, #392]	@ 0x188
 80026fe:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	@ 0x190
 8002702:	e9d7 c766 	ldrd	ip, r7, [r7, #408]	@ 0x198
 8002706:	e9c3 6560 	strd	r6, r5, [r3, #384]	@ 0x180
 800270a:	e9c3 4062 	strd	r4, r0, [r3, #392]	@ 0x188
 800270e:	e9c3 1264 	strd	r1, r2, [r3, #400]	@ 0x190
 8002712:	f8c3 719c 	str.w	r7, [r3, #412]	@ 0x19c
 8002716:	f8c3 c198 	str.w	ip, [r3, #408]	@ 0x198
  for(k=0; k<j; k++)
 800271a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800271c:	46d6      	mov	lr, sl
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8711 	beq.w	8003546 <invertingOnATF+0x142e>
 8002724:	f1ba 0f0d 	cmp.w	sl, #13
 8002728:	f000 868c 	beq.w	8003444 <invertingOnATF+0x132c>
 800272c:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8002730:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8002734:	3b0d      	subs	r3, #13
 8002736:	9307      	str	r3, [sp, #28]
 8002738:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800273a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800273c:	f503 7b50 	add.w	fp, r3, #832	@ 0x340
 8002740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002742:	f8cd b004 	str.w	fp, [sp, #4]
 8002746:	ea4f 044a 	mov.w	r4, sl, lsl #1
 800274a:	2200      	movs	r2, #0
 800274c:	f503 57aa 	add.w	r7, r3, #5440	@ 0x1540
 8002750:	f500 79c0 	add.w	r9, r0, #384	@ 0x180
 8002754:	465e      	mov	r6, fp
 8002756:	4692      	mov	sl, r2
 8002758:	f8cd b00c 	str.w	fp, [sp, #12]
 800275c:	4623      	mov	r3, r4
    for(l=j+1; l<N; l++)
 800275e:	e9cd e604 	strd	lr, r6, [sp, #16]
 8002762:	4675      	mov	r5, lr
 8002764:	9706      	str	r7, [sp, #24]
 8002766:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 800276a:	469b      	mov	fp, r3
      _MUL_(k*N + l, k*(N*N)+j*N+l, j);
 800276c:	f1a7 0820 	sub.w	r8, r7, #32
 8002770:	46ca      	mov	sl, r9
  for(k=0; k<j; k++)
 8002772:	4634      	mov	r4, r6
      _MUL_(k*N + l, k*(N*N)+j*N+l, j);
 8002774:	f858 0b04 	ldr.w	r0, [r8], #4
 8002778:	f85a 1b04 	ldr.w	r1, [sl], #4
 800277c:	f002 f888 	bl	8004890 <multiplicationModuloP>
 8002780:	45b8      	cmp	r8, r7
 8002782:	e8e4 0102 	strd	r0, r1, [r4], #8
 8002786:	d1f5      	bne.n	8002774 <invertingOnATF+0x65c>
    for(l=j+1; l<N; l++)
 8002788:	3501      	adds	r5, #1
 800278a:	2d0d      	cmp	r5, #13
 800278c:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8002790:	f108 0720 	add.w	r7, r8, #32
 8002794:	d1ea      	bne.n	800276c <invertingOnATF+0x654>
  for(k=0; k<j; k++)
 8002796:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800279a:	9a07      	ldr	r2, [sp, #28]
 800279c:	9f06      	ldr	r7, [sp, #24]
 800279e:	e9dd e604 	ldrd	lr, r6, [sp, #16]
 80027a2:	f10a 0a0d 	add.w	sl, sl, #13
 80027a6:	4592      	cmp	sl, r2
 80027a8:	465b      	mov	r3, fp
 80027aa:	f506 7650 	add.w	r6, r6, #832	@ 0x340
 80027ae:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 80027b2:	d1d4      	bne.n	800275e <invertingOnATF+0x646>
 80027b4:	461c      	mov	r4, r3
  for(k=0;k<j-1;k++)
 80027b6:	f1ae 0302 	sub.w	r3, lr, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80027c0:	9901      	ldr	r1, [sp, #4]
 80027c2:	9303      	str	r3, [sp, #12]
 80027c4:	f340 80cb 	ble.w	800295e <invertingOnATF+0x846>
 80027c8:	e9cd b413 	strd	fp, r4, [sp, #76]	@ 0x4c
 80027cc:	f04f 0800 	mov.w	r8, #0
 80027d0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80027d2:	9512      	str	r5, [sp, #72]	@ 0x48
 80027d4:	4646      	mov	r6, r8
 80027d6:	468a      	mov	sl, r1
    for(l=j+1;l<N;l++)
 80027d8:	9b02      	ldr	r3, [sp, #8]
  for(k=0;k<j-1;k++)
 80027da:	3601      	adds	r6, #1
 80027dc:	429e      	cmp	r6, r3
 80027de:	da4c      	bge.n	800287a <invertingOnATF+0x762>
 80027e0:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 80027e4:	3328      	adds	r3, #40	@ 0x28
 80027e6:	ebc8 04c8 	rsb	r4, r8, r8, lsl #3
 80027ea:	eb03 1484 	add.w	r4, r3, r4, lsl #6
    for(l=j+1;l<N;l++)
 80027ee:	e9cd ea16 	strd	lr, sl, [sp, #88]	@ 0x58
 80027f2:	ab82      	add	r3, sp, #520	@ 0x208
 80027f4:	eb03 1546 	add.w	r5, r3, r6, lsl #5
 80027f8:	f504 74e0 	add.w	r4, r4, #448	@ 0x1c0
 80027fc:	00f3      	lsls	r3, r6, #3
 80027fe:	9615      	str	r6, [sp, #84]	@ 0x54
 8002800:	9406      	str	r4, [sp, #24]
 8002802:	9304      	str	r3, [sp, #16]
 8002804:	4676      	mov	r6, lr
 8002806:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 800280a:	9505      	str	r5, [sp, #20]
 800280c:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
 8002810:	4654      	mov	r4, sl
 8002812:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
 8002816:	9b06      	ldr	r3, [sp, #24]
 8002818:	9601      	str	r6, [sp, #4]
 800281a:	eb03 1a46 	add.w	sl, r3, r6, lsl #5
 800281e:	46a8      	mov	r8, r5
 8002820:	465e      	mov	r6, fp
 8002822:	46d3      	mov	fp, sl
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 8002824:	f1ab 0520 	sub.w	r5, fp, #32
    for(l=j+1;l<N;l++)
 8002828:	46a1      	mov	r9, r4
 800282a:	46b2      	mov	sl, r6
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 800282c:	f855 0b04 	ldr.w	r0, [r5], #4
 8002830:	f85a 1b04 	ldr.w	r1, [sl], #4
 8002834:	f002 f82c 	bl	8004890 <multiplicationModuloP>
 8002838:	f8d9 3000 	ldr.w	r3, [r9]
 800283c:	18c0      	adds	r0, r0, r3
 800283e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002842:	f849 0b08 	str.w	r0, [r9], #8
 8002846:	eb43 0301 	adc.w	r3, r3, r1
 800284a:	455d      	cmp	r5, fp
 800284c:	f849 3c04 	str.w	r3, [r9, #-4]
 8002850:	d1ec      	bne.n	800282c <invertingOnATF+0x714>
      for(i=k+1;i<j;i++)
 8002852:	f108 0808 	add.w	r8, r8, #8
 8002856:	45b8      	cmp	r8, r7
 8002858:	f106 0620 	add.w	r6, r6, #32
 800285c:	f505 7bd0 	add.w	fp, r5, #416	@ 0x1a0
 8002860:	d1e0      	bne.n	8002824 <invertingOnATF+0x70c>
    for(l=j+1;l<N;l++)
 8002862:	9e01      	ldr	r6, [sp, #4]
 8002864:	3601      	adds	r6, #1
 8002866:	2e0d      	cmp	r6, #13
 8002868:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 800286c:	d1d1      	bne.n	8002812 <invertingOnATF+0x6fa>
 800286e:	e9dd 6e15 	ldrd	r6, lr, [sp, #84]	@ 0x54
 8002872:	e9dd a817 	ldrd	sl, r8, [sp, #92]	@ 0x5c
 8002876:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
  for(k=0;k<j-1;k++)
 800287a:	9b03      	ldr	r3, [sp, #12]
 800287c:	429e      	cmp	r6, r3
 800287e:	f50a 7a50 	add.w	sl, sl, #832	@ 0x340
 8002882:	f108 080d 	add.w	r8, r8, #13
 8002886:	d1a7      	bne.n	80027d8 <invertingOnATF+0x6c0>
  for(k=1;k<j;k++)
 8002888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800288a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800288c:	2b01      	cmp	r3, #1
 800288e:	e9dd 5b12 	ldrd	r5, fp, [sp, #72]	@ 0x48
 8002892:	d064      	beq.n	800295e <invertingOnATF+0x846>
 8002894:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8002898:	3328      	adds	r3, #40	@ 0x28
 800289a:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800289e:	eb03 164e 	add.w	r6, r3, lr, lsl #5
        _MSUB_(k*N + l,  i*(N*N)+k*N+l, i );
 80028a2:	e9cd b412 	strd	fp, r4, [sp, #72]	@ 0x48
 80028a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80028a8:	9506      	str	r5, [sp, #24]
  for(k=1;k<j;k++)
 80028aa:	220d      	movs	r2, #13
 80028ac:	f503 67d0 	add.w	r7, r3, #1664	@ 0x680
        _MSUB_(k*N + l,  i*(N*N)+k*N+l, i );
 80028b0:	f06f 0804 	mvn.w	r8, #4
  for(k=1;k<j;k++)
 80028b4:	2308      	movs	r3, #8
        _MSUB_(k*N + l,  i*(N*N)+k*N+l, i );
 80028b6:	4692      	mov	sl, r2
    for(l=j+1;l<N;l++)
 80028b8:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
 80028bc:	9716      	str	r7, [sp, #88]	@ 0x58
 80028be:	46ba      	mov	sl, r7
 80028c0:	9617      	str	r6, [sp, #92]	@ 0x5c
 80028c2:	4637      	mov	r7, r6
 80028c4:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	4676      	mov	r6, lr
 80028cc:	f8cd 9060 	str.w	r9, [sp, #96]	@ 0x60
  for(k=1;k<j;k++)
 80028d0:	463c      	mov	r4, r7
 80028d2:	2500      	movs	r5, #0
 80028d4:	f50d 7b02 	add.w	fp, sp, #520	@ 0x208
 80028d8:	9604      	str	r6, [sp, #16]
 80028da:	9705      	str	r7, [sp, #20]
 80028dc:	465e      	mov	r6, fp
 80028de:	462f      	mov	r7, r5
 80028e0:	4625      	mov	r5, r4
        _MSUB_(k*N + l,  i*(N*N)+k*N+l, i );
 80028e2:	f1a5 0420 	sub.w	r4, r5, #32
  for(k=1;k<j;k++)
 80028e6:	46d1      	mov	r9, sl
 80028e8:	46b3      	mov	fp, r6
        _MSUB_(k*N + l,  i*(N*N)+k*N+l, i );
 80028ea:	f85b 1b04 	ldr.w	r1, [fp], #4
 80028ee:	f854 0b04 	ldr.w	r0, [r4], #4
 80028f2:	eba8 0101 	sub.w	r1, r8, r1
 80028f6:	f001 ffcb 	bl	8004890 <multiplicationModuloP>
 80028fa:	f8d9 3000 	ldr.w	r3, [r9]
 80028fe:	18c0      	adds	r0, r0, r3
 8002900:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002904:	f849 0b08 	str.w	r0, [r9], #8
 8002908:	eb43 0301 	adc.w	r3, r3, r1
 800290c:	42ac      	cmp	r4, r5
 800290e:	f849 3c04 	str.w	r3, [r9, #-4]
 8002912:	d1ea      	bne.n	80028ea <invertingOnATF+0x7d2>
      for(i=0;i<k;i++)
 8002914:	9b01      	ldr	r3, [sp, #4]
 8002916:	3708      	adds	r7, #8
 8002918:	429f      	cmp	r7, r3
 800291a:	f106 0620 	add.w	r6, r6, #32
 800291e:	f504 55a9 	add.w	r5, r4, #5408	@ 0x1520
 8002922:	d1de      	bne.n	80028e2 <invertingOnATF+0x7ca>
    for(l=j+1;l<N;l++)
 8002924:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8002928:	3601      	adds	r6, #1
 800292a:	2e0d      	cmp	r6, #13
 800292c:	f10a 0a40 	add.w	sl, sl, #64	@ 0x40
 8002930:	f107 0720 	add.w	r7, r7, #32
 8002934:	d1cc      	bne.n	80028d0 <invertingOnATF+0x7b8>
  for(k=1;k<j;k++)
 8002936:	e9dd ea14 	ldrd	lr, sl, [sp, #80]	@ 0x50
 800293a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	@ 0x58
 800293e:	9a07      	ldr	r2, [sp, #28]
 8002940:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8002944:	f10a 0a0d 	add.w	sl, sl, #13
 8002948:	4592      	cmp	sl, r2
 800294a:	f103 0308 	add.w	r3, r3, #8
 800294e:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8002952:	f506 76d0 	add.w	r6, r6, #416	@ 0x1a0
 8002956:	d1af      	bne.n	80028b8 <invertingOnATF+0x7a0>
 8002958:	e9dd b412 	ldrd	fp, r4, [sp, #72]	@ 0x48
 800295c:	9d06      	ldr	r5, [sp, #24]
  for(k=0;k<j;k++)
 800295e:	f1be 0f0b 	cmp.w	lr, #11
 8002962:	f200 85eb 	bhi.w	800353c <invertingOnATF+0x1424>
 8002966:	eb04 020e 	add.w	r2, r4, lr
 800296a:	f50d 5137 	add.w	r1, sp, #11712	@ 0x2dc0
 800296e:	eb0e 0882 	add.w	r8, lr, r2, lsl #2
 8002972:	465b      	mov	r3, fp
    for(l=j+1;l<N;l++)
 8002974:	2200      	movs	r2, #0
 8002976:	3128      	adds	r1, #40	@ 0x28
        _MSUB_(k*N + l, k*(N*N)+l*N+i, i);
 8002978:	f8cd 9014 	str.w	r9, [sp, #20]
 800297c:	9406      	str	r4, [sp, #24]
 800297e:	4691      	mov	r9, r2
 8002980:	f1a8 000d 	sub.w	r0, r8, #13
 8002984:	f10e 0c01 	add.w	ip, lr, #1
 8002988:	f101 0b20 	add.w	fp, r1, #32
 800298c:	f06f 0704 	mvn.w	r7, #4
 8002990:	461a      	mov	r2, r3
 8002992:	4644      	mov	r4, r8
    for(l=j+1;l<N-1;l++)
 8002994:	eb0c 0604 	add.w	r6, ip, r4
 8002998:	e9cd 2412 	strd	r2, r4, [sp, #72]	@ 0x48
 800299c:	e9cd 0c15 	strd	r0, ip, [sp, #84]	@ 0x54
 80029a0:	00f6      	lsls	r6, r6, #3
 80029a2:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80029a6:	4675      	mov	r5, lr
 80029a8:	f8cd e01c 	str.w	lr, [sp, #28]
 80029ac:	4692      	mov	sl, r2
 80029ae:	46b1      	mov	r9, r6
      for(i=l+1;i<N;i++)
 80029b0:	3501      	adds	r5, #1
 80029b2:	eb0b 0689 	add.w	r6, fp, r9, lsl #2
 80029b6:	f8cd 9010 	str.w	r9, [sp, #16]
 80029ba:	9501      	str	r5, [sp, #4]
 80029bc:	46b1      	mov	r9, r6
        _MSUB_(k*N + l, k*(N*N)+l*N+i, i);
 80029be:	ab82      	add	r3, sp, #520	@ 0x208
 80029c0:	f1a9 0620 	sub.w	r6, r9, #32
 80029c4:	eb03 1845 	add.w	r8, r3, r5, lsl #5
    for(l=j+1;l<N-1;l++)
 80029c8:	4654      	mov	r4, sl
        _MSUB_(k*N + l, k*(N*N)+l*N+i, i);
 80029ca:	f858 1b04 	ldr.w	r1, [r8], #4
 80029ce:	f856 0b04 	ldr.w	r0, [r6], #4
 80029d2:	1a79      	subs	r1, r7, r1
 80029d4:	f001 ff5c 	bl	8004890 <multiplicationModuloP>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	18c0      	adds	r0, r0, r3
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	f844 0b08 	str.w	r0, [r4], #8
 80029e2:	eb43 0301 	adc.w	r3, r3, r1
 80029e6:	454e      	cmp	r6, r9
 80029e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80029ec:	d1ed      	bne.n	80029ca <invertingOnATF+0x8b2>
      for(i=l+1;i<N;i++)
 80029ee:	3501      	adds	r5, #1
 80029f0:	2d0d      	cmp	r5, #13
 80029f2:	f106 0920 	add.w	r9, r6, #32
 80029f6:	d1e2      	bne.n	80029be <invertingOnATF+0x8a6>
    for(l=j+1;l<N-1;l++)
 80029f8:	9d01      	ldr	r5, [sp, #4]
 80029fa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80029fe:	2d0c      	cmp	r5, #12
 8002a00:	f10a 0a40 	add.w	sl, sl, #64	@ 0x40
 8002a04:	f109 0970 	add.w	r9, r9, #112	@ 0x70
 8002a08:	d1d2      	bne.n	80029b0 <invertingOnATF+0x898>
  for(k=0;k<j;k++)
 8002a0a:	e9dd 9014 	ldrd	r9, r0, [sp, #80]	@ 0x50
 8002a0e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8002a12:	f109 090d 	add.w	r9, r9, #13
 8002a16:	4581      	cmp	r9, r0
 8002a18:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002a1c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8002a20:	f502 7250 	add.w	r2, r2, #832	@ 0x340
 8002a24:	f104 04a9 	add.w	r4, r4, #169	@ 0xa9
 8002a28:	d1b4      	bne.n	8002994 <invertingOnATF+0x87c>
 8002a2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002a2c:	9e08      	ldr	r6, [sp, #32]
 8002a2e:	f8cd c01c 	str.w	ip, [sp, #28]
 8002a32:	e9dd 9405 	ldrd	r9, r4, [sp, #20]
 8002a36:	f502 7860 	add.w	r8, r2, #896	@ 0x380
 8002a3a:	f50d 5237 	add.w	r2, sp, #11712	@ 0x2dc0
 8002a3e:	3228      	adds	r2, #40	@ 0x28
 8002a40:	eb04 030e 	add.w	r3, r4, lr
 8002a44:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a48:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8002a4c:	4416      	add	r6, r2
 8002a4e:	ea4f 114e 	mov.w	r1, lr, lsl #5
 8002a52:	f8cd 8020 	str.w	r8, [sp, #32]
 8002a56:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
 8002a5a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8002a5c:	3b0d      	subs	r3, #13
 8002a5e:	4644      	mov	r4, r8
 8002a60:	f04f 0b00 	mov.w	fp, #0
 8002a64:	4635      	mov	r5, r6
 8002a66:	46e1      	mov	r9, ip
 8002a68:	4688      	mov	r8, r1
    for(l=j+2;l<N;l++)
 8002a6a:	e9cd b315 	strd	fp, r3, [sp, #84]	@ 0x54
 8002a6e:	f505 72e0 	add.w	r2, r5, #448	@ 0x1c0
  for(k=0;k<j;k++)
 8002a72:	4626      	mov	r6, r4
 8002a74:	9414      	str	r4, [sp, #80]	@ 0x50
 8002a76:	46ca      	mov	sl, r9
 8002a78:	9206      	str	r2, [sp, #24]
 8002a7a:	4674      	mov	r4, lr
 8002a7c:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
 8002a80:	4647      	mov	r7, r8
      for(i=j+1;i<l;i++)
 8002a82:	ab82      	add	r3, sp, #520	@ 0x208
 8002a84:	eb03 0907 	add.w	r9, r3, r7
 8002a88:	9b06      	ldr	r3, [sp, #24]
 8002a8a:	9401      	str	r4, [sp, #4]
 8002a8c:	eb03 1b4a 	add.w	fp, r3, sl, lsl #5
 8002a90:	e9cd 5704 	strd	r5, r7, [sp, #16]
 8002a94:	46d8      	mov	r8, fp
 8002a96:	464f      	mov	r7, r9
 8002a98:	46a1      	mov	r9, r4
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 8002a9a:	f1a8 0520 	sub.w	r5, r8, #32
      for(i=j+1;i<l;i++)
 8002a9e:	4634      	mov	r4, r6
 8002aa0:	46bb      	mov	fp, r7
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 8002aa2:	f855 0b04 	ldr.w	r0, [r5], #4
 8002aa6:	f85b 1b04 	ldr.w	r1, [fp], #4
 8002aaa:	f001 fef1 	bl	8004890 <multiplicationModuloP>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	6862      	ldr	r2, [r4, #4]
 8002ab2:	181b      	adds	r3, r3, r0
 8002ab4:	f844 3b08 	str.w	r3, [r4], #8
 8002ab8:	eb42 0201 	adc.w	r2, r2, r1
 8002abc:	4545      	cmp	r5, r8
 8002abe:	f844 2c04 	str.w	r2, [r4, #-4]
 8002ac2:	d1ee      	bne.n	8002aa2 <invertingOnATF+0x98a>
      for(i=j+1;i<l;i++)
 8002ac4:	f109 0901 	add.w	r9, r9, #1
 8002ac8:	45d1      	cmp	r9, sl
 8002aca:	f107 0720 	add.w	r7, r7, #32
 8002ace:	f505 78d0 	add.w	r8, r5, #416	@ 0x1a0
 8002ad2:	dbe2      	blt.n	8002a9a <invertingOnATF+0x982>
    for(l=j+2;l<N;l++)
 8002ad4:	f10a 0a01 	add.w	sl, sl, #1
 8002ad8:	f1ba 0f0d 	cmp.w	sl, #13
 8002adc:	e9dd 5704 	ldrd	r5, r7, [sp, #16]
 8002ae0:	9c01      	ldr	r4, [sp, #4]
 8002ae2:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8002ae6:	d1cc      	bne.n	8002a82 <invertingOnATF+0x96a>
 8002ae8:	46a6      	mov	lr, r4
 8002aea:	e9dd 4b14 	ldrd	r4, fp, [sp, #80]	@ 0x50
 8002aee:	e9dd 3916 	ldrd	r3, r9, [sp, #88]	@ 0x58
  for(k=0;k<j;k++)
 8002af2:	f10b 0b0d 	add.w	fp, fp, #13
 8002af6:	459b      	cmp	fp, r3
 8002af8:	46b8      	mov	r8, r7
 8002afa:	f504 7450 	add.w	r4, r4, #832	@ 0x340
 8002afe:	f505 55a9 	add.w	r5, r5, #5408	@ 0x1520
 8002b02:	d1b2      	bne.n	8002a6a <invertingOnATF+0x952>
 8002b04:	e9dd 5807 	ldrd	r5, r8, [sp, #28]
 8002b08:	e9dd 9412 	ldrd	r9, r4, [sp, #72]	@ 0x48
 8002b0c:	eb04 010e 	add.w	r1, r4, lr
 8002b10:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 8002b14:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	3a68      	subs	r2, #104	@ 0x68
 8002b1c:	f1a1 000d 	sub.w	r0, r1, #13
      for(i=j+1;i<l;i++)
 8002b20:	2100      	movs	r1, #0
 8002b22:	9501      	str	r5, [sp, #4]
 8002b24:	f8cd 9010 	str.w	r9, [sp, #16]
 8002b28:	460d      	mov	r5, r1
 8002b2a:	46f2      	mov	sl, lr
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4691      	mov	r9, r2
 8002b30:	4644      	mov	r4, r8
 8002b32:	4627      	mov	r7, r4
 8002b34:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8002b38:	464e      	mov	r6, r9
 8002b3a:	4654      	mov	r4, sl
 8002b3c:	463d      	mov	r5, r7
 8002b3e:	9007      	str	r0, [sp, #28]
 8002b40:	468b      	mov	fp, r1
      _MOD_RED_(k*(N*N)+j*N+l, k*N + l);
 8002b42:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8002b46:	3328      	adds	r3, #40	@ 0x28
 8002b48:	f1a5 0840 	sub.w	r8, r5, #64	@ 0x40
 8002b4c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002b50:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 8002b54:	f001 feb0 	bl	80048b8 <reductionModuloP>
 8002b58:	4545      	cmp	r5, r8
 8002b5a:	f847 0b04 	str.w	r0, [r7], #4
 8002b5e:	d1f7      	bne.n	8002b50 <invertingOnATF+0xa38>
    for(l=j+1; l<N; l++)
 8002b60:	3401      	adds	r4, #1
 8002b62:	2c0d      	cmp	r4, #13
 8002b64:	f106 0608 	add.w	r6, r6, #8
 8002b68:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8002b6c:	d1e9      	bne.n	8002b42 <invertingOnATF+0xa2a>
  for(k=0; k<j; k++)
 8002b6e:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8002b72:	9807      	ldr	r0, [sp, #28]
 8002b74:	350d      	adds	r5, #13
 8002b76:	4285      	cmp	r5, r0
 8002b78:	4659      	mov	r1, fp
 8002b7a:	f509 69a9 	add.w	r9, r9, #1352	@ 0x548
 8002b7e:	f504 7450 	add.w	r4, r4, #832	@ 0x340
 8002b82:	d1d6      	bne.n	8002b32 <invertingOnATF+0xa1a>
  for(k=j+1; k<N-1; k++)
 8002b84:	f1ba 0f0b 	cmp.w	sl, #11
 8002b88:	9d01      	ldr	r5, [sp, #4]
 8002b8a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002b8e:	46d6      	mov	lr, sl
 8002b90:	465c      	mov	r4, fp
 8002b92:	f200 84c4 	bhi.w	800351e <invertingOnATF+0x1406>
 8002b96:	eb04 030e 	add.w	r3, r4, lr
 8002b9a:	eb0e 0883 	add.w	r8, lr, r3, lsl #2
 8002b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ba0:	4b95      	ldr	r3, [pc, #596]	@ (8002df8 <invertingOnATF+0xce0>)
 8002ba2:	f8cd 8004 	str.w	r8, [sp, #4]
 8002ba6:	a9ea      	add	r1, sp, #936	@ 0x3a8
 8002ba8:	fb03 1302 	mla	r3, r3, r2, r1
 8002bac:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8002bb0:	fb02 f20e 	mul.w	r2, r2, lr
 8002bb4:	f5a2 64a8 	sub.w	r4, r2, #1344	@ 0x540
 8002bb8:	f50d 5237 	add.w	r2, sp, #11712	@ 0x2dc0
 8002bbc:	3228      	adds	r2, #40	@ 0x28
 8002bbe:	f102 0b20 	add.w	fp, r2, #32
 8002bc2:	465a      	mov	r2, fp
 8002bc4:	4675      	mov	r5, lr
 8002bc6:	469b      	mov	fp, r3
 8002bc8:	46a0      	mov	r8, r4
 8002bca:	46ca      	mov	sl, r9
 8002bcc:	4613      	mov	r3, r2
    for(l=k+1; l<N; l++)
 8002bce:	e9cd e306 	strd	lr, r3, [sp, #24]
 8002bd2:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 8002bd6:	3501      	adds	r5, #1
 8002bd8:	eb0b 09c8 	add.w	r9, fp, r8, lsl #3
 8002bdc:	e9cd 5804 	strd	r5, r8, [sp, #16]
 8002be0:	4626      	mov	r6, r4
 8002be2:	46c8      	mov	r8, r9
      _MUL_(k*N+l, j*(N*N)+k*N+l, j);
 8002be4:	f1a6 0720 	sub.w	r7, r6, #32
 8002be8:	46d1      	mov	r9, sl
    for(l=j+1; l<N; l++)
 8002bea:	4644      	mov	r4, r8
      _MUL_(k*N+l, j*(N*N)+k*N+l, j);
 8002bec:	f857 0b04 	ldr.w	r0, [r7], #4
 8002bf0:	f859 1b04 	ldr.w	r1, [r9], #4
 8002bf4:	f001 fe4c 	bl	8004890 <multiplicationModuloP>
 8002bf8:	42be      	cmp	r6, r7
 8002bfa:	e8e4 0102 	strd	r0, r1, [r4], #8
 8002bfe:	d1f5      	bne.n	8002bec <invertingOnATF+0xad4>
    for(l=k+1; l<N; l++)
 8002c00:	3501      	adds	r5, #1
 8002c02:	2d0d      	cmp	r5, #13
 8002c04:	f108 0840 	add.w	r8, r8, #64	@ 0x40
 8002c08:	f106 0620 	add.w	r6, r6, #32
 8002c0c:	d1ea      	bne.n	8002be4 <invertingOnATF+0xacc>
  for(k=j+1; k<N-1; k++)
 8002c0e:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 8002c12:	2d0c      	cmp	r5, #12
 8002c14:	e9dd e306 	ldrd	lr, r3, [sp, #24]
 8002c18:	f108 0870 	add.w	r8, r8, #112	@ 0x70
 8002c1c:	d1d7      	bne.n	8002bce <invertingOnATF+0xab6>
  for(k=j+1;k<N-1;k++)
 8002c1e:	f1be 0f0b 	cmp.w	lr, #11
 8002c22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002c26:	469b      	mov	fp, r3
 8002c28:	f200 8099 	bhi.w	8002d5e <invertingOnATF+0xc46>
 8002c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 82d8 	beq.w	80031e4 <invertingOnATF+0x10cc>
 8002c34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c36:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8002c3a:	f8cd 8014 	str.w	r8, [sp, #20]
 8002c3e:	f503 5537 	add.w	r5, r3, #11712	@ 0x2dc0
 8002c42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002c44:	9506      	str	r5, [sp, #24]
 8002c46:	f503 57b8 	add.w	r7, r3, #5888	@ 0x1700
 8002c4a:	46bb      	mov	fp, r7
 8002c4c:	46a8      	mov	r8, r5
 8002c4e:	4677      	mov	r7, lr
    for(l=k+1;l<N;l++)
 8002c50:	4646      	mov	r6, r8
 8002c52:	3701      	adds	r7, #1
 8002c54:	e9cd b812 	strd	fp, r8, [sp, #72]	@ 0x48
 8002c58:	9708      	str	r7, [sp, #32]
 8002c5a:	46d8      	mov	r8, fp
 8002c5c:	46b2      	mov	sl, r6
 8002c5e:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
  for(k=j+1;k<N-1;k++)
 8002c62:	4644      	mov	r4, r8
 8002c64:	ae82      	add	r6, sp, #520	@ 0x208
 8002c66:	2500      	movs	r5, #0
 8002c68:	9701      	str	r7, [sp, #4]
 8002c6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8002c6e:	462f      	mov	r7, r5
 8002c70:	46b0      	mov	r8, r6
 8002c72:	4626      	mov	r6, r4
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 8002c74:	f1a6 0420 	sub.w	r4, r6, #32
  for(k=j+1;k<N-1;k++)
 8002c78:	46d3      	mov	fp, sl
 8002c7a:	4645      	mov	r5, r8
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 8002c7c:	f854 0b04 	ldr.w	r0, [r4], #4
 8002c80:	f855 1b04 	ldr.w	r1, [r5], #4
 8002c84:	f001 fe04 	bl	8004890 <multiplicationModuloP>
 8002c88:	f8db 3000 	ldr.w	r3, [fp]
 8002c8c:	18c0      	adds	r0, r0, r3
 8002c8e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002c92:	f84b 0b08 	str.w	r0, [fp], #8
 8002c96:	eb43 0301 	adc.w	r3, r3, r1
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	f84b 3c04 	str.w	r3, [fp, #-4]
 8002ca0:	d1ec      	bne.n	8002c7c <invertingOnATF+0xb64>
      for(i=0;i<j;i++)
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	454f      	cmp	r7, r9
 8002ca6:	f108 0820 	add.w	r8, r8, #32
 8002caa:	f506 56a9 	add.w	r6, r6, #5408	@ 0x1520
 8002cae:	d1e1      	bne.n	8002c74 <invertingOnATF+0xb5c>
    for(l=k+1;l<N;l++)
 8002cb0:	9f01      	ldr	r7, [sp, #4]
 8002cb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002cb6:	3701      	adds	r7, #1
 8002cb8:	2f0d      	cmp	r7, #13
 8002cba:	f10a 0a40 	add.w	sl, sl, #64	@ 0x40
 8002cbe:	f108 0820 	add.w	r8, r8, #32
 8002cc2:	d1ce      	bne.n	8002c62 <invertingOnATF+0xb4a>
  for(k=j+1;k<N-1;k++)
 8002cc4:	e9dd b812 	ldrd	fp, r8, [sp, #72]	@ 0x48
 8002cc8:	9f08      	ldr	r7, [sp, #32]
 8002cca:	f8dd e050 	ldr.w	lr, [sp, #80]	@ 0x50
 8002cce:	2f0c      	cmp	r7, #12
 8002cd0:	f508 7860 	add.w	r8, r8, #896	@ 0x380
 8002cd4:	f50b 7be0 	add.w	fp, fp, #448	@ 0x1c0
 8002cd8:	d1ba      	bne.n	8002c50 <invertingOnATF+0xb38>
  for(k=j+1;k<N-2;k++)
 8002cda:	f1be 0f0a 	cmp.w	lr, #10
 8002cde:	e9dd 8505 	ldrd	r8, r5, [sp, #20]
 8002ce2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002ce6:	f240 8284 	bls.w	80031f2 <invertingOnATF+0x10da>
 8002cea:	4b43      	ldr	r3, [pc, #268]	@ (8002df8 <invertingOnATF+0xce0>)
 8002cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cee:	f44f 64b7 	mov.w	r4, #1464	@ 0x5b8
 8002cf2:	a9ea      	add	r1, sp, #936	@ 0x3a8
 8002cf4:	fb04 f40e 	mul.w	r4, r4, lr
 8002cf8:	fb03 1302 	mla	r3, r3, r2, r1
 8002cfc:	f5a4 64a8 	sub.w	r4, r4, #1344	@ 0x540
 8002d00:	f103 0b40 	add.w	fp, r3, #64	@ 0x40
    for(l=k+1;l<N;l++)
 8002d04:	46f1      	mov	r9, lr
 8002d06:	4625      	mov	r5, r4
 8002d08:	46f2      	mov	sl, lr
    for(l=k+1; l<N; l++)
 8002d0a:	eb0b 07c5 	add.w	r7, fp, r5, lsl #3
 8002d0e:	462c      	mov	r4, r5
 8002d10:	f109 0901 	add.w	r9, r9, #1
 8002d14:	9501      	str	r5, [sp, #4]
 8002d16:	46b8      	mov	r8, r7
 8002d18:	464d      	mov	r5, r9
 8002d1a:	4627      	mov	r7, r4
      _MOD_RED_(j*(N*N)+k*N+l, k*N+l);
 8002d1c:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8002d20:	3328      	adds	r3, #40	@ 0x28
 8002d22:	f1a8 0640 	sub.w	r6, r8, #64	@ 0x40
 8002d26:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 8002d2a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8002d2e:	f001 fdc3 	bl	80048b8 <reductionModuloP>
 8002d32:	45b0      	cmp	r8, r6
 8002d34:	f844 0b04 	str.w	r0, [r4], #4
 8002d38:	d1f7      	bne.n	8002d2a <invertingOnATF+0xc12>
    for(l=k+1; l<N; l++)
 8002d3a:	3501      	adds	r5, #1
 8002d3c:	2d0d      	cmp	r5, #13
 8002d3e:	f107 0708 	add.w	r7, r7, #8
 8002d42:	f108 0840 	add.w	r8, r8, #64	@ 0x40
 8002d46:	d1e9      	bne.n	8002d1c <invertingOnATF+0xc04>
  for(k=j+1; k<N-1; k++)
 8002d48:	9d01      	ldr	r5, [sp, #4]
 8002d4a:	f1b9 0f0c 	cmp.w	r9, #12
 8002d4e:	f105 0570 	add.w	r5, r5, #112	@ 0x70
 8002d52:	d1da      	bne.n	8002d0a <invertingOnATF+0xbf2>
  for(k=0; k<j-1; k++)
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	46d6      	mov	lr, sl
 8002d5a:	f340 83fe 	ble.w	800355a <invertingOnATF+0x1442>
 8002d5e:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8002d62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    for(l=k+1; l<N; l++)
 8002d64:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8002d66:	3328      	adds	r3, #40	@ 0x28
 8002d68:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8002d6c:	eb03 1742 	add.w	r7, r3, r2, lsl #5
 8002d70:	0156      	lsls	r6, r2, #5
 8002d72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002d74:	9601      	str	r6, [sp, #4]
  for(k=0; k<j-1; k++)
 8002d76:	2400      	movs	r4, #0
 8002d78:	46ba      	mov	sl, r7
 8002d7a:	abfa      	add	r3, sp, #1000	@ 0x3e8
 8002d7c:	f502 7bc0 	add.w	fp, r2, #384	@ 0x180
 8002d80:	46a0      	mov	r8, r4
 8002d82:	462f      	mov	r7, r5
    for(l=k+1; l<j; l++)
 8002d84:	9a02      	ldr	r2, [sp, #8]
 8002d86:	f108 0801 	add.w	r8, r8, #1
 8002d8a:	4590      	cmp	r8, r2
 8002d8c:	da24      	bge.n	8002dd8 <invertingOnATF+0xcc0>
 8002d8e:	ebc8 05c8 	rsb	r5, r8, r8, lsl #3
 8002d92:	012d      	lsls	r5, r5, #4
 8002d94:	3d68      	subs	r5, #104	@ 0x68
 8002d96:	e9cd 8a04 	strd	r8, sl, [sp, #16]
 8002d9a:	462e      	mov	r6, r5
 8002d9c:	9306      	str	r3, [sp, #24]
 8002d9e:	4698      	mov	r8, r3
 8002da0:	4655      	mov	r5, sl
 8002da2:	f8cd e01c 	str.w	lr, [sp, #28]
      _MUL_(k*N+l, k*(N*N)+l*N+j, j);
 8002da6:	f1a5 0920 	sub.w	r9, r5, #32
 8002daa:	46da      	mov	sl, fp
  for(k=0; k<j-1; k++)
 8002dac:	4644      	mov	r4, r8
      _MUL_(k*N+l, k*(N*N)+l*N+j, j);
 8002dae:	f859 0b04 	ldr.w	r0, [r9], #4
 8002db2:	f85a 1b04 	ldr.w	r1, [sl], #4
 8002db6:	f001 fd6b 	bl	8004890 <multiplicationModuloP>
 8002dba:	454d      	cmp	r5, r9
 8002dbc:	e8e4 0102 	strd	r0, r1, [r4], #8
 8002dc0:	d1f5      	bne.n	8002dae <invertingOnATF+0xc96>
    for(l=k+1; l<j; l++)
 8002dc2:	3608      	adds	r6, #8
 8002dc4:	42b7      	cmp	r7, r6
 8002dc6:	f108 0840 	add.w	r8, r8, #64	@ 0x40
 8002dca:	f505 75d0 	add.w	r5, r5, #416	@ 0x1a0
 8002dce:	d1ea      	bne.n	8002da6 <invertingOnATF+0xc8e>
 8002dd0:	e9dd 8a04 	ldrd	r8, sl, [sp, #16]
 8002dd4:	e9dd 3e06 	ldrd	r3, lr, [sp, #24]
  for(k=0; k<j-1; k++)
 8002dd8:	9a03      	ldr	r2, [sp, #12]
 8002dda:	4590      	cmp	r8, r2
 8002ddc:	f107 0768 	add.w	r7, r7, #104	@ 0x68
 8002de0:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8002de4:	f50a 5ab6 	add.w	sl, sl, #5824	@ 0x16c0
 8002de8:	d1cc      	bne.n	8002d84 <invertingOnATF+0xc6c>
  for(k=0;k<j-2;k++)
 8002dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dec:	9e01      	ldr	r6, [sp, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	f240 81ef 	bls.w	80031d2 <invertingOnATF+0x10ba>
 8002df4:	e002      	b.n	8002dfc <invertingOnATF+0xce4>
 8002df6:	bf00      	nop
 8002df8:	ffffd5c0 	.word	0xffffd5c0
 8002dfc:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8002e00:	3328      	adds	r3, #40	@ 0x28
 8002e02:	f503 7800 	add.w	r8, r3, #512	@ 0x200
 8002e06:	f50d 7912 	add.w	r9, sp, #584	@ 0x248
 8002e0a:	4642      	mov	r2, r8
 8002e0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e10:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8002e14:	affa      	add	r7, sp, #1000	@ 0x3e8
 8002e16:	2600      	movs	r6, #0
 8002e18:	f1ae 0003 	sub.w	r0, lr, #3
 8002e1c:	46ca      	mov	sl, r9
    for(l=k+1;l<j-1;l++)
 8002e1e:	9b03      	ldr	r3, [sp, #12]
 8002e20:	3601      	adds	r6, #1
 8002e22:	429e      	cmp	r6, r3
 8002e24:	da43      	bge.n	8002eae <invertingOnATF+0xd96>
 8002e26:	e9cd e014 	strd	lr, r0, [sp, #80]	@ 0x50
 8002e2a:	e9cd a712 	strd	sl, r7, [sp, #72]	@ 0x48
 8002e2e:	46bb      	mov	fp, r7
 8002e30:	9607      	str	r6, [sp, #28]
 8002e32:	9208      	str	r2, [sp, #32]
 8002e34:	4617      	mov	r7, r2
 8002e36:	4653      	mov	r3, sl
      for(i=l+1;i<j;i++)
 8002e38:	9a02      	ldr	r2, [sp, #8]
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	4296      	cmp	r6, r2
 8002e3e:	da27      	bge.n	8002e90 <invertingOnATF+0xd78>
 8002e40:	00f5      	lsls	r5, r6, #3
 8002e42:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8002e46:	9601      	str	r6, [sp, #4]
 8002e48:	462e      	mov	r6, r5
 8002e4a:	463d      	mov	r5, r7
 8002e4c:	461f      	mov	r7, r3
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8002e4e:	f1a5 0420 	sub.w	r4, r5, #32
    for(l=k+1;l<j-1;l++)
 8002e52:	46d9      	mov	r9, fp
 8002e54:	46ba      	mov	sl, r7
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8002e56:	f854 0b04 	ldr.w	r0, [r4], #4
 8002e5a:	f85a 1b04 	ldr.w	r1, [sl], #4
 8002e5e:	f001 fd17 	bl	8004890 <multiplicationModuloP>
 8002e62:	f8d9 3000 	ldr.w	r3, [r9]
 8002e66:	18c0      	adds	r0, r0, r3
 8002e68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002e6c:	f849 0b08 	str.w	r0, [r9], #8
 8002e70:	eb43 0301 	adc.w	r3, r3, r1
 8002e74:	42a5      	cmp	r5, r4
 8002e76:	f849 3c04 	str.w	r3, [r9, #-4]
 8002e7a:	d1ec      	bne.n	8002e56 <invertingOnATF+0xd3e>
      for(i=l+1;i<j;i++)
 8002e7c:	3608      	adds	r6, #8
 8002e7e:	4546      	cmp	r6, r8
 8002e80:	f107 0720 	add.w	r7, r7, #32
 8002e84:	f105 0520 	add.w	r5, r5, #32
 8002e88:	d1e1      	bne.n	8002e4e <invertingOnATF+0xd36>
 8002e8a:	e9dd 7304 	ldrd	r7, r3, [sp, #16]
 8002e8e:	9e01      	ldr	r6, [sp, #4]
    for(l=k+1;l<j-1;l++)
 8002e90:	9a03      	ldr	r2, [sp, #12]
 8002e92:	4296      	cmp	r6, r2
 8002e94:	f10b 0b40 	add.w	fp, fp, #64	@ 0x40
 8002e98:	f103 0320 	add.w	r3, r3, #32
 8002e9c:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002ea0:	d1ca      	bne.n	8002e38 <invertingOnATF+0xd20>
 8002ea2:	e9dd 6207 	ldrd	r6, r2, [sp, #28]
 8002ea6:	e9dd a712 	ldrd	sl, r7, [sp, #72]	@ 0x48
 8002eaa:	e9dd e014 	ldrd	lr, r0, [sp, #80]	@ 0x50
  for(k=0;k<j-2;k++)
 8002eae:	4286      	cmp	r6, r0
 8002eb0:	f507 7760 	add.w	r7, r7, #896	@ 0x380
 8002eb4:	f10a 0a20 	add.w	sl, sl, #32
 8002eb8:	f502 52b7 	add.w	r2, r2, #5856	@ 0x16e0
 8002ebc:	dbaf      	blt.n	8002e1e <invertingOnATF+0xd06>
  for(k=0;k<j-2;k++)
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002ec4:	dd6d      	ble.n	8002fa2 <invertingOnATF+0xe8a>
 8002ec6:	f50d 5237 	add.w	r2, sp, #11712	@ 0x2dc0
 8002eca:	f50d 6685 	add.w	r6, sp, #1064	@ 0x428
 8002ece:	3228      	adds	r2, #40	@ 0x28
 8002ed0:	2502      	movs	r5, #2
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8002ed2:	9c02      	ldr	r4, [sp, #8]
 8002ed4:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8002ed8:	a98a      	add	r1, sp, #552	@ 0x228
 8002eda:	46b0      	mov	r8, r6
  for(k=0;k<j-2;k++)
 8002edc:	2300      	movs	r3, #0
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8002ede:	f06f 0704 	mvn.w	r7, #4
 8002ee2:	4691      	mov	r9, r2
 8002ee4:	462e      	mov	r6, r5
    for(l=k+2;l<j;l++)
 8002ee6:	42a6      	cmp	r6, r4
  for(k=0;k<j-2;k++)
 8002ee8:	f103 0301 	add.w	r3, r3, #1
    for(l=k+2;l<j;l++)
 8002eec:	46b2      	mov	sl, r6
 8002eee:	da4c      	bge.n	8002f8a <invertingOnATF+0xe72>
 8002ef0:	f509 7ce0 	add.w	ip, r9, #448	@ 0x1c0
 8002ef4:	e9cd 9613 	strd	r9, r6, [sp, #76]	@ 0x4c
 8002ef8:	46c3      	mov	fp, r8
 8002efa:	4666      	mov	r6, ip
 8002efc:	f8cd e054 	str.w	lr, [sp, #84]	@ 0x54
 8002f00:	469c      	mov	ip, r3
 8002f02:	9016      	str	r0, [sp, #88]	@ 0x58
 8002f04:	460b      	mov	r3, r1
 8002f06:	4625      	mov	r5, r4
      for(i=k+1;i<l;i++)
 8002f08:	e9cd c804 	strd	ip, r8, [sp, #16]
 8002f0c:	eb06 194a 	add.w	r9, r6, sl, lsl #5
 8002f10:	f8cd a004 	str.w	sl, [sp, #4]
 8002f14:	9607      	str	r6, [sp, #28]
 8002f16:	9508      	str	r5, [sp, #32]
 8002f18:	9306      	str	r3, [sp, #24]
 8002f1a:	46e2      	mov	sl, ip
 8002f1c:	461e      	mov	r6, r3
 8002f1e:	464d      	mov	r5, r9
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8002f20:	f1a5 0420 	sub.w	r4, r5, #32
      for(i=k+1;i<l;i++)
 8002f24:	46d8      	mov	r8, fp
 8002f26:	46b1      	mov	r9, r6
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8002f28:	f859 1b04 	ldr.w	r1, [r9], #4
 8002f2c:	f854 0b04 	ldr.w	r0, [r4], #4
 8002f30:	1a79      	subs	r1, r7, r1
 8002f32:	f001 fcad 	bl	8004890 <multiplicationModuloP>
 8002f36:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002f3e:	181b      	adds	r3, r3, r0
 8002f40:	f848 3b08 	str.w	r3, [r8], #8
 8002f44:	eb42 0201 	adc.w	r2, r2, r1
 8002f48:	42a5      	cmp	r5, r4
 8002f4a:	f848 2c04 	str.w	r2, [r8, #-4]
 8002f4e:	d1eb      	bne.n	8002f28 <invertingOnATF+0xe10>
      for(i=k+1;i<l;i++)
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	f10a 0a01 	add.w	sl, sl, #1
 8002f56:	459a      	cmp	sl, r3
 8002f58:	f106 0620 	add.w	r6, r6, #32
 8002f5c:	f505 75d0 	add.w	r5, r5, #416	@ 0x1a0
 8002f60:	dbde      	blt.n	8002f20 <invertingOnATF+0xe08>
 8002f62:	469a      	mov	sl, r3
    for(l=k+2;l<j;l++)
 8002f64:	9d08      	ldr	r5, [sp, #32]
 8002f66:	f10a 0a01 	add.w	sl, sl, #1
 8002f6a:	45aa      	cmp	sl, r5
 8002f6c:	e9dd c804 	ldrd	ip, r8, [sp, #16]
 8002f70:	e9dd 3606 	ldrd	r3, r6, [sp, #24]
 8002f74:	f10b 0b40 	add.w	fp, fp, #64	@ 0x40
 8002f78:	d1c6      	bne.n	8002f08 <invertingOnATF+0xdf0>
 8002f7a:	e9dd 6e14 	ldrd	r6, lr, [sp, #80]	@ 0x50
 8002f7e:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 8002f82:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8002f84:	4619      	mov	r1, r3
 8002f86:	462c      	mov	r4, r5
 8002f88:	4663      	mov	r3, ip
  for(k=0;k<j-2;k++)
 8002f8a:	4283      	cmp	r3, r0
 8002f8c:	f106 0601 	add.w	r6, r6, #1
 8002f90:	f101 0120 	add.w	r1, r1, #32
 8002f94:	f508 7860 	add.w	r8, r8, #896	@ 0x380
 8002f98:	f509 59b6 	add.w	r9, r9, #5824	@ 0x16c0
 8002f9c:	d1a3      	bne.n	8002ee6 <invertingOnATF+0xdce>
 8002f9e:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
  for(k=1;k<j-1;k++)
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	dd4e      	ble.n	8003046 <invertingOnATF+0xf2e>
 8002fa8:	f50d 63ed 	add.w	r3, sp, #1896	@ 0x768
      for(i=k+1;i<l;i++)
 8002fac:	2601      	movs	r6, #1
 8002fae:	469a      	mov	sl, r3
    for(l=k+1;l<j;l++)
 8002fb0:	9a02      	ldr	r2, [sp, #8]
 8002fb2:	4637      	mov	r7, r6
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	4296      	cmp	r6, r2
 8002fb8:	da3e      	bge.n	8003038 <invertingOnATF+0xf20>
 8002fba:	e9cd 6805 	strd	r6, r8, [sp, #20]
 8002fbe:	00ff      	lsls	r7, r7, #3
 8002fc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8002fc4:	4654      	mov	r4, sl
 8002fc6:	f8cd e020 	str.w	lr, [sp, #32]
      for(i=k+1;i<l;i++)
 8002fca:	46c2      	mov	sl, r8
 8002fcc:	f50d 7b02 	add.w	fp, sp, #520	@ 0x208
 8002fd0:	2500      	movs	r5, #0
 8002fd2:	9601      	str	r6, [sp, #4]
 8002fd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8002fd8:	462e      	mov	r6, r5
 8002fda:	46d8      	mov	r8, fp
 8002fdc:	46d3      	mov	fp, sl
        _MADD_(k*N+l, i*(N*N)+k*N+l, i );
 8002fde:	f1ab 0520 	sub.w	r5, fp, #32
      for(i=k+1;i<l;i++)
 8002fe2:	46a1      	mov	r9, r4
 8002fe4:	46c2      	mov	sl, r8
        _MADD_(k*N+l, i*(N*N)+k*N+l, i );
 8002fe6:	f855 0b04 	ldr.w	r0, [r5], #4
 8002fea:	f85a 1b04 	ldr.w	r1, [sl], #4
 8002fee:	f001 fc4f 	bl	8004890 <multiplicationModuloP>
 8002ff2:	f8d9 3000 	ldr.w	r3, [r9]
 8002ff6:	18c0      	adds	r0, r0, r3
 8002ff8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002ffc:	f849 0b08 	str.w	r0, [r9], #8
 8003000:	eb43 0301 	adc.w	r3, r3, r1
 8003004:	45ab      	cmp	fp, r5
 8003006:	f849 3c04 	str.w	r3, [r9, #-4]
 800300a:	d1ec      	bne.n	8002fe6 <invertingOnATF+0xece>
      for(i=0;i<k;i++)
 800300c:	3608      	adds	r6, #8
 800300e:	42b7      	cmp	r7, r6
 8003010:	f108 0820 	add.w	r8, r8, #32
 8003014:	f50b 5ba9 	add.w	fp, fp, #5408	@ 0x1520
 8003018:	d1e1      	bne.n	8002fde <invertingOnATF+0xec6>
    for(l=k+1;l<j;l++)
 800301a:	9e01      	ldr	r6, [sp, #4]
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003022:	3601      	adds	r6, #1
 8003024:	429e      	cmp	r6, r3
 8003026:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 800302a:	f108 0820 	add.w	r8, r8, #32
 800302e:	d1cc      	bne.n	8002fca <invertingOnATF+0xeb2>
 8003030:	e9dd 6805 	ldrd	r6, r8, [sp, #20]
 8003034:	e9dd ae07 	ldrd	sl, lr, [sp, #28]
  for(k=1;k<j-1;k++)
 8003038:	9b03      	ldr	r3, [sp, #12]
 800303a:	429e      	cmp	r6, r3
 800303c:	f50a 7a60 	add.w	sl, sl, #896	@ 0x380
 8003040:	f508 78e0 	add.w	r8, r8, #448	@ 0x1c0
 8003044:	d1b4      	bne.n	8002fb0 <invertingOnATF+0xe98>
  for(k=0;k<j-1;k++)
 8003046:	2b00      	cmp	r3, #0
 8003048:	f340 80a5 	ble.w	8003196 <invertingOnATF+0x107e>
 800304c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800304e:	015e      	lsls	r6, r3, #5
 8003050:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8003054:	3328      	adds	r3, #40	@ 0x28
 8003056:	441e      	add	r6, r3
 8003058:	f10e 5700 	add.w	r7, lr, #536870912	@ 0x20000000
 800305c:	3640      	adds	r6, #64	@ 0x40
 800305e:	abfa      	add	r3, sp, #1000	@ 0x3e8
 8003060:	3f0e      	subs	r7, #14
 8003062:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 8003066:	4698      	mov	r8, r3
    for(l=k+1;l<j;l++)
 8003068:	220d      	movs	r2, #13
  for(k=0;k<j-1;k++)
 800306a:	4633      	mov	r3, r6
    for(l=k+1;l<j;l++)
 800306c:	2108      	movs	r1, #8
  for(k=0;k<j-1;k++)
 800306e:	2400      	movs	r4, #0
 8003070:	9506      	str	r5, [sp, #24]
 8003072:	4638      	mov	r0, r7
 8003074:	4676      	mov	r6, lr
    for(l=k+1;l<j;l++)
 8003076:	9d02      	ldr	r5, [sp, #8]
 8003078:	3401      	adds	r4, #1
 800307a:	42ac      	cmp	r4, r5
 800307c:	da46      	bge.n	800310c <invertingOnATF+0xff4>
 800307e:	2e0d      	cmp	r6, #13
 8003080:	d044      	beq.n	800310c <invertingOnATF+0xff4>
 8003082:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003086:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800308a:	4405      	add	r5, r0
 800308c:	00ed      	lsls	r5, r5, #3
 800308e:	e9cd 1812 	strd	r1, r8, [sp, #72]	@ 0x48
 8003092:	9505      	str	r5, [sp, #20]
 8003094:	46c3      	mov	fp, r8
 8003096:	9407      	str	r4, [sp, #28]
 8003098:	9208      	str	r2, [sp, #32]
 800309a:	4691      	mov	r9, r2
 800309c:	460d      	mov	r5, r1
 800309e:	9604      	str	r6, [sp, #16]
 80030a0:	9014      	str	r0, [sp, #80]	@ 0x50
 80030a2:	4698      	mov	r8, r3
  for(k=0;k<j-1;k++)
 80030a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80030a8:	9501      	str	r5, [sp, #4]
 80030aa:	eb08 1749 	add.w	r7, r8, r9, lsl #5
 80030ae:	463e      	mov	r6, r7
 80030b0:	4655      	mov	r5, sl
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 80030b2:	ab82      	add	r3, sp, #520	@ 0x208
 80030b4:	f1a6 0720 	sub.w	r7, r6, #32
 80030b8:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
  for(k=0;k<j-1;k++)
 80030bc:	465c      	mov	r4, fp
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 80030be:	f857 0b04 	ldr.w	r0, [r7], #4
 80030c2:	f85a 1b04 	ldr.w	r1, [sl], #4
 80030c6:	f001 fbe3 	bl	8004890 <multiplicationModuloP>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	18c0      	adds	r0, r0, r3
 80030ce:	6863      	ldr	r3, [r4, #4]
 80030d0:	f844 0b08 	str.w	r0, [r4], #8
 80030d4:	eb43 0301 	adc.w	r3, r3, r1
 80030d8:	42be      	cmp	r6, r7
 80030da:	f844 3c04 	str.w	r3, [r4, #-4]
 80030de:	d1ee      	bne.n	80030be <invertingOnATF+0xfa6>
      for(i=j+1;i<N;i++)
 80030e0:	3501      	adds	r5, #1
 80030e2:	2d0d      	cmp	r5, #13
 80030e4:	f106 0620 	add.w	r6, r6, #32
 80030e8:	d1e3      	bne.n	80030b2 <invertingOnATF+0xf9a>
    for(l=k+1;l<j;l++)
 80030ea:	9d01      	ldr	r5, [sp, #4]
 80030ec:	9b05      	ldr	r3, [sp, #20]
 80030ee:	3508      	adds	r5, #8
 80030f0:	42ab      	cmp	r3, r5
 80030f2:	f10b 0b40 	add.w	fp, fp, #64	@ 0x40
 80030f6:	f109 090d 	add.w	r9, r9, #13
 80030fa:	d1d3      	bne.n	80030a4 <invertingOnATF+0xf8c>
 80030fc:	e9dd 4207 	ldrd	r4, r2, [sp, #28]
 8003100:	4643      	mov	r3, r8
 8003102:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003104:	9e04      	ldr	r6, [sp, #16]
 8003106:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003108:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
  for(k=0;k<j-1;k++)
 800310c:	9d03      	ldr	r5, [sp, #12]
 800310e:	42ac      	cmp	r4, r5
 8003110:	f508 7860 	add.w	r8, r8, #896	@ 0x380
 8003114:	f101 0170 	add.w	r1, r1, #112	@ 0x70
 8003118:	f102 02b6 	add.w	r2, r2, #182	@ 0xb6
 800311c:	d1ab      	bne.n	8003076 <invertingOnATF+0xf5e>
 800311e:	9d06      	ldr	r5, [sp, #24]
 8003120:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8003124:	3560      	adds	r5, #96	@ 0x60
 8003126:	f50d 6385 	add.w	r3, sp, #1064	@ 0x428
 800312a:	2208      	movs	r2, #8
  for(k=0; k<j-1; k++)
 800312c:	2400      	movs	r4, #0
 800312e:	469a      	mov	sl, r3
 8003130:	4626      	mov	r6, r4
 8003132:	462b      	mov	r3, r5
 8003134:	4615      	mov	r5, r2
    for(l=k+1; l<j; l++)
 8003136:	9a02      	ldr	r2, [sp, #8]
 8003138:	3601      	adds	r6, #1
 800313a:	4296      	cmp	r6, r2
 800313c:	da20      	bge.n	8003180 <invertingOnATF+0x1068>
 800313e:	46ab      	mov	fp, r5
 8003140:	9501      	str	r5, [sp, #4]
 8003142:	9604      	str	r6, [sp, #16]
 8003144:	461d      	mov	r5, r3
 8003146:	4656      	mov	r6, sl
 8003148:	9305      	str	r3, [sp, #20]
 800314a:	46d8      	mov	r8, fp
      _MOD_RED_(k*(N*N)+l*N+j, k*N+l);
 800314c:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 8003150:	3328      	adds	r3, #40	@ 0x28
 8003152:	f1a6 0740 	sub.w	r7, r6, #64	@ 0x40
 8003156:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 800315a:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800315e:	f001 fbab 	bl	80048b8 <reductionModuloP>
 8003162:	42b7      	cmp	r7, r6
 8003164:	f844 0b04 	str.w	r0, [r4], #4
 8003168:	d1f7      	bne.n	800315a <invertingOnATF+0x1042>
    for(l=k+1; l<j; l++)
 800316a:	f108 0808 	add.w	r8, r8, #8
 800316e:	45c8      	cmp	r8, r9
 8003170:	f105 0568 	add.w	r5, r5, #104	@ 0x68
 8003174:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8003178:	d1e8      	bne.n	800314c <invertingOnATF+0x1034>
 800317a:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
 800317e:	9d01      	ldr	r5, [sp, #4]
  for(k=0; k<j-1; k++)
 8003180:	9a03      	ldr	r2, [sp, #12]
 8003182:	4296      	cmp	r6, r2
 8003184:	f109 0968 	add.w	r9, r9, #104	@ 0x68
 8003188:	f105 0570 	add.w	r5, r5, #112	@ 0x70
 800318c:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8003190:	f50a 7a60 	add.w	sl, sl, #896	@ 0x380
 8003194:	d1cf      	bne.n	8003136 <invertingOnATF+0x101e>
  for(j=N-1;j>=0;j--){
 8003196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003198:	3b01      	subs	r3, #1
 800319a:	9309      	str	r3, [sp, #36]	@ 0x24
 800319c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800319e:	3b08      	subs	r3, #8
 80031a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80031a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80031a4:	3b20      	subs	r3, #32
 80031a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80031a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031aa:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80031ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80031b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031b2:	3b40      	subs	r3, #64	@ 0x40
 80031b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80031b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80031b8:	3b20      	subs	r3, #32
 80031ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80031bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80031be:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80031c4:	9b02      	ldr	r3, [sp, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80f6 	beq.w	80033b8 <invertingOnATF+0x12a0>
 80031cc:	469e      	mov	lr, r3
 80031ce:	f7ff ba5e 	b.w	800268e <invertingOnATF+0x576>
  for(k=1;k<j-1;k++)
 80031d2:	2a01      	cmp	r2, #1
 80031d4:	f43f af3c 	beq.w	8003050 <invertingOnATF+0xf38>
 80031d8:	f50d 5337 	add.w	r3, sp, #11712	@ 0x2dc0
 80031dc:	3328      	adds	r3, #40	@ 0x28
 80031de:	f503 7800 	add.w	r8, r3, #512	@ 0x200
 80031e2:	e6e1      	b.n	8002fa8 <invertingOnATF+0xe90>
  for(k=j+1;k<N-2;k++)
 80031e4:	f1be 0f0a 	cmp.w	lr, #10
 80031e8:	f63f ad7f 	bhi.w	8002cea <invertingOnATF+0xbd2>
 80031ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031ee:	f503 5537 	add.w	r5, r3, #11712	@ 0x2dc0
    for(l=k+1;l<N;l++)
 80031f2:	4674      	mov	r4, lr
 80031f4:	f8cd 8010 	str.w	r8, [sp, #16]
    for(l=k+1;l<N-1;l++)
 80031f8:	3401      	adds	r4, #1
 80031fa:	f44f 63b7 	mov.w	r3, #1464	@ 0x5b8
 80031fe:	fb03 f704 	mul.w	r7, r3, r4
 8003202:	f5a7 67a8 	sub.w	r7, r7, #1344	@ 0x540
 8003206:	46aa      	mov	sl, r5
 8003208:	9405      	str	r4, [sp, #20]
 800320a:	46a1      	mov	r9, r4
 800320c:	9506      	str	r5, [sp, #24]
 800320e:	463b      	mov	r3, r7
 8003210:	f8cd e01c 	str.w	lr, [sp, #28]
      for(i=l+1;i<N;i++)
 8003214:	f109 0901 	add.w	r9, r9, #1
 8003218:	eb0b 0683 	add.w	r6, fp, r3, lsl #2
 800321c:	464d      	mov	r5, r9
 800321e:	9301      	str	r3, [sp, #4]
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8003220:	ab82      	add	r3, sp, #520	@ 0x208
 8003222:	f1a6 0720 	sub.w	r7, r6, #32
 8003226:	eb03 1845 	add.w	r8, r3, r5, lsl #5
    for(l=k+1;l<N-1;l++)
 800322a:	4654      	mov	r4, sl
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 800322c:	f857 0b04 	ldr.w	r0, [r7], #4
 8003230:	f858 1b04 	ldr.w	r1, [r8], #4
 8003234:	f001 fb2c 	bl	8004890 <multiplicationModuloP>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	18c0      	adds	r0, r0, r3
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	f844 0b08 	str.w	r0, [r4], #8
 8003242:	eb43 0301 	adc.w	r3, r3, r1
 8003246:	42be      	cmp	r6, r7
 8003248:	f844 3c04 	str.w	r3, [r4, #-4]
 800324c:	d1ee      	bne.n	800322c <invertingOnATF+0x1114>
      for(i=l+1;i<N;i++)
 800324e:	3501      	adds	r5, #1
 8003250:	2d0d      	cmp	r5, #13
 8003252:	f106 0620 	add.w	r6, r6, #32
 8003256:	d1e3      	bne.n	8003220 <invertingOnATF+0x1108>
    for(l=k+1;l<N-1;l++)
 8003258:	9b01      	ldr	r3, [sp, #4]
 800325a:	f1b9 0f0c 	cmp.w	r9, #12
 800325e:	f10a 0a40 	add.w	sl, sl, #64	@ 0x40
 8003262:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8003266:	d1d5      	bne.n	8003214 <invertingOnATF+0x10fc>
  for(k=j+1;k<N-2;k++)
 8003268:	e9dd 4505 	ldrd	r4, r5, [sp, #20]
 800326c:	2c0b      	cmp	r4, #11
 800326e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8003272:	f505 7560 	add.w	r5, r5, #896	@ 0x380
 8003276:	d1bf      	bne.n	80031f8 <invertingOnATF+0x10e0>
  for(k=j+1;k<N-2;k++)
 8003278:	f1be 0f0a 	cmp.w	lr, #10
 800327c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003280:	f63f ad33 	bhi.w	8002cea <invertingOnATF+0xbd2>
 8003284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8003286:	f8cd e048 	str.w	lr, [sp, #72]	@ 0x48
 800328a:	f503 5638 	add.w	r6, r3, #11776	@ 0x2e00
 800328e:	f06f 0704 	mvn.w	r7, #4
 8003292:	4675      	mov	r5, lr
 8003294:	4642      	mov	r2, r8
    for(l=k+2;l<N;l++)
 8003296:	f50d 5137 	add.w	r1, sp, #11712	@ 0x2dc0
 800329a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800329e:	3128      	adds	r1, #40	@ 0x28
 80032a0:	eb01 1383 	add.w	r3, r1, r3, lsl #6
 80032a4:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80032a8:	1cac      	adds	r4, r5, #2
 80032aa:	9308      	str	r3, [sp, #32]
      for(i=k+1;i<l;i++)
 80032ac:	3501      	adds	r5, #1
 80032ae:	ab82      	add	r3, sp, #520	@ 0x208
 80032b0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80032b4:	46b0      	mov	r8, r6
 80032b6:	9307      	str	r3, [sp, #28]
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	e9cd 2613 	strd	r2, r6, [sp, #76]	@ 0x4c
 80032be:	9505      	str	r5, [sp, #20]
 80032c0:	9306      	str	r3, [sp, #24]
 80032c2:	4626      	mov	r6, r4
 80032c4:	4645      	mov	r5, r8
 80032c6:	9b05      	ldr	r3, [sp, #20]
 80032c8:	429e      	cmp	r6, r3
 80032ca:	dd2b      	ble.n	8003324 <invertingOnATF+0x120c>
 80032cc:	9b08      	ldr	r3, [sp, #32]
 80032ce:	9604      	str	r6, [sp, #16]
 80032d0:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 80032d4:	eb03 1446 	add.w	r4, r3, r6, lsl #5
 80032d8:	00f3      	lsls	r3, r6, #3
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	4626      	mov	r6, r4
 80032de:	46d9      	mov	r9, fp
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 80032e0:	f1a6 0420 	sub.w	r4, r6, #32
      for(i=k+1;i<l;i++)
 80032e4:	46aa      	mov	sl, r5
 80032e6:	46c3      	mov	fp, r8
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 80032e8:	f85b 1b04 	ldr.w	r1, [fp], #4
 80032ec:	f854 0b04 	ldr.w	r0, [r4], #4
 80032f0:	1a79      	subs	r1, r7, r1
 80032f2:	f001 facd 	bl	8004890 <multiplicationModuloP>
 80032f6:	f8da 3000 	ldr.w	r3, [sl]
 80032fa:	18c0      	adds	r0, r0, r3
 80032fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003300:	f84a 0b08 	str.w	r0, [sl], #8
 8003304:	eb43 0301 	adc.w	r3, r3, r1
 8003308:	42a6      	cmp	r6, r4
 800330a:	f84a 3c04 	str.w	r3, [sl, #-4]
 800330e:	d1eb      	bne.n	80032e8 <invertingOnATF+0x11d0>
      for(i=k+1;i<l;i++)
 8003310:	9b01      	ldr	r3, [sp, #4]
 8003312:	f109 0908 	add.w	r9, r9, #8
 8003316:	454b      	cmp	r3, r9
 8003318:	f108 0820 	add.w	r8, r8, #32
 800331c:	f506 76d0 	add.w	r6, r6, #416	@ 0x1a0
 8003320:	d1de      	bne.n	80032e0 <invertingOnATF+0x11c8>
 8003322:	9e04      	ldr	r6, [sp, #16]
    for(l=k+2;l<N;l++)
 8003324:	3601      	adds	r6, #1
 8003326:	2e0d      	cmp	r6, #13
 8003328:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 800332c:	d1cb      	bne.n	80032c6 <invertingOnATF+0x11ae>
  for(k=j+1;k<N-2;k++)
 800332e:	e9dd 2613 	ldrd	r2, r6, [sp, #76]	@ 0x4c
 8003332:	9d05      	ldr	r5, [sp, #20]
 8003334:	2d0b      	cmp	r5, #11
 8003336:	f506 7660 	add.w	r6, r6, #896	@ 0x380
 800333a:	f102 020d 	add.w	r2, r2, #13
 800333e:	d1aa      	bne.n	8003296 <invertingOnATF+0x117e>
  for(k=j+2;k<N-1;k++)
 8003340:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 8003344:	f10e 0301 	add.w	r3, lr, #1
 8003348:	4573      	cmp	r3, lr
 800334a:	f300 8081 	bgt.w	8003450 <invertingOnATF+0x1338>
 800334e:	4672      	mov	r2, lr
 8003350:	2a0b      	cmp	r2, #11
 8003352:	bfa8      	it	ge
 8003354:	220b      	movge	r2, #11
    for(l=k+1;l<N;l++)
 8003356:	f10e 0302 	add.w	r3, lr, #2
  for(k=j+2;k<N-1;k++)
 800335a:	429a      	cmp	r2, r3
 800335c:	db75      	blt.n	800344a <invertingOnATF+0x1332>
    for(l=k+1;l<N;l++)
 800335e:	f10e 0303 	add.w	r3, lr, #3
  for(k=j+2;k<N-1;k++)
 8003362:	4293      	cmp	r3, r2
 8003364:	f300 80e7 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 8003368:	f10e 0304 	add.w	r3, lr, #4
  for(k=j+2;k<N-1;k++)
 800336c:	4293      	cmp	r3, r2
 800336e:	f300 80e2 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 8003372:	f10e 0305 	add.w	r3, lr, #5
  for(k=j+2;k<N-1;k++)
 8003376:	4293      	cmp	r3, r2
 8003378:	f300 80dd 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 800337c:	f10e 0306 	add.w	r3, lr, #6
  for(k=j+2;k<N-1;k++)
 8003380:	4293      	cmp	r3, r2
 8003382:	f300 80d8 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 8003386:	f10e 0307 	add.w	r3, lr, #7
  for(k=j+2;k<N-1;k++)
 800338a:	4293      	cmp	r3, r2
 800338c:	f300 80d3 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 8003390:	f10e 0308 	add.w	r3, lr, #8
  for(k=j+2;k<N-1;k++)
 8003394:	4293      	cmp	r3, r2
 8003396:	f300 80ce 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 800339a:	f10e 0309 	add.w	r3, lr, #9
  for(k=j+2;k<N-1;k++)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f300 80c9 	bgt.w	8003536 <invertingOnATF+0x141e>
    for(l=k+1;l<N;l++)
 80033a4:	f10e 030a 	add.w	r3, lr, #10
  for(k=j+2;k<N-1;k++)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	f300 80c4 	bgt.w	8003536 <invertingOnATF+0x141e>
  for(k=j+1; k<N-1; k++)
 80033ae:	f1be 0f0b 	cmp.w	lr, #11
 80033b2:	f67f ac9a 	bls.w	8002cea <invertingOnATF+0xbd2>
 80033b6:	e4d2      	b.n	8002d5e <invertingOnATF+0xc46>
  int index=0;
 80033b8:	461f      	mov	r7, r3
 80033ba:	f50d 533a 	add.w	r3, sp, #11904	@ 0x2e80
 80033be:	3308      	adds	r3, #8
 80033c0:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 80033c4:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
 80033c8:	463e      	mov	r6, r7
 80033ca:	46a2      	mov	sl, r4
    for(i=0; i<N-2; i++)
 80033cc:	2500      	movs	r5, #0
 80033ce:	f8cd a004 	str.w	sl, [sp, #4]
 80033d2:	4654      	mov	r4, sl
 80033d4:	9602      	str	r6, [sp, #8]
      for(j=i+1; j<N-1; j++)
 80033d6:	3501      	adds	r5, #1
 80033d8:	e9cd 4503 	strd	r4, r5, [sp, #12]
 80033dc:	463b      	mov	r3, r7
 80033de:	4626      	mov	r6, r4
 80033e0:	462f      	mov	r7, r5
 80033e2:	469a      	mov	sl, r3
	      for(k=j+1; k<N; k++){
 80033e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033e6:	46bb      	mov	fp, r7
 80033e8:	eb0a 0409 	add.w	r4, sl, r9
 80033ec:	3701      	adds	r7, #1
 80033ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80033f2:	4635      	mov	r5, r6
 80033f4:	46b8      	mov	r8, r7
          catf_out[index]=reductionStrict(atf_in[(i*(N*N)+j*N+k)*vec_size+r]);
 80033f6:	f855 0f20 	ldr.w	r0, [r5, #32]!
 80033fa:	2100      	movs	r1, #0
 80033fc:	f001 fa72 	bl	80048e4 <reductionStrict>
	      for(k=j+1; k<N; k++){
 8003400:	f108 0801 	add.w	r8, r8, #1
 8003404:	f1b8 0f0d 	cmp.w	r8, #13
          catf_out[index]=reductionStrict(atf_in[(i*(N*N)+j*N+k)*vec_size+r]);
 8003408:	f844 0f04 	str.w	r0, [r4, #4]!
	      for(k=j+1; k<N; k++){
 800340c:	d1f3      	bne.n	80033f6 <invertingOnATF+0x12de>
          index++;
 800340e:	f10a 010c 	add.w	r1, sl, #12
      for(j=i+1; j<N-1; j++)
 8003412:	2f0c      	cmp	r7, #12
          index++;
 8003414:	eba1 0a0b 	sub.w	sl, r1, fp
      for(j=i+1; j<N-1; j++)
 8003418:	f506 76e0 	add.w	r6, r6, #448	@ 0x1c0
 800341c:	d1e2      	bne.n	80033e4 <invertingOnATF+0x12cc>
    for(i=0; i<N-2; i++)
 800341e:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
 8003422:	2d0b      	cmp	r5, #11
 8003424:	4657      	mov	r7, sl
 8003426:	f504 54b7 	add.w	r4, r4, #5856	@ 0x16e0
 800342a:	d1d4      	bne.n	80033d6 <invertingOnATF+0x12be>
  for(r=0; r<nb_atf; r++)
 800342c:	e9dd a601 	ldrd	sl, r6, [sp, #4]
 8003430:	3601      	adds	r6, #1
 8003432:	2e07      	cmp	r6, #7
 8003434:	f10a 0a04 	add.w	sl, sl, #4
 8003438:	d1c8      	bne.n	80033cc <invertingOnATF+0x12b4>
  /* compress many to many: output is NON-VECTORIZED (important because of challenge selection within pk) */
  compressATFS_32_to_32_vec(atf_out, atf, C, NB32_VEC_C);

  /* free */

}
 800343a:	f50d 3da0 	add.w	sp, sp, #81920	@ 0x14000
 800343e:	b023      	add	sp, #140	@ 0x8c
 8003440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003444:	230b      	movs	r3, #11
 8003446:	9303      	str	r3, [sp, #12]
 8003448:	e489      	b.n	8002d5e <invertingOnATF+0xc46>
 800344a:	2b0c      	cmp	r3, #12
 800344c:	f43f ac4d 	beq.w	8002cea <invertingOnATF+0xbd2>
 8003450:	461e      	mov	r6, r3
 8003452:	aaea      	add	r2, sp, #936	@ 0x3a8
 8003454:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003458:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 800345c:	f50d 5137 	add.w	r1, sp, #11712	@ 0x2dc0
 8003460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003462:	f103 0740 	add.w	r7, r3, #64	@ 0x40
 8003466:	3128      	adds	r1, #40	@ 0x28
 8003468:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800346c:	fb03 1902 	mla	r9, r3, r2, r1
 8003470:	ab82      	add	r3, sp, #520	@ 0x208
 8003472:	eb03 134e 	add.w	r3, r3, lr, lsl #5
 8003476:	4634      	mov	r4, r6
 8003478:	46b8      	mov	r8, r7
    for(l=k+1;l<N;l++)
 800347a:	4627      	mov	r7, r4
 800347c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8003480:	3401      	adds	r4, #1
 8003482:	fb02 9207 	mla	r2, r2, r7, r9
 8003486:	4646      	mov	r6, r8
 8003488:	e9cd 4804 	strd	r4, r8, [sp, #16]
 800348c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003490:	46a0      	mov	r8, r4
 8003492:	f502 52aa 	add.w	r2, r2, #5440	@ 0x1540
 8003496:	463c      	mov	r4, r7
 8003498:	4699      	mov	r9, r3
 800349a:	4637      	mov	r7, r6
      for(i=j+1;i<k;i++)
 800349c:	eb02 1b48 	add.w	fp, r2, r8, lsl #5
    for(l=k+1;l<N;l++)
 80034a0:	e9cd e907 	strd	lr, r9, [sp, #28]
 80034a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80034a8:	465e      	mov	r6, fp
 80034aa:	46c8      	mov	r8, r9
 80034ac:	4625      	mov	r5, r4
 80034ae:	46f1      	mov	r9, lr
 80034b0:	9212      	str	r2, [sp, #72]	@ 0x48
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 80034b2:	f1a6 0420 	sub.w	r4, r6, #32
    for(l=k+1;l<N;l++)
 80034b6:	46ba      	mov	sl, r7
 80034b8:	46c3      	mov	fp, r8
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 80034ba:	f854 0b04 	ldr.w	r0, [r4], #4
 80034be:	f85b 1b04 	ldr.w	r1, [fp], #4
 80034c2:	f001 f9e5 	bl	8004890 <multiplicationModuloP>
 80034c6:	f8da 3000 	ldr.w	r3, [sl]
 80034ca:	f8da 2004 	ldr.w	r2, [sl, #4]
 80034ce:	181b      	adds	r3, r3, r0
 80034d0:	f84a 3b08 	str.w	r3, [sl], #8
 80034d4:	eb42 0201 	adc.w	r2, r2, r1
 80034d8:	42a6      	cmp	r6, r4
 80034da:	f84a 2c04 	str.w	r2, [sl, #-4]
 80034de:	d1ec      	bne.n	80034ba <invertingOnATF+0x13a2>
      for(i=j+1;i<k;i++)
 80034e0:	f109 0901 	add.w	r9, r9, #1
 80034e4:	454d      	cmp	r5, r9
 80034e6:	f108 0820 	add.w	r8, r8, #32
 80034ea:	f506 56a9 	add.w	r6, r6, #5408	@ 0x1520
 80034ee:	dce0      	bgt.n	80034b2 <invertingOnATF+0x139a>
    for(l=k+1;l<N;l++)
 80034f0:	e9dd 8e06 	ldrd	r8, lr, [sp, #24]
 80034f4:	f108 0801 	add.w	r8, r8, #1
 80034f8:	f1b8 0f0d 	cmp.w	r8, #13
 80034fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003500:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003502:	462c      	mov	r4, r5
 8003504:	f107 0740 	add.w	r7, r7, #64	@ 0x40
 8003508:	d1c8      	bne.n	800349c <invertingOnATF+0x1384>
  for(k=j+2;k<N-1;k++)
 800350a:	e9dd 4804 	ldrd	r4, r8, [sp, #16]
 800350e:	2c0c      	cmp	r4, #12
 8003510:	464b      	mov	r3, r9
 8003512:	f508 7860 	add.w	r8, r8, #896	@ 0x380
 8003516:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800351a:	d1ae      	bne.n	800347a <invertingOnATF+0x1362>
 800351c:	e747      	b.n	80033ae <invertingOnATF+0x1296>
 800351e:	2d0b      	cmp	r5, #11
 8003520:	f73f ac1d 	bgt.w	8002d5e <invertingOnATF+0xc46>
 8003524:	4652      	mov	r2, sl
 8003526:	2a0b      	cmp	r2, #11
 8003528:	bfa8      	it	ge
 800352a:	220b      	movge	r2, #11
    for(l=k+1;l<N;l++)
 800352c:	f10a 0302 	add.w	r3, sl, #2
  for(k=j+2;k<N-1;k++)
 8003530:	4293      	cmp	r3, r2
 8003532:	f77f af14 	ble.w	800335e <invertingOnATF+0x1246>
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d18a      	bne.n	8003450 <invertingOnATF+0x1338>
 800353a:	e738      	b.n	80033ae <invertingOnATF+0x1296>
 800353c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800353e:	f503 7860 	add.w	r8, r3, #896	@ 0x380
 8003542:	f7ff bae3 	b.w	8002b0c <invertingOnATF+0x9f4>
 8003546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003548:	f503 79c0 	add.w	r9, r3, #384	@ 0x180
 800354c:	f1aa 0302 	sub.w	r3, sl, #2
 8003550:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	f7ff bb1e 	b.w	8002b96 <invertingOnATF+0xa7e>
  for(k=0;k<j-2;k++)
 800355a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800355c:	2b02      	cmp	r3, #2
 800355e:	f63f ac4d 	bhi.w	8002dfc <invertingOnATF+0xce4>
 8003562:	e618      	b.n	8003196 <invertingOnATF+0x107e>

08003564 <actingOnATFS>:
/* NOTE: vec_size should be the lowest number of elements such that it is divisible by vectors and contains n_atf */
__attribute__((section(".sdram"))) uint32_t atfs_actingOnATFS[N*N*N*NB32_VEC_ROUND];
__attribute__((section(".sdram"))) uint64_t buf_actingOnATFS[N*N*NB32_VEC_ROUND];
void
actingOnATFS(uint32_t *atf_out, const uint32_t *atf_in, const uint32_t *columns)
{
 8003564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003568:	b09b      	sub	sp, #108	@ 0x6c
 800356a:	4613      	mov	r3, r2
 800356c:	460c      	mov	r4, r1

  /* full 32 bits */
  int j;

  // is this necessary?????????????????
  for(int i = 0 ; i < N*N*N*NB32_VEC_ROUND; i++) atfs_actingOnATFS[i] = 0;
 800356e:	4ab1      	ldr	r2, [pc, #708]	@ (8003834 <actingOnATFS+0x2d0>)
{
 8003570:	900e      	str	r0, [sp, #56]	@ 0x38
  for(int i = 0 ; i < N*N*N*NB32_VEC_ROUND; i++) atfs_actingOnATFS[i] = 0;
 8003572:	2100      	movs	r1, #0
 8003574:	48b0      	ldr	r0, [pc, #704]	@ (8003838 <actingOnATFS+0x2d4>)
{
 8003576:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003578:	9402      	str	r4, [sp, #8]
  int index=0;
 800357a:	2700      	movs	r7, #0
  for(int i = 0 ; i < N*N*N*NB32_VEC_ROUND; i++) atfs_actingOnATFS[i] = 0;
 800357c:	f008 ff7c 	bl	800c478 <memset>

  for(int i = 0 ; i < N*N*NB32_VEC_ROUND; i++) buf_actingOnATFS[i] = 0;
 8003580:	2100      	movs	r1, #0
 8003582:	4aae      	ldr	r2, [pc, #696]	@ (800383c <actingOnATFS+0x2d8>)
 8003584:	48ae      	ldr	r0, [pc, #696]	@ (8003840 <actingOnATFS+0x2dc>)
 8003586:	f008 ff77 	bl	800c478 <memset>
 800358a:	f44f 699a 	mov.w	r9, #1232	@ 0x4d0
 800358e:	250d      	movs	r5, #13
 8003590:	2158      	movs	r1, #88	@ 0x58
  for(i=0; i<N-2; i++)
 8003592:	463e      	mov	r6, r7
 8003594:	f44f 7bb0 	mov.w	fp, #352	@ 0x160
 8003598:	f643 6ae8 	movw	sl, #16104	@ 0x3ee8
    for(j=i+1; j<N-1; j++)
 800359c:	3601      	adds	r6, #1
 800359e:	9601      	str	r6, [sp, #4]
 80035a0:	9603      	str	r6, [sp, #12]
 80035a2:	4628      	mov	r0, r5
 80035a4:	464c      	mov	r4, r9
 80035a6:	46ae      	mov	lr, r5
 80035a8:	460a      	mov	r2, r1
 80035aa:	4688      	mov	r8, r1
 80035ac:	462e      	mov	r6, r5
 80035ae:	f8cd 9010 	str.w	r9, [sp, #16]
      for(k=j+1; k<N; k++){
 80035b2:	9b01      	ldr	r3, [sp, #4]
 80035b4:	49a3      	ldr	r1, [pc, #652]	@ (8003844 <actingOnATFS+0x2e0>)
 80035b6:	9407      	str	r4, [sp, #28]
 80035b8:	3301      	adds	r3, #1
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	fb0b f30e 	mul.w	r3, fp, lr
 80035c0:	fb01 3300 	mla	r3, r1, r0, r3
 80035c4:	f5a3 79b2 	sub.w	r9, r3, #356	@ 0x164
 80035c8:	9b02      	ldr	r3, [sp, #8]
 80035ca:	1c7d      	adds	r5, r7, #1
 80035cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80035d0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80035d4:	46bc      	mov	ip, r7
 80035d6:	e9cd 2e05 	strd	r2, lr, [sp, #20]
 80035da:	1a9f      	subs	r7, r3, r2
 80035dc:	4b9a      	ldr	r3, [pc, #616]	@ (8003848 <actingOnATFS+0x2e4>)
 80035de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	      for(r=0; r<vec_size; r++)
 80035e2:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 80035e6:	42aa      	cmp	r2, r5
 80035e8:	f000 85c2 	beq.w	8004170 <actingOnATFS+0xc0c>
 80035ec:	1f29      	subs	r1, r5, #4
 80035ee:	4686      	mov	lr, r0
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 80035f0:	e9d1 4000 	ldrd	r4, r0, [r1]
 80035f4:	e9c2 4000 	strd	r4, r0, [r2]
 80035f8:	3208      	adds	r2, #8
 80035fa:	429a      	cmp	r2, r3
 80035fc:	f101 0108 	add.w	r1, r1, #8
 8003600:	d1f6      	bne.n	80035f0 <actingOnATFS+0x8c>
 8003602:	4670      	mov	r0, lr
	      index+=vec_size;
 8003604:	f10c 0c58 	add.w	ip, ip, #88	@ 0x58
      for(k=j+1; k<N; k++){
 8003608:	45bc      	cmp	ip, r7
 800360a:	f505 75b0 	add.w	r5, r5, #352	@ 0x160
 800360e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003612:	d1e6      	bne.n	80035e2 <actingOnATFS+0x7e>
    for(j=i+1; j<N-1; j++)
 8003614:	e9dd 2e05 	ldrd	r2, lr, [sp, #20]
 8003618:	9b01      	ldr	r3, [sp, #4]
 800361a:	9c07      	ldr	r4, [sp, #28]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003622:	f10e 0e0d 	add.w	lr, lr, #13
 8003626:	f504 649a 	add.w	r4, r4, #1232	@ 0x4d0
 800362a:	f100 000d 	add.w	r0, r0, #13
 800362e:	d1c0      	bne.n	80035b2 <actingOnATFS+0x4e>
  for(i=0; i<N-2; i++)
 8003630:	4635      	mov	r5, r6
 8003632:	e9dd 6903 	ldrd	r6, r9, [sp, #12]
 8003636:	4641      	mov	r1, r8
 8003638:	2e0b      	cmp	r6, #11
 800363a:	f101 0158 	add.w	r1, r1, #88	@ 0x58
 800363e:	f105 05b6 	add.w	r5, r5, #182	@ 0xb6
 8003642:	44d1      	add	r9, sl
 8003644:	d1aa      	bne.n	800359c <actingOnATFS+0x38>
 8003646:	4b7c      	ldr	r3, [pc, #496]	@ (8003838 <actingOnATFS+0x2d4>)
 8003648:	9312      	str	r3, [sp, #72]	@ 0x48
 800364a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800364c:	930d      	str	r3, [sp, #52]	@ 0x34
 800364e:	1f1a      	subs	r2, r3, #4
 8003650:	f04f 0c00 	mov.w	ip, #0
 8003654:	9210      	str	r2, [sp, #64]	@ 0x40
 8003656:	4a7a      	ldr	r2, [pc, #488]	@ (8003840 <actingOnATFS+0x2dc>)
 8003658:	920f      	str	r2, [sp, #60]	@ 0x3c
 800365a:	9211      	str	r2, [sp, #68]	@ 0x44
 800365c:	f8cd c010 	str.w	ip, [sp, #16]


  /* the entry is vectorized already thus we use vec_size */
  decompressATFS_32_to_32_vecpacks(atfs_actingOnATFS, atf_in, NB32_VEC_ROUND);
  for(j=0;j<N;j++)
 8003660:	46e6      	mov	lr, ip
 8003662:	f8cd c008 	str.w	ip, [sp, #8]
  for(k=0; k<j; k++)
 8003666:	9b04      	ldr	r3, [sp, #16]
 8003668:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
  for(k=j+1; k<N-1; k++)
 800366c:	f10e 0e01 	add.w	lr, lr, #1
  for(k=0; k<j; k++)
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 85a9 	beq.w	80041c8 <actingOnATFS+0xc64>
 8003676:	f1be 0f0d 	cmp.w	lr, #13
 800367a:	f000 8594 	beq.w	80041a6 <actingOnATFS+0xc42>
 800367e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8003682:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8003686:	f1a3 020d 	sub.w	r2, r3, #13
 800368a:	9b02      	ldr	r3, [sp, #8]
 800368c:	496c      	ldr	r1, [pc, #432]	@ (8003840 <actingOnATFS+0x2dc>)
 800368e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003690:	3358      	adds	r3, #88	@ 0x58
 8003692:	461c      	mov	r4, r3
 8003694:	930a      	str	r3, [sp, #40]	@ 0x28
 8003696:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003698:	3908      	subs	r1, #8
 800369a:	f503 782f 	add.w	r8, r3, #700	@ 0x2bc
 800369e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80036a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80036a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80036a6:	2300      	movs	r3, #0
 80036a8:	f64e 0b60 	movw	fp, #59488	@ 0xe860
 80036ac:	4625      	mov	r5, r4
 80036ae:	46c2      	mov	sl, r8
 80036b0:	4611      	mov	r1, r2
    for(l=j+1; l<N; l++)
 80036b2:	e9cd 3106 	strd	r3, r1, [sp, #24]
  for(k=0; k<j; k++)
 80036b6:	46a8      	mov	r8, r5
    for(l=j+1; l<N; l++)
 80036b8:	4677      	mov	r7, lr
 80036ba:	f8cd e004 	str.w	lr, [sp, #4]
 80036be:	9503      	str	r5, [sp, #12]
 80036c0:	f8cd a014 	str.w	sl, [sp, #20]
      _MUL_(k*N + l, k*(N*N)+j*N+l, j);
 80036c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036c6:	f5aa 79b0 	sub.w	r9, sl, #352	@ 0x160
 80036ca:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
  for(k=0; k<j; k++)
 80036ce:	4634      	mov	r4, r6
      _MUL_(k*N + l, k*(N*N)+j*N+l, j);
 80036d0:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80036d4:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80036d8:	f001 f8da 	bl	8004890 <multiplicationModuloP>
 80036dc:	45d1      	cmp	r9, sl
 80036de:	e9e5 0102 	strd	r0, r1, [r5, #8]!
 80036e2:	d1f5      	bne.n	80036d0 <actingOnATFS+0x16c>
    for(l=j+1; l<N; l++)
 80036e4:	3701      	adds	r7, #1
 80036e6:	2f0d      	cmp	r7, #13
 80036e8:	f108 0858 	add.w	r8, r8, #88	@ 0x58
 80036ec:	f509 7ab0 	add.w	sl, r9, #352	@ 0x160
 80036f0:	d1e8      	bne.n	80036c4 <actingOnATFS+0x160>
  for(k=0; k<j; k++)
 80036f2:	e9dd a305 	ldrd	sl, r3, [sp, #20]
 80036f6:	9907      	ldr	r1, [sp, #28]
 80036f8:	9d03      	ldr	r5, [sp, #12]
 80036fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80036fe:	330d      	adds	r3, #13
 8003700:	428b      	cmp	r3, r1
 8003702:	f505 658f 	add.w	r5, r5, #1144	@ 0x478
 8003706:	44da      	add	sl, fp
 8003708:	d1d3      	bne.n	80036b2 <actingOnATFS+0x14e>
  for(k=0;k<j-1;k++)
 800370a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800370c:	3b01      	subs	r3, #1
 800370e:	9308      	str	r3, [sp, #32]
 8003710:	f000 86cb 	beq.w	80044aa <actingOnATFS+0xf46>
 8003714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003716:	4848      	ldr	r0, [pc, #288]	@ (8003838 <actingOnATFS+0x2d4>)
 8003718:	9707      	str	r7, [sp, #28]
 800371a:	f503 782e 	add.w	r8, r3, #696	@ 0x2b8
 800371e:	3804      	subs	r0, #4
 8003720:	9b02      	ldr	r3, [sp, #8]
 8003722:	9005      	str	r0, [sp, #20]
 8003724:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003726:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 800372a:	f503 639a 	add.w	r3, r3, #1232	@ 0x4d0
 800372e:	4619      	mov	r1, r3
 8003730:	f04f 0a00 	mov.w	sl, #0
 8003734:	f1a0 0904 	sub.w	r9, r0, #4
 8003738:	4656      	mov	r6, sl
 800373a:	9314      	str	r3, [sp, #80]	@ 0x50
 800373c:	468b      	mov	fp, r1
 800373e:	4643      	mov	r3, r8
 8003740:	46ca      	mov	sl, r9
    for(l=j+1;l<N;l++)
 8003742:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  for(k=0;k<j-1;k++)
 8003744:	3601      	adds	r6, #1
 8003746:	42b2      	cmp	r2, r6
 8003748:	dd3b      	ble.n	80037c2 <actingOnATFS+0x25e>
 800374a:	2258      	movs	r2, #88	@ 0x58
    for(l=j+1;l<N;l++)
 800374c:	e9cd e616 	strd	lr, r6, [sp, #88]	@ 0x58
 8003750:	e9cd 3b18 	strd	r3, fp, [sp, #96]	@ 0x60
 8003754:	fb02 f806 	mul.w	r8, r2, r6
 8003758:	4674      	mov	r4, lr
 800375a:	465d      	mov	r5, fp
 800375c:	461f      	mov	r7, r3
 800375e:	f8cd 8018 	str.w	r8, [sp, #24]
      for(i=k+1;i<j;i++)
 8003762:	9b05      	ldr	r3, [sp, #20]
    for(l=j+1;l<N;l++)
 8003764:	9e06      	ldr	r6, [sp, #24]
 8003766:	9503      	str	r5, [sp, #12]
 8003768:	eb03 0885 	add.w	r8, r3, r5, lsl #2
 800376c:	9401      	str	r4, [sp, #4]
 800376e:	4635      	mov	r5, r6
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 8003770:	eb0a 0685 	add.w	r6, sl, r5, lsl #2
    for(l=j+1;l<N;l++)
 8003774:	463c      	mov	r4, r7
 8003776:	46c1      	mov	r9, r8
 8003778:	f508 7bb0 	add.w	fp, r8, #352	@ 0x160
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 800377c:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8003780:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8003784:	f001 f884 	bl	8004890 <multiplicationModuloP>
 8003788:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800378c:	181b      	adds	r3, r3, r0
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	6863      	ldr	r3, [r4, #4]
 8003792:	eb43 0301 	adc.w	r3, r3, r1
 8003796:	45d9      	cmp	r9, fp
 8003798:	6063      	str	r3, [r4, #4]
 800379a:	d1ef      	bne.n	800377c <actingOnATFS+0x218>
      for(i=k+1;i<j;i++)
 800379c:	9b02      	ldr	r3, [sp, #8]
 800379e:	3558      	adds	r5, #88	@ 0x58
 80037a0:	429d      	cmp	r5, r3
 80037a2:	f508 588f 	add.w	r8, r8, #4576	@ 0x11e0
 80037a6:	d1e3      	bne.n	8003770 <actingOnATFS+0x20c>
    for(l=j+1;l<N;l++)
 80037a8:	9c01      	ldr	r4, [sp, #4]
 80037aa:	9d03      	ldr	r5, [sp, #12]
 80037ac:	3401      	adds	r4, #1
 80037ae:	2c0d      	cmp	r4, #13
 80037b0:	f507 7730 	add.w	r7, r7, #704	@ 0x2c0
 80037b4:	f105 0558 	add.w	r5, r5, #88	@ 0x58
 80037b8:	d1d3      	bne.n	8003762 <actingOnATFS+0x1fe>
 80037ba:	e9dd e616 	ldrd	lr, r6, [sp, #88]	@ 0x58
 80037be:	e9dd 3b18 	ldrd	r3, fp, [sp, #96]	@ 0x60
  for(k=0;k<j-1;k++)
 80037c2:	9a08      	ldr	r2, [sp, #32]
 80037c4:	f50b 5b7a 	add.w	fp, fp, #16000	@ 0x3e80
 80037c8:	42b2      	cmp	r2, r6
 80037ca:	f503 530f 	add.w	r3, r3, #9152	@ 0x23c0
 80037ce:	f10b 0b10 	add.w	fp, fp, #16
 80037d2:	d1b6      	bne.n	8003742 <actingOnATFS+0x1de>
  for(k=1;k<j;k++)
 80037d4:	9a04      	ldr	r2, [sp, #16]
 80037d6:	9e07      	ldr	r6, [sp, #28]
 80037d8:	2a01      	cmp	r2, #1
 80037da:	e9dd 3814 	ldrd	r3, r8, [sp, #80]	@ 0x50
 80037de:	d06d      	beq.n	80038bc <actingOnATFS+0x358>
 80037e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80037e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
      for(i=0;i<k;i++)
 80037e4:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80037e8:	f502 5519 	add.w	r5, r2, #9792	@ 0x2640
 80037ec:	2258      	movs	r2, #88	@ 0x58
 80037ee:	fb02 f20e 	mul.w	r2, r2, lr
 80037f2:	f1a2 0958 	sub.w	r9, r2, #88	@ 0x58
 80037f6:	3904      	subs	r1, #4
 80037f8:	3538      	adds	r5, #56	@ 0x38
  for(k=1;k<j;k++)
 80037fa:	2258      	movs	r2, #88	@ 0x58
 80037fc:	9101      	str	r1, [sp, #4]
      for(i=0;i<k;i++)
 80037fe:	461f      	mov	r7, r3
 8003800:	46ca      	mov	sl, r9
    for(l=j+1;l<N;l++)
 8003802:	e9cd 6e15 	strd	r6, lr, [sp, #84]	@ 0x54
 8003806:	e9cd 7a18 	strd	r7, sl, [sp, #96]	@ 0x60
  for(k=1;k<j;k++)
 800380a:	46ab      	mov	fp, r5
 800380c:	9517      	str	r5, [sp, #92]	@ 0x5c
    for(l=j+1;l<N;l++)
 800380e:	4674      	mov	r4, lr
 8003810:	9203      	str	r2, [sp, #12]
 8003812:	463d      	mov	r5, r7
 8003814:	46d8      	mov	r8, fp
      for(i=0;i<k;i++)
 8003816:	9b05      	ldr	r3, [sp, #20]
 8003818:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800381c:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8003820:	e9cd 4506 	strd	r4, r5, [sp, #24]
  for(k=1;k<j;k++)
 8003824:	2700      	movs	r7, #0
 8003826:	4635      	mov	r5, r6
 8003828:	4644      	mov	r4, r8
 800382a:	464e      	mov	r6, r9
 800382c:	46ab      	mov	fp, r5
 800382e:	f505 7ab0 	add.w	sl, r5, #352	@ 0x160
 8003832:	e00b      	b.n	800384c <actingOnATFS+0x2e8>
 8003834:	000bcce0 	.word	0x000bcce0
 8003838:	c001d0c0 	.word	0xc001d0c0
 800383c:	0001d0c0 	.word	0x0001d0c0
 8003840:	c0000000 	.word	0xc0000000
 8003844:	fffffea0 	.word	0xfffffea0
 8003848:	c001d380 	.word	0xc001d380
        _MSUB_(k*N + l,  i*(N*N)+k*N+l, i );
 800384c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8003850:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8003854:	f1c1 21ff 	rsb	r1, r1, #4278255360	@ 0xff00ff00
 8003858:	f501 017f 	add.w	r1, r1, #16711680	@ 0xff0000
 800385c:	31fb      	adds	r1, #251	@ 0xfb
 800385e:	f001 f817 	bl	8004890 <multiplicationModuloP>
 8003862:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8003866:	181b      	adds	r3, r3, r0
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	6863      	ldr	r3, [r4, #4]
 800386c:	eb43 0301 	adc.w	r3, r3, r1
 8003870:	45d3      	cmp	fp, sl
 8003872:	6063      	str	r3, [r4, #4]
 8003874:	d1ea      	bne.n	800384c <actingOnATFS+0x2e8>
      for(i=0;i<k;i++)
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	3758      	adds	r7, #88	@ 0x58
 800387a:	f505 4568 	add.w	r5, r5, #59392	@ 0xe800
 800387e:	429f      	cmp	r7, r3
 8003880:	f105 0560 	add.w	r5, r5, #96	@ 0x60
 8003884:	f509 79b0 	add.w	r9, r9, #352	@ 0x160
 8003888:	d1ce      	bne.n	8003828 <actingOnATFS+0x2c4>
    for(l=j+1;l<N;l++)
 800388a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800388e:	3401      	adds	r4, #1
 8003890:	2c0d      	cmp	r4, #13
 8003892:	f508 7830 	add.w	r8, r8, #704	@ 0x2c0
 8003896:	f105 0558 	add.w	r5, r5, #88	@ 0x58
 800389a:	d1bc      	bne.n	8003816 <actingOnATFS+0x2b2>
  for(k=1;k<j;k++)
 800389c:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	@ 0x5c
 80038a0:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80038a4:	461a      	mov	r2, r3
 80038a6:	3258      	adds	r2, #88	@ 0x58
 80038a8:	4552      	cmp	r2, sl
 80038aa:	e9dd 6e15 	ldrd	r6, lr, [sp, #84]	@ 0x54
 80038ae:	f505 550f 	add.w	r5, r5, #9152	@ 0x23c0
 80038b2:	f507 678f 	add.w	r7, r7, #1144	@ 0x478
 80038b6:	d1a4      	bne.n	8003802 <actingOnATFS+0x29e>
 80038b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
  for(k=0;k<j;k++)
 80038bc:	f1be 0f0c 	cmp.w	lr, #12
 80038c0:	f000 8601 	beq.w	80044c6 <actingOnATFS+0xf62>
 80038c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80038c8:	f8cd e01c 	str.w	lr, [sp, #28]
 80038cc:	4473      	add	r3, lr
 80038ce:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 80038d2:	3b0d      	subs	r3, #13
 80038d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80038d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80038d8:	f503 56a4 	add.w	r6, r3, #5248	@ 0x1480
 80038dc:	361c      	adds	r6, #28
 80038de:	3a04      	subs	r2, #4
    for(l=j+1;l<N;l++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	9201      	str	r2, [sp, #4]
        _MSUB_(k*N + l, k*(N*N)+l*N+i, i);
 80038e4:	f06f 0b04 	mvn.w	fp, #4
  for(k=0;k<j;k++)
 80038e8:	4635      	mov	r5, r6
    for(l=j+1;l<N-1;l++)
 80038ea:	e9cd 8515 	strd	r8, r5, [sp, #84]	@ 0x54
 80038ee:	4676      	mov	r6, lr
 80038f0:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 80038f4:	46c1      	mov	r9, r8
 80038f6:	9317      	str	r3, [sp, #92]	@ 0x5c
      for(i=l+1;i<N;i++)
 80038f8:	3601      	adds	r6, #1
 80038fa:	2358      	movs	r3, #88	@ 0x58
 80038fc:	fb03 f806 	mul.w	r8, r3, r6
 8003900:	462c      	mov	r4, r5
 8003902:	4637      	mov	r7, r6
 8003904:	9603      	str	r6, [sp, #12]
 8003906:	9506      	str	r5, [sp, #24]
        _MSUB_(k*N + l, k*(N*N)+l*N+i, i);
 8003908:	9b01      	ldr	r3, [sp, #4]
    for(l=j+1;l<N-1;l++)
 800390a:	464e      	mov	r6, r9
 800390c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8003910:	f504 75b0 	add.w	r5, r4, #352	@ 0x160
        _MSUB_(k*N + l, k*(N*N)+l*N+i, i);
 8003914:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8003918:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800391c:	ebab 0101 	sub.w	r1, fp, r1
 8003920:	f000 ffb6 	bl	8004890 <multiplicationModuloP>
 8003924:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003928:	181b      	adds	r3, r3, r0
 800392a:	6033      	str	r3, [r6, #0]
 800392c:	6873      	ldr	r3, [r6, #4]
 800392e:	eb43 0301 	adc.w	r3, r3, r1
 8003932:	42ac      	cmp	r4, r5
 8003934:	6073      	str	r3, [r6, #4]
 8003936:	d1ed      	bne.n	8003914 <actingOnATFS+0x3b0>
      for(i=l+1;i<N;i++)
 8003938:	3701      	adds	r7, #1
 800393a:	2f0d      	cmp	r7, #13
 800393c:	f108 0858 	add.w	r8, r8, #88	@ 0x58
 8003940:	d1e2      	bne.n	8003908 <actingOnATFS+0x3a4>
    for(l=j+1;l<N-1;l++)
 8003942:	9e03      	ldr	r6, [sp, #12]
 8003944:	9d06      	ldr	r5, [sp, #24]
 8003946:	2e0c      	cmp	r6, #12
 8003948:	f509 7930 	add.w	r9, r9, #704	@ 0x2c0
 800394c:	f505 559a 	add.w	r5, r5, #4928	@ 0x1340
 8003950:	d1d2      	bne.n	80038f8 <actingOnATFS+0x394>
  for(k=0;k<j;k++)
 8003952:	e9dd 8515 	ldrd	r8, r5, [sp, #84]	@ 0x54
 8003956:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003958:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800395a:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800395e:	330d      	adds	r3, #13
 8003960:	f505 4568 	add.w	r5, r5, #59392	@ 0xe800
 8003964:	4293      	cmp	r3, r2
 8003966:	f508 580f 	add.w	r8, r8, #9152	@ 0x23c0
 800396a:	f105 0560 	add.w	r5, r5, #96	@ 0x60
 800396e:	d1bc      	bne.n	80038ea <actingOnATFS+0x386>
    for(l=j+2;l<N;l++)
 8003970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003972:	9c07      	ldr	r4, [sp, #28]
 8003974:	2b0b      	cmp	r3, #11
 8003976:	4635      	mov	r5, r6
 8003978:	f103 0602 	add.w	r6, r3, #2
 800397c:	f000 859d 	beq.w	80044ba <actingOnATFS+0xf56>
 8003980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003982:	9a04      	ldr	r2, [sp, #16]
 8003984:	f503 69af 	add.w	r9, r3, #1400	@ 0x578
 8003988:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800398a:	f503 55af 	add.w	r5, r3, #5600	@ 0x15e0
 800398e:	f44f 539a 	mov.w	r3, #4928	@ 0x1340
 8003992:	fb03 f002 	mul.w	r0, r3, r2
  for(k=0;k<j;k++)
 8003996:	e9cd 4915 	strd	r4, r9, [sp, #84]	@ 0x54
 800399a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800399c:	351c      	adds	r5, #28
 800399e:	46b0      	mov	r8, r6
    for(l=j+2;l<N;l++)
 80039a0:	f04f 0b00 	mov.w	fp, #0
 80039a4:	f502 71ae 	add.w	r1, r2, #348	@ 0x15c
  for(k=0;k<j;k++)
 80039a8:	464f      	mov	r7, r9
 80039aa:	462e      	mov	r6, r5
    for(l=j+2;l<N;l++)
 80039ac:	e9cd 7b18 	strd	r7, fp, [sp, #96]	@ 0x60
 80039b0:	46ba      	mov	sl, r7
 80039b2:	46c1      	mov	r9, r8
 80039b4:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 80039b8:	4635      	mov	r5, r6
 80039ba:	4607      	mov	r7, r0
      for(i=j+1;i<l;i++)
 80039bc:	19cc      	adds	r4, r1, r7
 80039be:	9606      	str	r6, [sp, #24]
 80039c0:	9707      	str	r7, [sp, #28]
    for(l=j+2;l<N;l++)
 80039c2:	46a8      	mov	r8, r5
      for(i=j+1;i<l;i++)
 80039c4:	f8cd e004 	str.w	lr, [sp, #4]
 80039c8:	9503      	str	r5, [sp, #12]
 80039ca:	4676      	mov	r6, lr
 80039cc:	4627      	mov	r7, r4
 80039ce:	910b      	str	r1, [sp, #44]	@ 0x2c
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 80039d0:	f5a8 75b0 	sub.w	r5, r8, #352	@ 0x160
      for(i=j+1;i<l;i++)
 80039d4:	4654      	mov	r4, sl
 80039d6:	46bb      	mov	fp, r7
        _MADD_(k*N + l, k*(N*N)+i*N+l, i);
 80039d8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80039dc:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80039e0:	f000 ff56 	bl	8004890 <multiplicationModuloP>
 80039e4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80039e8:	181b      	adds	r3, r3, r0
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	eb43 0301 	adc.w	r3, r3, r1
 80039f2:	4545      	cmp	r5, r8
 80039f4:	6063      	str	r3, [r4, #4]
 80039f6:	d1ef      	bne.n	80039d8 <actingOnATFS+0x474>
      for(i=j+1;i<l;i++)
 80039f8:	3601      	adds	r6, #1
 80039fa:	454e      	cmp	r6, r9
 80039fc:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8003a00:	f505 588f 	add.w	r8, r5, #4576	@ 0x11e0
 8003a04:	dbe4      	blt.n	80039d0 <actingOnATFS+0x46c>
    for(l=j+2;l<N;l++)
 8003a06:	9d03      	ldr	r5, [sp, #12]
 8003a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003a0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003a0e:	f109 0901 	add.w	r9, r9, #1
 8003a12:	f1b9 0f0d 	cmp.w	r9, #13
 8003a16:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8003a1a:	f50a 7a30 	add.w	sl, sl, #704	@ 0x2c0
 8003a1e:	f505 75b0 	add.w	r5, r5, #352	@ 0x160
 8003a22:	d1cb      	bne.n	80039bc <actingOnATFS+0x458>
 8003a24:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
  for(k=0;k<j;k++)
 8003a28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a2a:	f8dd 805c 	ldr.w	r8, [sp, #92]	@ 0x5c
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f10b 0b0d 	add.w	fp, fp, #13
 8003a34:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8003a36:	f506 4668 	add.w	r6, r6, #59392	@ 0xe800
 8003a3a:	459b      	cmp	fp, r3
 8003a3c:	f507 570f 	add.w	r7, r7, #9152	@ 0x23c0
 8003a40:	f106 0660 	add.w	r6, r6, #96	@ 0x60
 8003a44:	d1b2      	bne.n	80039ac <actingOnATFS+0x448>
 8003a46:	e9dd 4915 	ldrd	r4, r9, [sp, #84]	@ 0x54
 8003a4a:	4646      	mov	r6, r8
 8003a4c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8003a50:	f44f 629a 	mov.w	r2, #1232	@ 0x4d0
 8003a54:	fb04 f202 	mul.w	r2, r4, r2
 8003a58:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003a5c:	f1a4 010d 	sub.w	r1, r4, #13
    for(l=j+2;l<N;l++)
 8003a60:	2400      	movs	r4, #0
 8003a62:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
  for(k=0; k<j; k++)
 8003a66:	4623      	mov	r3, r4
 8003a68:	9c05      	ldr	r4, [sp, #20]
 8003a6a:	f643 2b18 	movw	fp, #14872	@ 0x3a18
 8003a6e:	464d      	mov	r5, r9
 8003a70:	4617      	mov	r7, r2
    for(l=j+1; l<N; l++)
 8003a72:	e9cd 3605 	strd	r3, r6, [sp, #20]
 8003a76:	9501      	str	r5, [sp, #4]
 8003a78:	9703      	str	r7, [sp, #12]
 8003a7a:	4676      	mov	r6, lr
 8003a7c:	f8cd e01c 	str.w	lr, [sp, #28]
 8003a80:	468a      	mov	sl, r1
      _MOD_RED_(k*(N*N)+j*N+l, k*N + l);
 8003a82:	f5a5 7930 	sub.w	r9, r5, #704	@ 0x2c0
 8003a86:	eb04 0887 	add.w	r8, r4, r7, lsl #2
 8003a8a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003a8e:	f000 ff13 	bl	80048b8 <reductionModuloP>
 8003a92:	454d      	cmp	r5, r9
 8003a94:	f848 0f04 	str.w	r0, [r8, #4]!
 8003a98:	d1f7      	bne.n	8003a8a <actingOnATFS+0x526>
    for(l=j+1; l<N; l++)
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	2e0d      	cmp	r6, #13
 8003a9e:	f107 0758 	add.w	r7, r7, #88	@ 0x58
 8003aa2:	f505 7530 	add.w	r5, r5, #704	@ 0x2c0
 8003aa6:	d1ec      	bne.n	8003a82 <actingOnATFS+0x51e>
  for(k=0; k<j; k++)
 8003aa8:	e9dd 3605 	ldrd	r3, r6, [sp, #20]
 8003aac:	9d01      	ldr	r5, [sp, #4]
 8003aae:	9f03      	ldr	r7, [sp, #12]
 8003ab0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8003ab4:	330d      	adds	r3, #13
 8003ab6:	4553      	cmp	r3, sl
 8003ab8:	4651      	mov	r1, sl
 8003aba:	445f      	add	r7, fp
 8003abc:	f505 550f 	add.w	r5, r5, #9152	@ 0x23c0
 8003ac0:	d1d7      	bne.n	8003a72 <actingOnATFS+0x50e>
  for(k=j+1; k<N-1; k++)
 8003ac2:	f1be 0f0b 	cmp.w	lr, #11
 8003ac6:	f300 8504 	bgt.w	80044d2 <actingOnATFS+0xf6e>
 8003aca:	f44f 639a 	mov.w	r3, #1232	@ 0x4d0
 8003ace:	fb03 f30e 	mul.w	r3, r3, lr
 8003ad2:	4ac2      	ldr	r2, [pc, #776]	@ (8003ddc <actingOnATFS+0x878>)
 8003ad4:	9904      	ldr	r1, [sp, #16]
 8003ad6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8003ad8:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8003adc:	f64e 0360 	movw	r3, #59488	@ 0xe860
 8003ae0:	fb03 2301 	mla	r3, r3, r1, r2
 8003ae4:	f503 7bae 	add.w	fp, r3, #348	@ 0x15c
 8003ae8:	465b      	mov	r3, fp
 8003aea:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8003aee:	4675      	mov	r5, lr
 8003af0:	46a1      	mov	r9, r4
    for(l=k+1; l<N; l++)
 8003af2:	e9cd e305 	strd	lr, r3, [sp, #20]
 8003af6:	3501      	adds	r5, #1
 8003af8:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 8003afc:	9501      	str	r5, [sp, #4]
 8003afe:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b02:	4657      	mov	r7, sl
      _MUL_(k*N+l, j*(N*N)+k*N+l, j);
 8003b04:	f5a7 78b0 	sub.w	r8, r7, #352	@ 0x160
 8003b08:	eb06 0ac9 	add.w	sl, r6, r9, lsl #3
  for(k=0;k<j-1;k++)
 8003b0c:	465c      	mov	r4, fp
      _MUL_(k*N+l, j*(N*N)+k*N+l, j);
 8003b0e:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8003b12:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8003b16:	f000 febb 	bl	8004890 <multiplicationModuloP>
 8003b1a:	4547      	cmp	r7, r8
 8003b1c:	e9ea 0102 	strd	r0, r1, [sl, #8]!
 8003b20:	d1f5      	bne.n	8003b0e <actingOnATFS+0x5aa>
    for(l=k+1; l<N; l++)
 8003b22:	3501      	adds	r5, #1
 8003b24:	2d0d      	cmp	r5, #13
 8003b26:	f109 0958 	add.w	r9, r9, #88	@ 0x58
 8003b2a:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8003b2e:	d1e9      	bne.n	8003b04 <actingOnATFS+0x5a0>
  for(k=j+1; k<N-1; k++)
 8003b30:	9d01      	ldr	r5, [sp, #4]
 8003b32:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003b36:	2d0c      	cmp	r5, #12
 8003b38:	e9dd e305 	ldrd	lr, r3, [sp, #20]
 8003b3c:	f509 699a 	add.w	r9, r9, #1232	@ 0x4d0
 8003b40:	d1d7      	bne.n	8003af2 <actingOnATFS+0x58e>
  for(k=j+1;k<N-1;k++)
 8003b42:	f1be 0f0b 	cmp.w	lr, #11
 8003b46:	f300 8093 	bgt.w	8003c70 <actingOnATFS+0x70c>
 8003b4a:	9b04      	ldr	r3, [sp, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8345 	beq.w	80041dc <actingOnATFS+0xc78>
 8003b52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b54:	f503 5624 	add.w	r6, r3, #10496	@ 0x2900
 8003b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b5a:	3638      	adds	r6, #56	@ 0x38
 8003b5c:	3b04      	subs	r3, #4
 8003b5e:	4674      	mov	r4, lr
 8003b60:	9301      	str	r3, [sp, #4]
      for(i=0;i<j;i++)
 8003b62:	4637      	mov	r7, r6
 8003b64:	9606      	str	r6, [sp, #24]
    for(l=k+1;l<N;l++)
 8003b66:	3401      	adds	r4, #1
 8003b68:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003b6c:	006d      	lsls	r5, r5, #1
 8003b6e:	3d0d      	subs	r5, #13
 8003b70:	9407      	str	r4, [sp, #28]
 8003b72:	4626      	mov	r6, r4
 8003b74:	9709      	str	r7, [sp, #36]	@ 0x24
 8003b76:	46b8      	mov	r8, r7
 8003b78:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
      for(i=0;i<j;i++)
 8003b7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003b80:	2258      	movs	r2, #88	@ 0x58
 8003b82:	fb02 3405 	mla	r4, r2, r5, r3
 8003b86:	4b95      	ldr	r3, [pc, #596]	@ (8003ddc <actingOnATFS+0x878>)
 8003b88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003b8c:	9505      	str	r5, [sp, #20]
 8003b8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  for(k=j+1;k<N-1;k++)
 8003b92:	2700      	movs	r7, #0
 8003b94:	9603      	str	r6, [sp, #12]
 8003b96:	4625      	mov	r5, r4
 8003b98:	4646      	mov	r6, r8
 8003b9a:	464c      	mov	r4, r9
 8003b9c:	46aa      	mov	sl, r5
 8003b9e:	f505 7bb0 	add.w	fp, r5, #352	@ 0x160
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 8003ba2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8003ba6:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8003baa:	f000 fe71 	bl	8004890 <multiplicationModuloP>
 8003bae:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003bb2:	181b      	adds	r3, r3, r0
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	6873      	ldr	r3, [r6, #4]
 8003bb8:	eb43 0301 	adc.w	r3, r3, r1
 8003bbc:	45d3      	cmp	fp, sl
 8003bbe:	6073      	str	r3, [r6, #4]
 8003bc0:	d1ef      	bne.n	8003ba2 <actingOnATFS+0x63e>
      for(i=0;i<j;i++)
 8003bc2:	9b02      	ldr	r3, [sp, #8]
 8003bc4:	3758      	adds	r7, #88	@ 0x58
 8003bc6:	f505 4568 	add.w	r5, r5, #59392	@ 0xe800
 8003bca:	429f      	cmp	r7, r3
 8003bcc:	f105 0560 	add.w	r5, r5, #96	@ 0x60
 8003bd0:	f509 79b0 	add.w	r9, r9, #352	@ 0x160
 8003bd4:	d1e0      	bne.n	8003b98 <actingOnATFS+0x634>
    for(l=k+1;l<N;l++)
 8003bd6:	9e03      	ldr	r6, [sp, #12]
 8003bd8:	9d05      	ldr	r5, [sp, #20]
 8003bda:	3601      	adds	r6, #1
 8003bdc:	2e0d      	cmp	r6, #13
 8003bde:	f105 0501 	add.w	r5, r5, #1
 8003be2:	f508 7830 	add.w	r8, r8, #704	@ 0x2c0
 8003be6:	d1c9      	bne.n	8003b7c <actingOnATFS+0x618>
  for(k=j+1;k<N-1;k++)
 8003be8:	9c07      	ldr	r4, [sp, #28]
 8003bea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8003bec:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 8003bf0:	2c0c      	cmp	r4, #12
 8003bf2:	f507 571a 	add.w	r7, r7, #9856	@ 0x2680
 8003bf6:	d1b6      	bne.n	8003b66 <actingOnATFS+0x602>
  for(k=j+1;k<N-2;k++)
 8003bf8:	f1be 0f0b 	cmp.w	lr, #11
 8003bfc:	9e06      	ldr	r6, [sp, #24]
 8003bfe:	f040 82f8 	bne.w	80041f2 <actingOnATFS+0xc8e>
 8003c02:	4b77      	ldr	r3, [pc, #476]	@ (8003de0 <actingOnATFS+0x87c>)
 8003c04:	4a77      	ldr	r2, [pc, #476]	@ (8003de4 <actingOnATFS+0x880>)
 8003c06:	9904      	ldr	r1, [sp, #16]
 8003c08:	fb03 2301 	mla	r3, r3, r1, r2
 8003c0c:	f503 7b2e 	add.w	fp, r3, #696	@ 0x2b8
 8003c10:	f643 63e8 	movw	r3, #16104	@ 0x3ee8
 8003c14:	fb03 f30e 	mul.w	r3, r3, lr
 8003c18:	f5a3 5467 	sub.w	r4, r3, #14784	@ 0x39c0
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <actingOnATFS+0x878>)
    for(l=k+1;l<N;l++)
 8003c1e:	46f2      	mov	sl, lr
 8003c20:	1f1f      	subs	r7, r3, #4
 8003c22:	4625      	mov	r5, r4
    for(l=k+1; l<N; l++)
 8003c24:	eb0b 08c5 	add.w	r8, fp, r5, lsl #3
 8003c28:	462c      	mov	r4, r5
 8003c2a:	f10a 0a01 	add.w	sl, sl, #1
 8003c2e:	9503      	str	r5, [sp, #12]
 8003c30:	46c1      	mov	r9, r8
 8003c32:	f8cd e004 	str.w	lr, [sp, #4]
 8003c36:	4655      	mov	r5, sl
 8003c38:	46a0      	mov	r8, r4
      _MOD_RED_(j*(N*N)+k*N+l, k*N+l);
 8003c3a:	f5a9 7630 	sub.w	r6, r9, #704	@ 0x2c0
 8003c3e:	eb07 0488 	add.w	r4, r7, r8, lsl #2
 8003c42:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8003c46:	f000 fe37 	bl	80048b8 <reductionModuloP>
 8003c4a:	454e      	cmp	r6, r9
 8003c4c:	f844 0f04 	str.w	r0, [r4, #4]!
 8003c50:	d1f7      	bne.n	8003c42 <actingOnATFS+0x6de>
    for(l=k+1; l<N; l++)
 8003c52:	3501      	adds	r5, #1
 8003c54:	2d0d      	cmp	r5, #13
 8003c56:	f108 0858 	add.w	r8, r8, #88	@ 0x58
 8003c5a:	f506 7930 	add.w	r9, r6, #704	@ 0x2c0
 8003c5e:	d1ec      	bne.n	8003c3a <actingOnATFS+0x6d6>
  for(k=j+1; k<N-1; k++)
 8003c60:	9d03      	ldr	r5, [sp, #12]
 8003c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003c66:	f1ba 0f0c 	cmp.w	sl, #12
 8003c6a:	f505 659a 	add.w	r5, r5, #1232	@ 0x4d0
 8003c6e:	d1d9      	bne.n	8003c24 <actingOnATFS+0x6c0>
  for(k=0; k<j-1; k++)
 8003c70:	9b08      	ldr	r3, [sp, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f340 8292 	ble.w	800419c <actingOnATFS+0xc38>
 8003c78:	4b58      	ldr	r3, [pc, #352]	@ (8003ddc <actingOnATFS+0x878>)
 8003c7a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003c7e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8003c80:	f503 538e 	add.w	r3, r3, #4544	@ 0x11c0
 8003c84:	331c      	adds	r3, #28
 8003c86:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8003c8a:	fb02 380e 	mla	r8, r2, lr, r3
 8003c8e:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <actingOnATFS+0x880>)
 8003c90:	2400      	movs	r4, #0
 8003c92:	f1a3 0508 	sub.w	r5, r3, #8
 8003c96:	46c2      	mov	sl, r8
 8003c98:	4626      	mov	r6, r4
 8003c9a:	46a8      	mov	r8, r5
    for(l=k+1; l<j; l++)
 8003c9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	429e      	cmp	r6, r3
 8003ca2:	da24      	bge.n	8003cee <actingOnATFS+0x78a>
 8003ca4:	f44f 639a 	mov.w	r3, #1232	@ 0x4d0
 8003ca8:	fb03 f306 	mul.w	r3, r3, r6
 8003cac:	9601      	str	r6, [sp, #4]
 8003cae:	f5a3 658f 	sub.w	r5, r3, #1144	@ 0x478
 8003cb2:	f8cd e00c 	str.w	lr, [sp, #12]
 8003cb6:	4656      	mov	r6, sl
 8003cb8:	f8cd a014 	str.w	sl, [sp, #20]
      _MUL_(k*N+l, k*(N*N)+l*N+j, j);
 8003cbc:	f5a6 79b0 	sub.w	r9, r6, #352	@ 0x160
 8003cc0:	eb08 0ac5 	add.w	sl, r8, r5, lsl #3
  for(k=0; k<j-1; k++)
 8003cc4:	463c      	mov	r4, r7
      _MUL_(k*N+l, k*(N*N)+l*N+j, j);
 8003cc6:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8003cca:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8003cce:	f000 fddf 	bl	8004890 <multiplicationModuloP>
 8003cd2:	45b1      	cmp	r9, r6
 8003cd4:	e9ea 0102 	strd	r0, r1, [sl, #8]!
 8003cd8:	d1f5      	bne.n	8003cc6 <actingOnATFS+0x762>
    for(l=k+1; l<j; l++)
 8003cda:	3558      	adds	r5, #88	@ 0x58
 8003cdc:	455d      	cmp	r5, fp
 8003cde:	f506 568f 	add.w	r6, r6, #4576	@ 0x11e0
 8003ce2:	d1eb      	bne.n	8003cbc <actingOnATFS+0x758>
 8003ce4:	9e01      	ldr	r6, [sp, #4]
 8003ce6:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8003cea:	f8dd a014 	ldr.w	sl, [sp, #20]
  for(k=0; k<j-1; k++)
 8003cee:	9b08      	ldr	r3, [sp, #32]
 8003cf0:	f50a 4a7a 	add.w	sl, sl, #64000	@ 0xfa00
 8003cf4:	429e      	cmp	r6, r3
 8003cf6:	f50b 6b8f 	add.w	fp, fp, #1144	@ 0x478
 8003cfa:	f10a 0a40 	add.w	sl, sl, #64	@ 0x40
 8003cfe:	d1cd      	bne.n	8003c9c <actingOnATFS+0x738>
  for(k=0;k<j-2;k++)
 8003d00:	9b04      	ldr	r3, [sp, #16]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	f240 8245 	bls.w	8004192 <actingOnATFS+0xc2e>
 8003d08:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8003dec <actingOnATFS+0x888>
 8003d0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003d0e:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8003df0 <actingOnATFS+0x88c>
 8003d12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003d14:	3b02      	subs	r3, #2
 8003d16:	2600      	movs	r6, #0
 8003d18:	4649      	mov	r1, r9
 8003d1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f1a2 0804 	sub.w	r8, r2, #4
 8003d24:	46b2      	mov	sl, r6
 8003d26:	465b      	mov	r3, fp
    for(l=k+1;l<j-1;l++)
 8003d28:	9a08      	ldr	r2, [sp, #32]
 8003d2a:	f10a 0a01 	add.w	sl, sl, #1
 8003d2e:	4592      	cmp	sl, r2
 8003d30:	da3b      	bge.n	8003daa <actingOnATFS+0x846>
 8003d32:	e9cd e106 	strd	lr, r1, [sp, #24]
 8003d36:	468b      	mov	fp, r1
 8003d38:	f8cd a014 	str.w	sl, [sp, #20]
 8003d3c:	4656      	mov	r6, sl
 8003d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d40:	900b      	str	r0, [sp, #44]	@ 0x2c
      for(i=l+1;i<j;i++)
 8003d42:	9a04      	ldr	r2, [sp, #16]
 8003d44:	3601      	adds	r6, #1
 8003d46:	4296      	cmp	r6, r2
 8003d48:	da23      	bge.n	8003d92 <actingOnATFS+0x82e>
 8003d4a:	2258      	movs	r2, #88	@ 0x58
 8003d4c:	fb02 fa06 	mul.w	sl, r2, r6
 8003d50:	461c      	mov	r4, r3
 8003d52:	9601      	str	r6, [sp, #4]
 8003d54:	4655      	mov	r5, sl
 8003d56:	9303      	str	r3, [sp, #12]
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8003d58:	eb08 0785 	add.w	r7, r8, r5, lsl #2
    for(l=k+1;l<j-1;l++)
 8003d5c:	46da      	mov	sl, fp
 8003d5e:	f504 76b0 	add.w	r6, r4, #352	@ 0x160
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8003d62:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003d66:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8003d6a:	f000 fd91 	bl	8004890 <multiplicationModuloP>
 8003d6e:	f85a 3f08 	ldr.w	r3, [sl, #8]!
 8003d72:	181b      	adds	r3, r3, r0
 8003d74:	f8ca 3000 	str.w	r3, [sl]
 8003d78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d7c:	eb43 0301 	adc.w	r3, r3, r1
 8003d80:	42b4      	cmp	r4, r6
 8003d82:	f8ca 3004 	str.w	r3, [sl, #4]
 8003d86:	d1ec      	bne.n	8003d62 <actingOnATFS+0x7fe>
      for(i=l+1;i<j;i++)
 8003d88:	3558      	adds	r5, #88	@ 0x58
 8003d8a:	454d      	cmp	r5, r9
 8003d8c:	d1e4      	bne.n	8003d58 <actingOnATFS+0x7f4>
 8003d8e:	9e01      	ldr	r6, [sp, #4]
 8003d90:	9b03      	ldr	r3, [sp, #12]
    for(l=k+1;l<j-1;l++)
 8003d92:	9a08      	ldr	r2, [sp, #32]
 8003d94:	4296      	cmp	r6, r2
 8003d96:	f50b 7b30 	add.w	fp, fp, #704	@ 0x2c0
 8003d9a:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8003d9e:	d1d0      	bne.n	8003d42 <actingOnATFS+0x7de>
 8003da0:	e9dd ae05 	ldrd	sl, lr, [sp, #20]
 8003da4:	9907      	ldr	r1, [sp, #28]
 8003da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003da8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  for(k=0;k<j-2;k++)
 8003daa:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8003dae:	4582      	cmp	sl, r0
 8003db0:	f501 511a 	add.w	r1, r1, #9856	@ 0x2680
 8003db4:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8003db8:	dbb6      	blt.n	8003d28 <actingOnATFS+0x7c4>
  for(k=0;k<j-2;k++)
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	dd6f      	ble.n	8003e9e <actingOnATFS+0x93a>
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <actingOnATFS+0x878>)
 8003dc0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003dc2:	4a09      	ldr	r2, [pc, #36]	@ (8003de8 <actingOnATFS+0x884>)
 8003dc4:	f503 53af 	add.w	r3, r3, #5600	@ 0x15e0
 8003dc8:	331c      	adds	r3, #28
 8003dca:	2502      	movs	r5, #2
 8003dcc:	f501 71ae 	add.w	r1, r1, #348	@ 0x15c
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8003dd0:	f06f 0804 	mvn.w	r8, #4
 8003dd4:	462e      	mov	r6, r5
 8003dd6:	4699      	mov	r9, r3
 8003dd8:	e00c      	b.n	8003df4 <actingOnATFS+0x890>
 8003dda:	bf00      	nop
 8003ddc:	c001d0c0 	.word	0xc001d0c0
 8003de0:	fffe2f40 	.word	0xfffe2f40
 8003de4:	c0000000 	.word	0xc0000000
 8003de8:	c0000578 	.word	0xc0000578
 8003dec:	c00002b8 	.word	0xc00002b8
 8003df0:	c001e55c 	.word	0xc001e55c
    for(l=k+2;l<j;l++)
 8003df4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003df6:	429e      	cmp	r6, r3
 8003df8:	46b2      	mov	sl, r6
  for(k=0;k<j-2;k++)
 8003dfa:	f106 30ff 	add.w	r0, r6, #4294967295
    for(l=k+2;l<j;l++)
 8003dfe:	da42      	bge.n	8003e86 <actingOnATFS+0x922>
 8003e00:	e9cd 2914 	strd	r2, r9, [sp, #80]	@ 0x50
 8003e04:	464d      	mov	r5, r9
 8003e06:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003e0a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8003e0c:	4693      	mov	fp, r2
 8003e0e:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8003e12:	460e      	mov	r6, r1
      for(i=k+1;i<l;i++)
 8003e14:	e9cd 0906 	strd	r0, r9, [sp, #24]
 8003e18:	f8cd a004 	str.w	sl, [sp, #4]
 8003e1c:	9503      	str	r5, [sp, #12]
 8003e1e:	9605      	str	r6, [sp, #20]
 8003e20:	4682      	mov	sl, r0
 8003e22:	46a9      	mov	r9, r5
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8003e24:	f5a9 74b0 	sub.w	r4, r9, #352	@ 0x160
      for(i=k+1;i<l;i++)
 8003e28:	465d      	mov	r5, fp
 8003e2a:	4637      	mov	r7, r6
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8003e2c:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8003e30:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003e34:	eba8 0101 	sub.w	r1, r8, r1
 8003e38:	f000 fd2a 	bl	8004890 <multiplicationModuloP>
 8003e3c:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8003e40:	181b      	adds	r3, r3, r0
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	686b      	ldr	r3, [r5, #4]
 8003e46:	eb43 0301 	adc.w	r3, r3, r1
 8003e4a:	454c      	cmp	r4, r9
 8003e4c:	606b      	str	r3, [r5, #4]
 8003e4e:	d1ed      	bne.n	8003e2c <actingOnATFS+0x8c8>
      for(i=k+1;i<l;i++)
 8003e50:	9b01      	ldr	r3, [sp, #4]
 8003e52:	f10a 0a01 	add.w	sl, sl, #1
 8003e56:	459a      	cmp	sl, r3
 8003e58:	f506 76b0 	add.w	r6, r6, #352	@ 0x160
 8003e5c:	f504 598f 	add.w	r9, r4, #4576	@ 0x11e0
 8003e60:	dbe0      	blt.n	8003e24 <actingOnATFS+0x8c0>
    for(l=k+2;l<j;l++)
 8003e62:	e9dd 0906 	ldrd	r0, r9, [sp, #24]
 8003e66:	9d03      	ldr	r5, [sp, #12]
 8003e68:	9e05      	ldr	r6, [sp, #20]
 8003e6a:	f103 0a01 	add.w	sl, r3, #1
 8003e6e:	45ca      	cmp	sl, r9
 8003e70:	f50b 7b30 	add.w	fp, fp, #704	@ 0x2c0
 8003e74:	f505 75b0 	add.w	r5, r5, #352	@ 0x160
 8003e78:	d1cc      	bne.n	8003e14 <actingOnATFS+0x8b0>
 8003e7a:	e9dd 2914 	ldrd	r2, r9, [sp, #80]	@ 0x50
 8003e7e:	4631      	mov	r1, r6
 8003e80:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8003e84:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
  for(k=0;k<j-2;k++)
 8003e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003e88:	3601      	adds	r6, #1
 8003e8a:	f509 497b 	add.w	r9, r9, #64256	@ 0xfb00
 8003e8e:	429e      	cmp	r6, r3
 8003e90:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8003e94:	f502 521a 	add.w	r2, r2, #9856	@ 0x2680
 8003e98:	f109 09a0 	add.w	r9, r9, #160	@ 0xa0
 8003e9c:	d1aa      	bne.n	8003df4 <actingOnATFS+0x890>
  for(k=1;k<j-1;k++)
 8003e9e:	9b08      	ldr	r3, [sp, #32]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f340 8173 	ble.w	800418c <actingOnATFS+0xc28>
 8003ea6:	49c3      	ldr	r1, [pc, #780]	@ (80041b4 <actingOnATFS+0xc50>)
 8003ea8:	f8df b314 	ldr.w	fp, [pc, #788]	@ 80041c0 <actingOnATFS+0xc5c>
 8003eac:	f1a1 0904 	sub.w	r9, r1, #4
 8003eb0:	990d      	ldr	r1, [sp, #52]	@ 0x34
      for(i=k+1;i<l;i++)
 8003eb2:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8003eb6:	3904      	subs	r1, #4
 8003eb8:	2258      	movs	r2, #88	@ 0x58
  for(k=1;k<j-1;k++)
 8003eba:	2501      	movs	r5, #1
 8003ebc:	9107      	str	r1, [sp, #28]
      for(i=0;i<k;i++)
 8003ebe:	465f      	mov	r7, fp
 8003ec0:	469a      	mov	sl, r3
    for(l=k+1;l<j;l++)
 8003ec2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	429d      	cmp	r5, r3
 8003ec8:	da44      	bge.n	8003f54 <actingOnATFS+0x9f0>
 8003eca:	e9cd 7a14 	strd	r7, sl, [sp, #80]	@ 0x50
 8003ece:	462c      	mov	r4, r5
 8003ed0:	9509      	str	r5, [sp, #36]	@ 0x24
 8003ed2:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8003ed6:	4655      	mov	r5, sl
 8003ed8:	46b8      	mov	r8, r7
 8003eda:	9201      	str	r2, [sp, #4]
 8003edc:	f8cd 9018 	str.w	r9, [sp, #24]
      for(i=0;i<k;i++)
 8003ee0:	9b06      	ldr	r3, [sp, #24]
 8003ee2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003ee6:	9505      	str	r5, [sp, #20]
 8003ee8:	eb03 0685 	add.w	r6, r3, r5, lsl #2
  for(k=1;k<j-1;k++)
 8003eec:	2700      	movs	r7, #0
 8003eee:	9403      	str	r4, [sp, #12]
 8003ef0:	4635      	mov	r5, r6
 8003ef2:	4644      	mov	r4, r8
 8003ef4:	464e      	mov	r6, r9
 8003ef6:	46ab      	mov	fp, r5
 8003ef8:	f505 7ab0 	add.w	sl, r5, #352	@ 0x160
        _MADD_(k*N+l, i*(N*N)+k*N+l, i );
 8003efc:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8003f00:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8003f04:	f000 fcc4 	bl	8004890 <multiplicationModuloP>
 8003f08:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8003f0c:	181b      	adds	r3, r3, r0
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	6863      	ldr	r3, [r4, #4]
 8003f12:	eb43 0301 	adc.w	r3, r3, r1
 8003f16:	45d3      	cmp	fp, sl
 8003f18:	6063      	str	r3, [r4, #4]
 8003f1a:	d1ef      	bne.n	8003efc <actingOnATFS+0x998>
      for(i=0;i<k;i++)
 8003f1c:	9b01      	ldr	r3, [sp, #4]
 8003f1e:	3758      	adds	r7, #88	@ 0x58
 8003f20:	f505 4568 	add.w	r5, r5, #59392	@ 0xe800
 8003f24:	429f      	cmp	r7, r3
 8003f26:	f105 0560 	add.w	r5, r5, #96	@ 0x60
 8003f2a:	f509 79b0 	add.w	r9, r9, #352	@ 0x160
 8003f2e:	d1e0      	bne.n	8003ef2 <actingOnATFS+0x98e>
    for(l=k+1;l<j;l++)
 8003f30:	9c03      	ldr	r4, [sp, #12]
 8003f32:	9b04      	ldr	r3, [sp, #16]
 8003f34:	9d05      	ldr	r5, [sp, #20]
 8003f36:	3401      	adds	r4, #1
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	f508 7830 	add.w	r8, r8, #704	@ 0x2c0
 8003f3e:	f105 0558 	add.w	r5, r5, #88	@ 0x58
 8003f42:	d1cd      	bne.n	8003ee0 <actingOnATFS+0x97c>
 8003f44:	e9dd 7a14 	ldrd	r7, sl, [sp, #80]	@ 0x50
 8003f48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003f4a:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 8003f4e:	9a01      	ldr	r2, [sp, #4]
 8003f50:	f8dd 9018 	ldr.w	r9, [sp, #24]
  for(k=1;k<j-1;k++)
 8003f54:	9b08      	ldr	r3, [sp, #32]
 8003f56:	429d      	cmp	r5, r3
 8003f58:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003f5c:	f507 571a 	add.w	r7, r7, #9856	@ 0x2680
 8003f60:	f50a 6a9a 	add.w	sl, sl, #1232	@ 0x4d0
 8003f64:	d1ad      	bne.n	8003ec2 <actingOnATFS+0x95e>
 8003f66:	4a93      	ldr	r2, [pc, #588]	@ (80041b4 <actingOnATFS+0xc50>)
 8003f68:	9904      	ldr	r1, [sp, #16]
 8003f6a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8003f6e:	fb03 2301 	mla	r3, r3, r1, r2
 8003f72:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003f76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f78:	9307      	str	r3, [sp, #28]
    for(l=k+1;l<j;l++)
 8003f7a:	2658      	movs	r6, #88	@ 0x58
 8003f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80041b8 <actingOnATFS+0xc54>)
 8003f7e:	9a02      	ldr	r2, [sp, #8]
  for(k=0;k<j-1;k++)
 8003f80:	f04f 0a00 	mov.w	sl, #0
 8003f84:	f1a1 0904 	sub.w	r9, r1, #4
 8003f88:	4637      	mov	r7, r6
    for(l=k+1;l<j;l++)
 8003f8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003f8c:	f10a 0a01 	add.w	sl, sl, #1
 8003f90:	458a      	cmp	sl, r1
 8003f92:	da44      	bge.n	800401e <actingOnATFS+0xaba>
 8003f94:	f1be 0f0d 	cmp.w	lr, #13
 8003f98:	d041      	beq.n	800401e <actingOnATFS+0xaba>
 8003f9a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 8003f9e:	e9cd e205 	strd	lr, r2, [sp, #20]
 8003fa2:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003fa6:	469b      	mov	fp, r3
 8003fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003faa:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8003fae:	462b      	mov	r3, r5
 8003fb0:	9714      	str	r7, [sp, #80]	@ 0x50
 8003fb2:	463d      	mov	r5, r7
      for(i=j+1;i<N;i++)
 8003fb4:	9a07      	ldr	r2, [sp, #28]
 8003fb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003fba:	9f05      	ldr	r7, [sp, #20]
 8003fbc:	9501      	str	r5, [sp, #4]
 8003fbe:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8003fc2:	9303      	str	r3, [sp, #12]
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8003fc4:	eb09 068a 	add.w	r6, r9, sl, lsl #2
  for(k=0;k<j-1;k++)
 8003fc8:	46d8      	mov	r8, fp
 8003fca:	f504 75b0 	add.w	r5, r4, #352	@ 0x160
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8003fce:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003fd2:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8003fd6:	f000 fc5b 	bl	8004890 <multiplicationModuloP>
 8003fda:	f858 3f08 	ldr.w	r3, [r8, #8]!
 8003fde:	181b      	adds	r3, r3, r0
 8003fe0:	f8c8 3000 	str.w	r3, [r8]
 8003fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003fe8:	eb43 0301 	adc.w	r3, r3, r1
 8003fec:	42ac      	cmp	r4, r5
 8003fee:	f8c8 3004 	str.w	r3, [r8, #4]
 8003ff2:	d1ec      	bne.n	8003fce <actingOnATFS+0xa6a>
      for(i=j+1;i<N;i++)
 8003ff4:	3701      	adds	r7, #1
 8003ff6:	2f0d      	cmp	r7, #13
 8003ff8:	f10a 0a58 	add.w	sl, sl, #88	@ 0x58
 8003ffc:	d1e2      	bne.n	8003fc4 <actingOnATFS+0xa60>
    for(l=k+1;l<j;l++)
 8003ffe:	9d01      	ldr	r5, [sp, #4]
 8004000:	9a06      	ldr	r2, [sp, #24]
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	3558      	adds	r5, #88	@ 0x58
 8004006:	4295      	cmp	r5, r2
 8004008:	f50b 7b30 	add.w	fp, fp, #704	@ 0x2c0
 800400c:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8004010:	d1d0      	bne.n	8003fb4 <actingOnATFS+0xa50>
 8004012:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8004016:	f8dd e014 	ldr.w	lr, [sp, #20]
 800401a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800401c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  for(k=0;k<j-1;k++)
 800401e:	9908      	ldr	r1, [sp, #32]
 8004020:	458a      	cmp	sl, r1
 8004022:	f502 628f 	add.w	r2, r2, #1144	@ 0x478
 8004026:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 800402a:	f507 679a 	add.w	r7, r7, #1232	@ 0x4d0
 800402e:	d1ac      	bne.n	8003f8a <actingOnATFS+0xa26>
 8004030:	9a02      	ldr	r2, [sp, #8]
 8004032:	4860      	ldr	r0, [pc, #384]	@ (80041b4 <actingOnATFS+0xc50>)
 8004034:	f502 638f 	add.w	r3, r2, #1144	@ 0x478
 8004038:	4693      	mov	fp, r2
 800403a:	4a60      	ldr	r2, [pc, #384]	@ (80041bc <actingOnATFS+0xc58>)
 800403c:	2158      	movs	r1, #88	@ 0x58
  for(k=0; k<j-1; k++)
 800403e:	2400      	movs	r4, #0
 8004040:	f502 62af 	add.w	r2, r2, #1400	@ 0x578
 8004044:	1f05      	subs	r5, r0, #4
 8004046:	4626      	mov	r6, r4
 8004048:	460f      	mov	r7, r1
    for(l=k+1; l<j; l++)
 800404a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800404c:	3601      	adds	r6, #1
 800404e:	428e      	cmp	r6, r1
 8004050:	da1f      	bge.n	8004092 <actingOnATFS+0xb2e>
 8004052:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8004056:	e9cd 6e01 	strd	r6, lr, [sp, #4]
 800405a:	463c      	mov	r4, r7
 800405c:	9703      	str	r7, [sp, #12]
 800405e:	461e      	mov	r6, r3
 8004060:	4617      	mov	r7, r2
      _MOD_RED_(k*(N*N)+l*N+j, k*N+l);
 8004062:	f5a7 7930 	sub.w	r9, r7, #704	@ 0x2c0
 8004066:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800406a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800406e:	f000 fc23 	bl	80048b8 <reductionModuloP>
 8004072:	45b9      	cmp	r9, r7
 8004074:	f848 0f04 	str.w	r0, [r8, #4]!
 8004078:	d1f7      	bne.n	800406a <actingOnATFS+0xb06>
    for(l=k+1; l<j; l++)
 800407a:	3458      	adds	r4, #88	@ 0x58
 800407c:	455c      	cmp	r4, fp
 800407e:	f506 668f 	add.w	r6, r6, #1144	@ 0x478
 8004082:	f507 7730 	add.w	r7, r7, #704	@ 0x2c0
 8004086:	d1ec      	bne.n	8004062 <actingOnATFS+0xafe>
 8004088:	e9dd 6e01 	ldrd	r6, lr, [sp, #4]
 800408c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8004090:	9f03      	ldr	r7, [sp, #12]
  for(k=0; k<j-1; k++)
 8004092:	9908      	ldr	r1, [sp, #32]
 8004094:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 8004098:	428e      	cmp	r6, r1
 800409a:	f50b 6b8f 	add.w	fp, fp, #1144	@ 0x478
 800409e:	f507 679a 	add.w	r7, r7, #1232	@ 0x4d0
 80040a2:	f103 0310 	add.w	r3, r3, #16
 80040a6:	f502 521a 	add.w	r2, r2, #9856	@ 0x2680
 80040aa:	d1ce      	bne.n	800404a <actingOnATFS+0xae6>
  for(j=0;j<N;j++)
 80040ac:	9b04      	ldr	r3, [sp, #16]
 80040ae:	3301      	adds	r3, #1
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040b4:	f503 538f 	add.w	r3, r3, #4576	@ 0x11e0
 80040b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80040ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040bc:	9302      	str	r3, [sp, #8]
 80040be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80040c0:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80040c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80040c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040c8:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 80040cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80040ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040d0:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 80040d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80040d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80040d8:	f1be 0f0d 	cmp.w	lr, #13
 80040dc:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80040e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80040e2:	f47f aac0 	bne.w	8003666 <actingOnATFS+0x102>
 80040e6:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 80041c4 <actingOnATFS+0xc60>
  int index=0;
 80040ea:	2700      	movs	r7, #0
 80040ec:	46d8      	mov	r8, fp
 80040ee:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
 80040f2:	46bb      	mov	fp, r7
    for(i=0; i<N-2; i++)
 80040f4:	2400      	movs	r4, #0
 80040f6:	4625      	mov	r5, r4
 80040f8:	f8cd b004 	str.w	fp, [sp, #4]
 80040fc:	46c2      	mov	sl, r8
 80040fe:	f8cd 8008 	str.w	r8, [sp, #8]
      for(j=i+1; j<N-1; j++)
 8004102:	3501      	adds	r5, #1
 8004104:	e9cd 5a03 	strd	r5, sl, [sp, #12]
 8004108:	462e      	mov	r6, r5
	      for(k=j+1; k<N; k++){
 800410a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800410c:	46b3      	mov	fp, r6
 800410e:	eb07 0309 	add.w	r3, r7, r9
 8004112:	3601      	adds	r6, #1
 8004114:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004118:	4654      	mov	r4, sl
 800411a:	46b0      	mov	r8, r6
          catf_out[index]=reductionStrict(atf_in[(i*(N*N)+j*N+k)*vec_size+r]);
 800411c:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
 8004120:	2100      	movs	r1, #0
 8004122:	f000 fbdf 	bl	80048e4 <reductionStrict>
	      for(k=j+1; k<N; k++){
 8004126:	f108 0801 	add.w	r8, r8, #1
 800412a:	f1b8 0f0d 	cmp.w	r8, #13
          catf_out[index]=reductionStrict(atf_in[(i*(N*N)+j*N+k)*vec_size+r]);
 800412e:	f845 0f04 	str.w	r0, [r5, #4]!
	      for(k=j+1; k<N; k++){
 8004132:	f504 74b0 	add.w	r4, r4, #352	@ 0x160
 8004136:	d1f1      	bne.n	800411c <actingOnATFS+0xbb8>
          index++;
 8004138:	f107 010c 	add.w	r1, r7, #12
      for(j=i+1; j<N-1; j++)
 800413c:	2e0c      	cmp	r6, #12
          index++;
 800413e:	eba1 070b 	sub.w	r7, r1, fp
      for(j=i+1; j<N-1; j++)
 8004142:	f50a 5a9a 	add.w	sl, sl, #4928	@ 0x1340
 8004146:	d1e0      	bne.n	800410a <actingOnATFS+0xba6>
    for(i=0; i<N-2; i++)
 8004148:	e9dd 5a03 	ldrd	r5, sl, [sp, #12]
 800414c:	f50a 4a7b 	add.w	sl, sl, #64256	@ 0xfb00
 8004150:	2d0b      	cmp	r5, #11
 8004152:	f10a 0aa0 	add.w	sl, sl, #160	@ 0xa0
 8004156:	d1d4      	bne.n	8004102 <actingOnATFS+0xb9e>
  for(r=0; r<nb_atf; r++)
 8004158:	e9dd b801 	ldrd	fp, r8, [sp, #4]
 800415c:	f10b 0b01 	add.w	fp, fp, #1
 8004160:	f1bb 0f54 	cmp.w	fp, #84	@ 0x54
 8004164:	f108 0804 	add.w	r8, r8, #4
 8004168:	d1c4      	bne.n	80040f4 <actingOnATFS+0xb90>
    actingOnATFwColumn_vec32(atfs_actingOnATFS, columns+j*N*NB32_VEC_ROUND, j, NB32_VEC_ROUND, buf_actingOnATFS);
  /* the output IS NOT vectorized: this is used by the hash function using ordered challenges ! */
  compressATFS_32_to_32_vec(atf_out, atfs_actingOnATFS, ROUND, NB32_VEC_ROUND);

}
 800416a:	b01b      	add	sp, #108	@ 0x6c
 800416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004170:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8004174:	eb09 0103 	add.w	r1, r9, r3
 8004178:	f1a3 0e08 	sub.w	lr, r3, #8
	        datf_out[(i*(N*N)+j*N+k)*vec_size+r]=atf_in[index+r];
 800417c:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8004180:	f841 4f04 	str.w	r4, [r1, #4]!
	      for(r=0; r<vec_size; r++)
 8004184:	4572      	cmp	r2, lr
 8004186:	d1f9      	bne.n	800417c <actingOnATFS+0xc18>
 8004188:	f7ff ba3c 	b.w	8003604 <actingOnATFS+0xa0>
  for(k=0;k<j-1;k++)
 800418c:	f43f aeeb 	beq.w	8003f66 <actingOnATFS+0xa02>
 8004190:	e78c      	b.n	80040ac <actingOnATFS+0xb48>
  for(k=1;k<j-1;k++)
 8004192:	9b08      	ldr	r3, [sp, #32]
 8004194:	2b01      	cmp	r3, #1
 8004196:	f47f ae86 	bne.w	8003ea6 <actingOnATFS+0x942>
 800419a:	e6e4      	b.n	8003f66 <actingOnATFS+0xa02>
  for(k=0;k<j-2;k++)
 800419c:	9b04      	ldr	r3, [sp, #16]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	f63f adb2 	bhi.w	8003d08 <actingOnATFS+0x7a4>
 80041a4:	e782      	b.n	80040ac <actingOnATFS+0xb48>
  for(k=0;k<j-1;k++)
 80041a6:	230b      	movs	r3, #11
 80041a8:	9308      	str	r3, [sp, #32]
 80041aa:	9b02      	ldr	r3, [sp, #8]
 80041ac:	3358      	adds	r3, #88	@ 0x58
 80041ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80041b0:	e562      	b.n	8003c78 <actingOnATFS+0x714>
 80041b2:	bf00      	nop
 80041b4:	c001d0c0 	.word	0xc001d0c0
 80041b8:	c00002b8 	.word	0xc00002b8
 80041bc:	c0000000 	.word	0xc0000000
 80041c0:	c0002938 	.word	0xc0002938
 80041c4:	c001e400 	.word	0xc001e400
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	9308      	str	r3, [sp, #32]
 80041ce:	9b02      	ldr	r3, [sp, #8]
 80041d0:	3358      	adds	r3, #88	@ 0x58
 80041d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80041d4:	4bc1      	ldr	r3, [pc, #772]	@ (80044dc <actingOnATFS+0xf78>)
 80041d6:	3b08      	subs	r3, #8
 80041d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80041da:	e476      	b.n	8003aca <actingOnATFS+0x566>
  for(k=j+1;k<N-2;k++)
 80041dc:	f1be 0f0b 	cmp.w	lr, #11
 80041e0:	f43f ad0f 	beq.w	8003c02 <actingOnATFS+0x69e>
 80041e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041e6:	f503 5624 	add.w	r6, r3, #10496	@ 0x2900
 80041ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041ec:	3b04      	subs	r3, #4
 80041ee:	3638      	adds	r6, #56	@ 0x38
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	4bbb      	ldr	r3, [pc, #748]	@ (80044e0 <actingOnATFS+0xf7c>)
 80041f4:	f503 53a4 	add.w	r3, r3, #5248	@ 0x1480
 80041f8:	46b3      	mov	fp, r6
 80041fa:	f64f 32a0 	movw	r2, #64416	@ 0xfba0
 80041fe:	331c      	adds	r3, #28
 8004200:	fb02 360e 	mla	r6, r2, lr, r3
 8004204:	46d9      	mov	r9, fp
 8004206:	f8dd b004 	ldr.w	fp, [sp, #4]
 800420a:	4677      	mov	r7, lr
 800420c:	4632      	mov	r2, r6
    for(l=k+1;l<N-1;l++)
 800420e:	3701      	adds	r7, #1
 8004210:	e9cd 7206 	strd	r7, r2, [sp, #24]
 8004214:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8004218:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800421c:	4614      	mov	r4, r2
 800421e:	46ca      	mov	sl, r9
 8004220:	46b8      	mov	r8, r7
 8004222:	9614      	str	r6, [sp, #80]	@ 0x50
      for(i=l+1;i<N;i++)
 8004224:	f108 0801 	add.w	r8, r8, #1
 8004228:	2358      	movs	r3, #88	@ 0x58
 800422a:	fb03 f508 	mul.w	r5, r3, r8
 800422e:	46c1      	mov	r9, r8
 8004230:	f8cd 800c 	str.w	r8, [sp, #12]
 8004234:	9405      	str	r4, [sp, #20]
 8004236:	4626      	mov	r6, r4
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8004238:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
    for(l=k+1;l<N-1;l++)
 800423c:	46d0      	mov	r8, sl
 800423e:	f506 74b0 	add.w	r4, r6, #352	@ 0x160
        _MADD_(k*N+l, k*(N*N)+l*N+i, i);
 8004242:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8004246:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800424a:	f000 fb21 	bl	8004890 <multiplicationModuloP>
 800424e:	f858 3f08 	ldr.w	r3, [r8, #8]!
 8004252:	181b      	adds	r3, r3, r0
 8004254:	f8c8 3000 	str.w	r3, [r8]
 8004258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800425c:	eb43 0301 	adc.w	r3, r3, r1
 8004260:	42b4      	cmp	r4, r6
 8004262:	f8c8 3004 	str.w	r3, [r8, #4]
 8004266:	d1ec      	bne.n	8004242 <actingOnATFS+0xcde>
      for(i=l+1;i<N;i++)
 8004268:	f109 0901 	add.w	r9, r9, #1
 800426c:	f1b9 0f0d 	cmp.w	r9, #13
 8004270:	f105 0558 	add.w	r5, r5, #88	@ 0x58
 8004274:	d001      	beq.n	800427a <actingOnATFS+0xd16>
 8004276:	4626      	mov	r6, r4
 8004278:	e7de      	b.n	8004238 <actingOnATFS+0xcd4>
    for(l=k+1;l<N-1;l++)
 800427a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800427e:	9c05      	ldr	r4, [sp, #20]
 8004280:	f1b8 0f0c 	cmp.w	r8, #12
 8004284:	f50a 7a30 	add.w	sl, sl, #704	@ 0x2c0
 8004288:	f504 549a 	add.w	r4, r4, #4928	@ 0x1340
 800428c:	d1ca      	bne.n	8004224 <actingOnATFS+0xcc0>
  for(k=j+1;k<N-2;k++)
 800428e:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
 8004292:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8004296:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800429a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800429c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80042a0:	2f0b      	cmp	r7, #11
 80042a2:	f509 591a 	add.w	r9, r9, #9856	@ 0x2680
 80042a6:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 80042aa:	d1b0      	bne.n	800420e <actingOnATFS+0xcaa>
  for(k=j+1;k<N-2;k++)
 80042ac:	f1be 0f0b 	cmp.w	lr, #11
 80042b0:	f43f aca7 	beq.w	8003c02 <actingOnATFS+0x69e>
 80042b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80042b6:	f503 592f 	add.w	r9, r3, #11200	@ 0x2bc0
 80042ba:	f109 0938 	add.w	r9, r9, #56	@ 0x38
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 80042be:	46f0      	mov	r8, lr
 80042c0:	46ca      	mov	sl, r9
    for(l=k+2;l<N;l++)
 80042c2:	2358      	movs	r3, #88	@ 0x58
 80042c4:	f108 0402 	add.w	r4, r8, #2
      for(i=k+1;i<l;i++)
 80042c8:	f108 0801 	add.w	r8, r8, #1
 80042cc:	fb03 f008 	mul.w	r0, r3, r8
 80042d0:	e9cd 8006 	strd	r8, r0, [sp, #24]
 80042d4:	eb00 0903 	add.w	r9, r0, r3
 80042d8:	46d3      	mov	fp, sl
 80042da:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 80042de:	960b      	str	r6, [sp, #44]	@ 0x2c
 80042e0:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 80042e4:	4635      	mov	r5, r6
 80042e6:	464f      	mov	r7, r9
 80042e8:	9b06      	ldr	r3, [sp, #24]
 80042ea:	429c      	cmp	r4, r3
 80042ec:	dd27      	ble.n	800433e <actingOnATFS+0xdda>
 80042ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80042f2:	9403      	str	r4, [sp, #12]
 80042f4:	9505      	str	r5, [sp, #20]
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 80042f6:	9b01      	ldr	r3, [sp, #4]
      for(i=k+1;i<l;i++)
 80042f8:	465c      	mov	r4, fp
 80042fa:	eb03 0688 	add.w	r6, r3, r8, lsl #2
 80042fe:	46a9      	mov	r9, r5
 8004300:	f505 7ab0 	add.w	sl, r5, #352	@ 0x160
        _MSUB_(k*N+l, k*(N*N)+i*N+l, i);
 8004304:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8004308:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800430c:	f1c1 21ff 	rsb	r1, r1, #4278255360	@ 0xff00ff00
 8004310:	f501 017f 	add.w	r1, r1, #16711680	@ 0xff0000
 8004314:	31fb      	adds	r1, #251	@ 0xfb
 8004316:	f000 fabb 	bl	8004890 <multiplicationModuloP>
 800431a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800431e:	181b      	adds	r3, r3, r0
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	eb43 0301 	adc.w	r3, r3, r1
 8004328:	45ca      	cmp	sl, r9
 800432a:	6063      	str	r3, [r4, #4]
 800432c:	d1ea      	bne.n	8004304 <actingOnATFS+0xda0>
      for(i=k+1;i<l;i++)
 800432e:	f108 0858 	add.w	r8, r8, #88	@ 0x58
 8004332:	4547      	cmp	r7, r8
 8004334:	f505 558f 	add.w	r5, r5, #4576	@ 0x11e0
 8004338:	d1dd      	bne.n	80042f6 <actingOnATFS+0xd92>
 800433a:	9c03      	ldr	r4, [sp, #12]
 800433c:	9d05      	ldr	r5, [sp, #20]
    for(l=k+2;l<N;l++)
 800433e:	3401      	adds	r4, #1
 8004340:	2c0d      	cmp	r4, #13
 8004342:	f107 0758 	add.w	r7, r7, #88	@ 0x58
 8004346:	f50b 7b30 	add.w	fp, fp, #704	@ 0x2c0
 800434a:	f505 75b0 	add.w	r5, r5, #352	@ 0x160
 800434e:	d1cb      	bne.n	80042e8 <actingOnATFS+0xd84>
  for(k=j+1;k<N-2;k++)
 8004350:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004354:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004356:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800435a:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 800435e:	f506 467b 	add.w	r6, r6, #64256	@ 0xfb00
 8004362:	f1b8 0f0b 	cmp.w	r8, #11
 8004366:	f50a 5a1a 	add.w	sl, sl, #9856	@ 0x2680
 800436a:	f106 06a0 	add.w	r6, r6, #160	@ 0xa0
 800436e:	d1a8      	bne.n	80042c2 <actingOnATFS+0xd5e>
  for(k=j+2;k<N-1;k++)
 8004370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004372:	3302      	adds	r3, #2
 8004374:	459e      	cmp	lr, r3
 8004376:	db2a      	blt.n	80043ce <actingOnATFS+0xe6a>
 8004378:	4672      	mov	r2, lr
    for(l=k+1;l<N;l++)
 800437a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800437c:	2a0b      	cmp	r2, #11
 800437e:	bfa8      	it	ge
 8004380:	220b      	movge	r2, #11
 8004382:	1ccb      	adds	r3, r1, #3
  for(k=j+2;k<N-1;k++)
 8004384:	4293      	cmp	r3, r2
 8004386:	dc20      	bgt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 8004388:	1d0b      	adds	r3, r1, #4
  for(k=j+2;k<N-1;k++)
 800438a:	4293      	cmp	r3, r2
 800438c:	dc1d      	bgt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 800438e:	1d4b      	adds	r3, r1, #5
  for(k=j+2;k<N-1;k++)
 8004390:	4293      	cmp	r3, r2
 8004392:	dc1a      	bgt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 8004394:	1d8b      	adds	r3, r1, #6
  for(k=j+2;k<N-1;k++)
 8004396:	4293      	cmp	r3, r2
 8004398:	dc17      	bgt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 800439a:	1dcb      	adds	r3, r1, #7
  for(k=j+2;k<N-1;k++)
 800439c:	4293      	cmp	r3, r2
 800439e:	dc14      	bgt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 80043a0:	f101 0308 	add.w	r3, r1, #8
  for(k=j+2;k<N-1;k++)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	dc10      	bgt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 80043a8:	f101 0309 	add.w	r3, r1, #9
  for(k=j+2;k<N-1;k++)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	db0c      	blt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 80043b0:	f101 030a 	add.w	r3, r1, #10
  for(k=j+2;k<N-1;k++)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	db08      	blt.n	80043ca <actingOnATFS+0xe66>
    for(l=k+1;l<N;l++)
 80043b8:	f101 030b 	add.w	r3, r1, #11
  for(k=j+2;k<N-1;k++)
 80043bc:	4293      	cmp	r3, r2
 80043be:	dc04      	bgt.n	80043ca <actingOnATFS+0xe66>
  for(k=j+1; k<N-1; k++)
 80043c0:	f1be 0f0b 	cmp.w	lr, #11
 80043c4:	f77f ac1d 	ble.w	8003c02 <actingOnATFS+0x69e>
 80043c8:	e452      	b.n	8003c70 <actingOnATFS+0x70c>
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d0f8      	beq.n	80043c0 <actingOnATFS+0xe5c>
 80043ce:	4a43      	ldr	r2, [pc, #268]	@ (80044dc <actingOnATFS+0xf78>)
 80043d0:	9804      	ldr	r0, [sp, #16]
 80043d2:	461d      	mov	r5, r3
 80043d4:	f44f 531a 	mov.w	r3, #9856	@ 0x2680
 80043d8:	fb03 2305 	mla	r3, r3, r5, r2
 80043dc:	f503 782e 	add.w	r8, r3, #696	@ 0x2b8
 80043e0:	f44f 639a 	mov.w	r3, #1232	@ 0x4d0
 80043e4:	fb05 f303 	mul.w	r3, r5, r3
 80043e8:	f103 0a58 	add.w	sl, r3, #88	@ 0x58
 80043ec:	4b3c      	ldr	r3, [pc, #240]	@ (80044e0 <actingOnATFS+0xf7c>)
 80043ee:	f64e 0260 	movw	r2, #59488	@ 0xe860
 80043f2:	fb02 3300 	mla	r3, r2, r0, r3
 80043f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80043f8:	f503 4369 	add.w	r3, r3, #59648	@ 0xe900
 80043fc:	f502 71ae 	add.w	r1, r2, #348	@ 0x15c
 8004400:	33bc      	adds	r3, #188	@ 0xbc
 8004402:	f44f 529a 	mov.w	r2, #4928	@ 0x1340
 8004406:	fb02 1200 	mla	r2, r2, r0, r1
 800440a:	462c      	mov	r4, r5
 800440c:	4656      	mov	r6, sl
 800440e:	461f      	mov	r7, r3
    for(l=k+1;l<N;l++)
 8004410:	46a3      	mov	fp, r4
 8004412:	3401      	adds	r4, #1
 8004414:	4621      	mov	r1, r4
 8004416:	9401      	str	r4, [sp, #4]
 8004418:	9603      	str	r6, [sp, #12]
 800441a:	4634      	mov	r4, r6
 800441c:	46c2      	mov	sl, r8
 800441e:	460e      	mov	r6, r1
 8004420:	f8cd 8014 	str.w	r8, [sp, #20]
 8004424:	4611      	mov	r1, r2
 8004426:	463b      	mov	r3, r7
 8004428:	e9cd 4e06 	strd	r4, lr, [sp, #24]
 800442c:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 8004430:	9609      	str	r6, [sp, #36]	@ 0x24
 8004432:	460f      	mov	r7, r1
 8004434:	4646      	mov	r6, r8
 8004436:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004438:	46f0      	mov	r8, lr
 800443a:	9314      	str	r3, [sp, #80]	@ 0x50
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 800443c:	f5a6 75b0 	sub.w	r5, r6, #352	@ 0x160
    for(l=k+1;l<N;l++)
 8004440:	4654      	mov	r4, sl
 8004442:	46b9      	mov	r9, r7
        _MADD_(k*N+l, i*(N*N)+k*N+l, i);
 8004444:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8004448:	f859 1f04 	ldr.w	r1, [r9, #4]!
 800444c:	f000 fa20 	bl	8004890 <multiplicationModuloP>
 8004450:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8004454:	181b      	adds	r3, r3, r0
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	6863      	ldr	r3, [r4, #4]
 800445a:	eb43 0301 	adc.w	r3, r3, r1
 800445e:	42b5      	cmp	r5, r6
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	d1ef      	bne.n	8004444 <actingOnATFS+0xee0>
      for(i=j+1;i<k;i++)
 8004464:	f108 0801 	add.w	r8, r8, #1
 8004468:	f505 4668 	add.w	r6, r5, #59392	@ 0xe800
 800446c:	45c3      	cmp	fp, r8
 800446e:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004472:	f106 0660 	add.w	r6, r6, #96	@ 0x60
 8004476:	dce1      	bgt.n	800443c <actingOnATFS+0xed8>
    for(l=k+1;l<N;l++)
 8004478:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800447a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800447c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800447e:	e9dd 4e06 	ldrd	r4, lr, [sp, #24]
 8004482:	3601      	adds	r6, #1
 8004484:	2e0d      	cmp	r6, #13
 8004486:	f50a 7a30 	add.w	sl, sl, #704	@ 0x2c0
 800448a:	f104 0458 	add.w	r4, r4, #88	@ 0x58
 800448e:	d1cb      	bne.n	8004428 <actingOnATFS+0xec4>
  for(k=j+2;k<N-1;k++)
 8004490:	9c01      	ldr	r4, [sp, #4]
 8004492:	9e03      	ldr	r6, [sp, #12]
 8004494:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004498:	2c0c      	cmp	r4, #12
 800449a:	460a      	mov	r2, r1
 800449c:	461f      	mov	r7, r3
 800449e:	f508 581a 	add.w	r8, r8, #9856	@ 0x2680
 80044a2:	f506 669a 	add.w	r6, r6, #1232	@ 0x4d0
 80044a6:	d1b3      	bne.n	8004410 <actingOnATFS+0xeac>
 80044a8:	e78a      	b.n	80043c0 <actingOnATFS+0xe5c>
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <actingOnATFS+0xf7c>)
 80044ac:	3b04      	subs	r3, #4
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044b2:	f503 782e 	add.w	r8, r3, #696	@ 0x2b8
 80044b6:	f7ff ba05 	b.w	80038c4 <actingOnATFS+0x360>
 80044ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    for(l=j+2;l<N;l++)
 80044bc:	462c      	mov	r4, r5
 80044be:	f503 69af 	add.w	r9, r3, #1400	@ 0x578
 80044c2:	f7ff bac3 	b.w	8003a4c <actingOnATFS+0x4e8>
 80044c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
      for(i=j+1;i<l;i++)
 80044c8:	4674      	mov	r4, lr
 80044ca:	f503 69af 	add.w	r9, r3, #1400	@ 0x578
 80044ce:	f7ff babd 	b.w	8003a4c <actingOnATFS+0x4e8>
  for(k=j+2;k<N-1;k++)
 80044d2:	2e0b      	cmp	r6, #11
 80044d4:	f77f af50 	ble.w	8004378 <actingOnATFS+0xe14>
 80044d8:	f7ff bbca 	b.w	8003c70 <actingOnATFS+0x70c>
 80044dc:	c0000000 	.word	0xc0000000
 80044e0:	c001d0c0 	.word	0xc001d0c0

080044e4 <hashArray>:
#include "compress.h"

/* Hashing of an array */
void hashArray(uint8_t *hash_out, const uint64_t length_out, const uint8_t *array_in, const uint64_t length_in)
{
 80044e4:	b500      	push	{lr}
 80044e6:	b087      	sub	sp, #28
 80044e8:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
  /* old version has constantly LAMBDA/4 for the challenge size */
  /* Keccak(1600-4*LAMBDA, 4*LAMBDA, array_in, length, 0x06, hash_out, LAMBDA/4);*/
  Keccak(1600-4*LAMBDA, 4*LAMBDA, array_in, length_in, 0x06, hash_out, length_out);
 80044ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044f0:	2306      	movs	r3, #6
 80044f2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80044f6:	ed8d 7b00 	vstr	d7, [sp]
 80044fa:	9a08      	ldr	r2, [sp, #32]
 80044fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004500:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8004504:	f004 fc62 	bl	8008dcc <Keccak>
 8004508:	b007      	add	sp, #28
 800450a:	f85d fb04 	ldr.w	pc, [sp], #4
 800450e:	bf00      	nop

08004510 <randomSeed>:
#include "nistseedexpander.h"

/* Randomly generate a seed */
void randomSeed(uint8_t *seed, const size_t seed_size)
{
  randombytes(seed, seed_size);
 8004510:	f003 b8fa 	b.w	8007708 <PQCLEAN_randombytes>

08004514 <expandSeeds>:
  seedexpander_init_customized(rng, key, diversifier, 4294967295);
}

/* Expand a seed to a set of seeds */
void expandSeeds(uint8_t *seeds, const uint8_t *seed, const int nSeeds, const size_t src_seed_size, const size_t out_seed_size)
{
 8004514:	b500      	push	{lr}
 8004516:	b085      	sub	sp, #20
  AES_XOF_struct rng[1];
  initExpander(rng, seed, src_seed_size);
  seedexpander(rng, seeds, nSeeds*out_seed_size);

  #else /* do not use AES, juse use Keccak instead and one shot everything */
  hashArray(seeds, nSeeds*out_seed_size, seed, src_seed_size);
 8004518:	9302      	str	r3, [sp, #8]
 800451a:	9b06      	ldr	r3, [sp, #24]
 800451c:	9100      	str	r1, [sp, #0]
 800451e:	fb03 f202 	mul.w	r2, r3, r2
 8004522:	2300      	movs	r3, #0
 8004524:	9303      	str	r3, [sp, #12]
 8004526:	f7ff ffdd 	bl	80044e4 <hashArray>
  #endif
}
 800452a:	b005      	add	sp, #20
 800452c:	f85d fb04 	ldr.w	pc, [sp], #4

08004530 <expandChallenge>:
  return r;
}

/* Expand a seed to a challenge of ROUND value with K value equal to C and ROUND-K value in [0,C[ */
void expandChallenge(uint64_t *chg_c, uint64_t *chg_nc, uint64_t *chg_val, const uint8_t *seed, const size_t seed_size)
{
 8004530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	f5ad 7d45 	sub.w	sp, sp, #788	@ 0x314
 8004538:	9cce      	ldr	r4, [sp, #824]	@ 0x338
 800453a:	9004      	str	r0, [sp, #16]
  uint64_t chg[ROUND];
  uint64_t C_SIZE=sizeOfValue(C);

  /* this is still done with AES-256, hopefully not a problem */
  /* just like the old ALTEQ, we use the first bits and not everything */
  if (seed_size < 32){
 800453c:	2c1f      	cmp	r4, #31
 800453e:	f240 80fb 	bls.w	8004738 <expandChallenge+0x208>
 8004542:	461d      	mov	r5, r3
  memcpy(key, seed, seed_size);
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	4688      	mov	r8, r1
 8004548:	4692      	mov	sl, r2
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	ac1c      	add	r4, sp, #112	@ 0x70
 8004552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004554:	6928      	ldr	r0, [r5, #16]
 8004556:	6969      	ldr	r1, [r5, #20]
 8004558:	69aa      	ldr	r2, [r5, #24]
 800455a:	69eb      	ldr	r3, [r5, #28]
 800455c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memset(diversifier, 0x00, 8);
 800455e:	2300      	movs	r3, #0
 8004560:	e9cd 3308 	strd	r3, r3, [sp, #32]
  seedexpander_init_customized(rng, key, diversifier, 4294967295);
 8004564:	a91c      	add	r1, sp, #112	@ 0x70
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	aa08      	add	r2, sp, #32
 800456c:	a80a      	add	r0, sp, #40	@ 0x28
 800456e:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 8004572:	f002 ff51 	bl	8007418 <seedexpander_init_customized>
  /* Fix other coefficients of the challenge */
  for (i=0;i<ROUND;i++)
    if (chg[i]==0)
      chg[i]=randomValue(rng, &buf, &buf_size, C, C_SIZE);
#else
  for(k=0;k<ROUND;k++)
 8004576:	465b      	mov	r3, fp
    chg[k]=C;
 8004578:	2007      	movs	r0, #7
 800457a:	2100      	movs	r1, #0
 800457c:	e9e3 0102 	strd	r0, r1, [r3, #8]!
  for(k=0;k<ROUND;k++)
 8004580:	aac2      	add	r2, sp, #776	@ 0x308
 8004582:	429a      	cmp	r2, r3
 8004584:	d1fa      	bne.n	800457c <expandChallenge+0x4c>
 8004586:	f04f 0e00 	mov.w	lr, #0
  while ((1lu<<val_size)<val)
 800458a:	e9cd b805 	strd	fp, r8, [sp, #20]
 800458e:	f04f 0c54 	mov.w	ip, #84	@ 0x54
  uint64_t buf_size=0;
 8004592:	4675      	mov	r5, lr
 8004594:	4677      	mov	r7, lr
  uint64_t buf=0;
 8004596:	4674      	mov	r4, lr
 8004598:	4676      	mov	r6, lr
  while ((1lu<<val_size)<val)
 800459a:	46f1      	mov	r9, lr
 800459c:	f8cd a01c 	str.w	sl, [sp, #28]
 80045a0:	46f3      	mov	fp, lr
  int val_size=1;
 80045a2:	f04f 0a01 	mov.w	sl, #1
  while ((1lu<<val_size)<val)
 80045a6:	2301      	movs	r3, #1
    val_size++;
 80045a8:	f10a 0a01 	add.w	sl, sl, #1
  while ((1lu<<val_size)<val)
 80045ac:	fa03 f80a 	lsl.w	r8, r3, sl
 80045b0:	45e0      	cmp	r8, ip
 80045b2:	eb79 030b 	sbcs.w	r3, r9, fp
 80045b6:	d3f6      	bcc.n	80045a6 <expandChallenge+0x76>
    r=(*buf)&((1lu<<max_size)-1lu);
 80045b8:	f108 33ff 	add.w	r3, r8, #4294967295
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	f1ca 0320 	rsb	r3, sl, #32
 80045c2:	9302      	str	r3, [sp, #8]
 80045c4:	f1aa 0320 	sub.w	r3, sl, #32
  return val_size;
 80045c8:	ea4f 78ea 	mov.w	r8, sl, asr #31
static uint64_t randomValue(AES_XOF_struct *rng, uint64_t *buf, uint64_t *buf_size, uint64_t max, uint64_t max_size)
 80045cc:	9303      	str	r3, [sp, #12]
 80045ce:	463b      	mov	r3, r7
 80045d0:	f8cd c000 	str.w	ip, [sp]
 80045d4:	4657      	mov	r7, sl
 80045d6:	46c2      	mov	sl, r8
 80045d8:	4698      	mov	r8, r3
    while ((*buf_size)<max_size)
 80045da:	42bd      	cmp	r5, r7
 80045dc:	eb78 020a 	sbcs.w	r2, r8, sl
 80045e0:	d214      	bcs.n	800460c <expandChallenge+0xdc>
	seedexpander(rng, &c, 1lu);
 80045e2:	2201      	movs	r2, #1
 80045e4:	a908      	add	r1, sp, #32
 80045e6:	a80a      	add	r0, sp, #40	@ 0x28
 80045e8:	f002 feaa 	bl	8007340 <seedexpander>
	(*buf)=((*buf)<<8)+(uint64_t)c;
 80045ec:	0236      	lsls	r6, r6, #8
 80045ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80045f2:	ea46 6614 	orr.w	r6, r6, r4, lsr #24
 80045f6:	0224      	lsls	r4, r4, #8
 80045f8:	18e4      	adds	r4, r4, r3
 80045fa:	f146 0600 	adc.w	r6, r6, #0
	(*buf_size)+=8;
 80045fe:	3508      	adds	r5, #8
 8004600:	f148 0800 	adc.w	r8, r8, #0
    while ((*buf_size)<max_size)
 8004604:	42bd      	cmp	r5, r7
 8004606:	eb78 030a 	sbcs.w	r3, r8, sl
 800460a:	d3ea      	bcc.n	80045e2 <expandChallenge+0xb2>
    r=(*buf)&((1lu<<max_size)-1lu);
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	ea04 0103 	and.w	r1, r4, r3
    (*buf)=((*buf)>>max_size);
 8004612:	9b02      	ldr	r3, [sp, #8]
 8004614:	fa24 f207 	lsr.w	r2, r4, r7
 8004618:	fa06 f403 	lsl.w	r4, r6, r3
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	4322      	orrs	r2, r4
 8004620:	fa26 f403 	lsr.w	r4, r6, r3
  } while (r>=max);
 8004624:	9b00      	ldr	r3, [sp, #0]
    (*buf_size)-=max_size;
 8004626:	1bed      	subs	r5, r5, r7
 8004628:	eb68 080a 	sbc.w	r8, r8, sl
  } while (r>=max);
 800462c:	4299      	cmp	r1, r3
    (*buf)=((*buf)>>max_size);
 800462e:	ea44 0402 	orr.w	r4, r4, r2
  } while (r>=max);
 8004632:	eb79 020b 	sbcs.w	r2, r9, fp
    (*buf)=((*buf)>>max_size);
 8004636:	fa26 f607 	lsr.w	r6, r6, r7
  } while (r>=max);
 800463a:	d2ce      	bcs.n	80045da <expandChallenge+0xaa>
  /* Pick randomly K coefficients of the challenge to be striclty inferior to C */
  for(k=0;k<K;k++)
    {
      r=randomValue(rng, &buf, &buf_size, ROUND-k,sizeOfValue(ROUND-k));
 800463c:	469c      	mov	ip, r3
 800463e:	4647      	mov	r7, r8
 8004640:	ab1c      	add	r3, sp, #112	@ 0x70
 8004642:	4688      	mov	r8, r1
      for (i=0;i<=r;i++)
 8004644:	2200      	movs	r2, #0
	if (chg[i]<C)
 8004646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800464a:	2807      	cmp	r0, #7
 800464c:	f171 0100 	sbcs.w	r1, r1, #0
	  r++;
 8004650:	bf38      	it	cc
 8004652:	f108 0801 	addcc.w	r8, r8, #1
      for (i=0;i<=r;i++)
 8004656:	3201      	adds	r2, #1
 8004658:	4542      	cmp	r2, r8
 800465a:	f103 0308 	add.w	r3, r3, #8
 800465e:	ddf2      	ble.n	8004646 <expandChallenge+0x116>
 8004660:	46e2      	mov	sl, ip
    while ((*buf_size)<max_size)
 8004662:	2d03      	cmp	r5, #3
 8004664:	f177 0300 	sbcs.w	r3, r7, #0
 8004668:	d210      	bcs.n	800468c <expandChallenge+0x15c>
	seedexpander(rng, &c, 1lu);
 800466a:	2201      	movs	r2, #1
 800466c:	a908      	add	r1, sp, #32
 800466e:	a80a      	add	r0, sp, #40	@ 0x28
 8004670:	f002 fe66 	bl	8007340 <seedexpander>
	(*buf)=((*buf)<<8)+(uint64_t)c;
 8004674:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8004678:	0236      	lsls	r6, r6, #8
 800467a:	0223      	lsls	r3, r4, #8
 800467c:	ea46 6614 	orr.w	r6, r6, r4, lsr #24
 8004680:	189c      	adds	r4, r3, r2
 8004682:	f146 0600 	adc.w	r6, r6, #0
	(*buf_size)+=8;
 8004686:	3508      	adds	r5, #8
 8004688:	f147 0700 	adc.w	r7, r7, #0
    (*buf_size)-=max_size;
 800468c:	3d03      	subs	r5, #3
    r=(*buf)&((1lu<<max_size)-1lu);
 800468e:	f004 0207 	and.w	r2, r4, #7
    (*buf_size)-=max_size;
 8004692:	f167 0700 	sbc.w	r7, r7, #0
    (*buf)=((*buf)>>max_size);
 8004696:	08e3      	lsrs	r3, r4, #3
  } while (r>=max);
 8004698:	2a07      	cmp	r2, #7
    (*buf)=((*buf)>>max_size);
 800469a:	ea43 7446 	orr.w	r4, r3, r6, lsl #29
 800469e:	ea4f 06d6 	mov.w	r6, r6, lsr #3
  } while (r>=max);
 80046a2:	d0de      	beq.n	8004662 <expandChallenge+0x132>
      chg[r]=randomValue(rng, &buf, &buf_size, C, C_SIZE);
 80046a4:	4613      	mov	r3, r2
 80046a6:	aa1c      	add	r2, sp, #112	@ 0x70
  for(k=0;k<K;k++)
 80046a8:	f11a 3cff 	adds.w	ip, sl, #4294967295
      chg[r]=randomValue(rng, &buf, &buf_size, C, C_SIZE);
 80046ac:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
 80046b0:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
  for(k=0;k<K;k++)
 80046b4:	f16b 0b00 	sbc.w	fp, fp, #0
 80046b8:	f1ac 033e 	sub.w	r3, ip, #62	@ 0x3e
 80046bc:	ea53 030b 	orrs.w	r3, r3, fp
      chg[r]=randomValue(rng, &buf, &buf_size, C, C_SIZE);
 80046c0:	f8c1 9004 	str.w	r9, [r1, #4]
  for(k=0;k<K;k++)
 80046c4:	f47f af6d 	bne.w	80045a2 <expandChallenge+0x72>
 80046c8:	2300      	movs	r3, #0
 80046ca:	e9dd b805 	ldrd	fp, r8, [sp, #20]
 80046ce:	f8dd a01c 	ldr.w	sl, [sp, #28]
  long k0=0;
 80046d2:	9f04      	ldr	r7, [sp, #16]
 80046d4:	4618      	mov	r0, r3
  long k1=0;
 80046d6:	461d      	mov	r5, r3
  long k0=0;
 80046d8:	461c      	mov	r4, r3
 80046da:	e014      	b.n	8004706 <expandChallenge+0x1d6>
#endif

  for (i=0;i<ROUND;i++)
    if (chg[i]<C)
      {
	chg_nc[k0]=i;
 80046dc:	eb08 0cc4 	add.w	ip, r8, r4, lsl #3
 80046e0:	00e6      	lsls	r6, r4, #3
 80046e2:	f848 3034 	str.w	r3, [r8, r4, lsl #3]
 80046e6:	f8cc 0004 	str.w	r0, [ip, #4]
	chg_val[k0++]=chg[i];
 80046ea:	eb0a 0c06 	add.w	ip, sl, r6
  for (i=0;i<ROUND;i++)
 80046ee:	3301      	adds	r3, #1
	chg_val[k0++]=chg[i];
 80046f0:	f84a 1006 	str.w	r1, [sl, r6]
 80046f4:	f8cc 2004 	str.w	r2, [ip, #4]
  for (i=0;i<ROUND;i++)
 80046f8:	aac2      	add	r2, sp, #776	@ 0x308
 80046fa:	f140 0000 	adc.w	r0, r0, #0
 80046fe:	455a      	cmp	r2, fp
	chg_val[k0++]=chg[i];
 8004700:	f104 0401 	add.w	r4, r4, #1
  for (i=0;i<ROUND;i++)
 8004704:	d014      	beq.n	8004730 <expandChallenge+0x200>
    if (chg[i]<C)
 8004706:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800470a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800470e:	2907      	cmp	r1, #7
 8004710:	f172 0600 	sbcs.w	r6, r2, #0
 8004714:	d3e2      	bcc.n	80046dc <expandChallenge+0x1ac>
      }
    else
      chg_c[k1++]=i;
 8004716:	eb07 02c5 	add.w	r2, r7, r5, lsl #3
 800471a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
 800471e:	6050      	str	r0, [r2, #4]
  for (i=0;i<ROUND;i++)
 8004720:	3301      	adds	r3, #1
 8004722:	aac2      	add	r2, sp, #776	@ 0x308
 8004724:	f140 0000 	adc.w	r0, r0, #0
 8004728:	455a      	cmp	r2, fp
      chg_c[k1++]=i;
 800472a:	f105 0501 	add.w	r5, r5, #1
  for (i=0;i<ROUND;i++)
 800472e:	d1ea      	bne.n	8004706 <expandChallenge+0x1d6>
}
 8004730:	f50d 7d45 	add.w	sp, sp, #788	@ 0x314
 8004734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fprintf(stderr, "expandChallenge error, seed size too low: seed_size %lu",seed_size);
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <expandChallenge+0x21c>)
 800473a:	4905      	ldr	r1, [pc, #20]	@ (8004750 <expandChallenge+0x220>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4622      	mov	r2, r4
 8004740:	68d8      	ldr	r0, [r3, #12]
 8004742:	f007 fd21 	bl	800c188 <fiprintf>
    exit(1);
 8004746:	2001      	movs	r0, #1
 8004748:	f007 fbaa 	bl	800bea0 <exit>
 800474c:	20000018 	.word	0x20000018
 8004750:	0800ce64 	.word	0x0800ce64

08004754 <expandATF_vec_copy>:

/* Expand a seed to several identical atf */
void
expandATF_vec_copy(uint32_t *atf, const uint8_t *seed, const int nb_copies, const int vec_size, const size_t seed_size)
{
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 800475c:	4604      	mov	r4, r0
 800475e:	f10d 0037 	add.w	r0, sp, #55	@ 0x37
 8004762:	4615      	mov	r5, r2

  int i=0, j=0, r;
  /* arbitrary storage size */
  const size_t storage_size = NB32_VEC_NN;
  uint32_t storage[NB32_VEC_NN] __attribute__(( aligned(32)));
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 8004764:	f04f 0b00 	mov.w	fp, #0
 8004768:	9ac6      	ldr	r2, [sp, #792]	@ 0x318
 800476a:	9202      	str	r2, [sp, #8]
{
 800476c:	f020 081f 	bic.w	r8, r0, #31
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 8004770:	9100      	str	r1, [sp, #0]
{
 8004772:	9305      	str	r3, [sp, #20]
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 8004774:	f8cd b00c 	str.w	fp, [sp, #12]
 8004778:	4640      	mov	r0, r8
 800477a:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 800477e:	2300      	movs	r3, #0
 8004780:	ea4f 0955 	mov.w	r9, r5, lsr #1
{
 8004784:	460f      	mov	r7, r1
 8004786:	f025 0a01 	bic.w	sl, r5, #1
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 800478a:	f7ff feab 	bl	80044e4 <hashArray>
  int i=0, j=0, r;
 800478e:	465e      	mov	r6, fp
 8004790:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8004794:	4659      	mov	r1, fp

  while (i < LEN)
  {
    /* refresh through rehash: dumb way but probabilistically we should not refresh even once in most cases */
    if (j==storage_size){
 8004796:	29b0      	cmp	r1, #176	@ 0xb0
 8004798:	d023      	beq.n	80047e2 <expandATF_vec_copy+0x8e>
    if (storage[j]<PRIME){
      for (r = 0; r < nb_copies; r++)
        atf[(i*vec_size)+r] = storage[j];
	    i++;
    }
    j++;
 800479a:	460b      	mov	r3, r1
 800479c:	3101      	adds	r1, #1
    if (storage[j]<PRIME){
 800479e:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 80047a2:	1d93      	adds	r3, r2, #6
 80047a4:	d8f7      	bhi.n	8004796 <expandATF_vec_copy+0x42>
      for (r = 0; r < nb_copies; r++)
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	dd13      	ble.n	80047d2 <expandATF_vec_copy+0x7e>
        atf[(i*vec_size)+r] = storage[j];
 80047aa:	9b05      	ldr	r3, [sp, #20]
 80047ac:	2d01      	cmp	r5, #1
 80047ae:	fb06 f003 	mul.w	r0, r6, r3
 80047b2:	d023      	beq.n	80047fc <expandATF_vec_copy+0xa8>
 80047b4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80047b8:	eb09 0c03 	add.w	ip, r9, r3
 80047bc:	e9c3 2200 	strd	r2, r2, [r3]
      for (r = 0; r < nb_copies; r++)
 80047c0:	3308      	adds	r3, #8
 80047c2:	459c      	cmp	ip, r3
 80047c4:	d1fa      	bne.n	80047bc <expandATF_vec_copy+0x68>
 80047c6:	4555      	cmp	r5, sl
 80047c8:	d003      	beq.n	80047d2 <expandATF_vec_copy+0x7e>
 80047ca:	4653      	mov	r3, sl
        atf[(i*vec_size)+r] = storage[j];
 80047cc:	4403      	add	r3, r0
 80047ce:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	    i++;
 80047d2:	3601      	adds	r6, #1
  while (i < LEN)
 80047d4:	f5b6 7f8f 	cmp.w	r6, #286	@ 0x11e
 80047d8:	d1dd      	bne.n	8004796 <expandATF_vec_copy+0x42>
  }

  #endif
}
 80047da:	f50d 7d3d 	add.w	sp, sp, #756	@ 0x2f4
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 80047e2:	9bc6      	ldr	r3, [sp, #792]	@ 0x318
 80047e4:	9700      	str	r7, [sp, #0]
 80047e6:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 80047ea:	4640      	mov	r0, r8
 80047ec:	2300      	movs	r3, #0
 80047ee:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 80047f2:	f7ff fe77 	bl	80044e4 <hashArray>
 80047f6:	2101      	movs	r1, #1
      j = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e7d0      	b.n	800479e <expandATF_vec_copy+0x4a>
      for (r = 0; r < nb_copies; r++)
 80047fc:	2300      	movs	r3, #0
 80047fe:	e7e5      	b.n	80047cc <expandATF_vec_copy+0x78>

08004800 <expandColumns>:


/* Expand a seed to n matrix columns inversible */
void expandColumns(uint32_t *col, const uint8_t *seed, const size_t seed_size)
{
 8004800:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8004804:	f5ad 7d3a 	sub.w	sp, sp, #744	@ 0x2e8
 8004808:	f10d 062f 	add.w	r6, sp, #47	@ 0x2f

  int i=0, j=0, k=0;
  /* arbitrary storage size */
  const size_t storage_size = NB32_VEC_NN;
  uint32_t storage[NB32_VEC_NN] __attribute__(( aligned(32)));
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 800480c:	2400      	movs	r4, #0
{
 800480e:	f026 061f 	bic.w	r6, r6, #31
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 8004812:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8004816:	9100      	str	r1, [sp, #0]
 8004818:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 800481c:	2300      	movs	r3, #0
{
 800481e:	4607      	mov	r7, r0
  hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), seed, seed_size);
 8004820:	4630      	mov	r0, r6
 8004822:	f7ff fe5f 	bl	80044e4 <hashArray>
  int i=0, j=0, k=0;
 8004826:	4625      	mov	r5, r4
 8004828:	4622      	mov	r2, r4
 800482a:	46a0      	mov	r8, r4

  while (i < N)
  {
    /* refresh through rehash: dumb way but probabilistically we should not refresh even once in most cases */
    if (k==storage_size){
      hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), (uint8_t*)storage, storage_size*sizeof(uint32_t));
 800482c:	f44f 7a30 	mov.w	sl, #704	@ 0x2c0
 8004830:	f04f 0b00 	mov.w	fp, #0
    if (k==storage_size){
 8004834:	2ab0      	cmp	r2, #176	@ 0xb0
 8004836:	d018      	beq.n	800486a <expandColumns+0x6a>
      k = 0;
    }
    col[i*N+j]=storage[k++];
 8004838:	4611      	mov	r1, r2
 800483a:	3201      	adds	r2, #1
 800483c:	eb08 0304 	add.w	r3, r8, r4
 8004840:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004844:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8004848:	442b      	add	r3, r5
 800484a:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
    if ( col[i*N+j]<PRIME && (i!=j||col[i*N+j]>0) && (++j==N) ){
 800484e:	1d8b      	adds	r3, r1, #6
 8004850:	d8f0      	bhi.n	8004834 <expandColumns+0x34>
 8004852:	42a5      	cmp	r5, r4
 8004854:	d015      	beq.n	8004882 <expandColumns+0x82>
 8004856:	3501      	adds	r5, #1
 8004858:	2d0d      	cmp	r5, #13
 800485a:	d1eb      	bne.n	8004834 <expandColumns+0x34>
	    j=0; i++;
 800485c:	3401      	adds	r4, #1
  while (i < N)
 800485e:	2c0d      	cmp	r4, #13
 8004860:	d112      	bne.n	8004888 <expandColumns+0x88>
	  }
  }

  #endif
}
 8004862:	f50d 7d3a 	add.w	sp, sp, #744	@ 0x2e8
 8004866:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
      hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), (uint8_t*)storage, storage_size*sizeof(uint32_t));
 800486a:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 800486e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004872:	9600      	str	r6, [sp, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	4630      	mov	r0, r6
 8004878:	f7ff fe34 	bl	80044e4 <hashArray>
      k = 0;
 800487c:	2100      	movs	r1, #0
      hashArray((uint8_t*)storage, storage_size*sizeof(uint32_t), (uint8_t*)storage, storage_size*sizeof(uint32_t));
 800487e:	2201      	movs	r2, #1
 8004880:	e7dc      	b.n	800483c <expandColumns+0x3c>
    if ( col[i*N+j]<PRIME && (i!=j||col[i*N+j]>0) && (++j==N) ){
 8004882:	2900      	cmp	r1, #0
 8004884:	d0d6      	beq.n	8004834 <expandColumns+0x34>
 8004886:	e7e6      	b.n	8004856 <expandColumns+0x56>
	    j=0; i++;
 8004888:	2500      	movs	r5, #0
 800488a:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800488e:	e7d1      	b.n	8004834 <expandColumns+0x34>

08004890 <multiplicationModuloP>:

/* Modular multiplication 32 by 32 to 33bits, using 32-bits entries */
uint64_t
multiplicationModuloP(const uint32_t a, const uint32_t b)
{
  uint64_t r=a*(uint64_t)b;
 8004890:	fba0 0101 	umull	r0, r1, r0, r1
  r=r-PRIME*(r>>LOG_Q);
 8004894:	078b      	lsls	r3, r1, #30
 8004896:	1a5b      	subs	r3, r3, r1
 8004898:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800489c:	f162 0200 	sbc.w	r2, r2, #0
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	1a5b      	subs	r3, r3, r1
 80048aa:	f162 0200 	sbc.w	r2, r2, #0
 80048ae:	1ac0      	subs	r0, r0, r3
 80048b0:	eb61 0102 	sbc.w	r1, r1, r2
  return r;
}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <reductionModuloP>:
/* Modular reduction 61 to 32bits */
uint32_t
reductionModuloP(const uint64_t a)
{
  uint64_t r=a;
  r=r-PRIME*(r>>LOG_Q);
 80048b8:	078b      	lsls	r3, r1, #30
 80048ba:	1a5b      	subs	r3, r3, r1
 80048bc:	ea4f 0291 	mov.w	r2, r1, lsr #2
 80048c0:	f162 0200 	sbc.w	r2, r2, #0
 80048c4:	0092      	lsls	r2, r2, #2
 80048c6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	1a5b      	subs	r3, r3, r1
 80048ce:	f162 0200 	sbc.w	r2, r2, #0
 80048d2:	1ac0      	subs	r0, r0, r3
 80048d4:	eb61 0102 	sbc.w	r1, r1, r2
  r=r-PRIME*(r>>LOG_Q);
 80048d8:	ebc1 7381 	rsb	r3, r1, r1, lsl #30
 80048dc:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
  return (uint32_t)r;
}
 80048e0:	1a40      	subs	r0, r0, r1
 80048e2:	4770      	bx	lr

080048e4 <reductionStrict>:

/* Modular reduction 32 to [0,P[ */
uint32_t reductionStrict(const uint64_t a)
{
  uint64_t r=a;
  if (r>=PRIME)
 80048e4:	f06f 0205 	mvn.w	r2, #5
 80048e8:	4282      	cmp	r2, r0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	418b      	sbcs	r3, r1
    return (r-PRIME);
 80048f0:	bf38      	it	cc
 80048f2:	3005      	addcc	r0, #5
  return (uint32_t)r;
}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop

080048f8 <inversionModuloP>:
  uint64_t r=a*(uint64_t)b;
 80048f8:	fba0 2300 	umull	r2, r3, r0, r0
  r=r-PRIME*(r>>LOG_Q);
 80048fc:	0799      	lsls	r1, r3, #30
 80048fe:	1ac9      	subs	r1, r1, r3

/* Modular inversion of a field element */
uint32_t inversionModuloP(const uint32_t a)
{
 8004900:	b510      	push	{r4, lr}
  r=r-PRIME*(r>>LOG_Q);
 8004902:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004906:	f164 0400 	sbc.w	r4, r4, #0
 800490a:	00a4      	lsls	r4, r4, #2
 800490c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004910:	0089      	lsls	r1, r1, #2
 8004912:	1ac9      	subs	r1, r1, r3
 8004914:	f164 0400 	sbc.w	r4, r4, #0
 8004918:	1a52      	subs	r2, r2, r1
 800491a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800491e:	0799      	lsls	r1, r3, #30
 8004920:	1ac9      	subs	r1, r1, r3
 8004922:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004926:	f164 0400 	sbc.w	r4, r4, #0
 800492a:	00a4      	lsls	r4, r4, #2
 800492c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004930:	0089      	lsls	r1, r1, #2
 8004932:	1ac9      	subs	r1, r1, r3
 8004934:	f164 0400 	sbc.w	r4, r4, #0
 8004938:	1a52      	subs	r2, r2, r1
 800493a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800493e:	ebc3 7183 	rsb	r1, r3, r3, lsl #30
 8004942:	ebc3 0381 	rsb	r3, r3, r1, lsl #2
 8004946:	1ad3      	subs	r3, r2, r3
  uint64_t r=a*(uint64_t)b;
 8004948:	fba3 3200 	umull	r3, r2, r3, r0
  r=r-PRIME*(r>>LOG_Q);
 800494c:	0791      	lsls	r1, r2, #30
 800494e:	1a89      	subs	r1, r1, r2
 8004950:	ea4f 0492 	mov.w	r4, r2, lsr #2
 8004954:	f164 0400 	sbc.w	r4, r4, #0
 8004958:	00a4      	lsls	r4, r4, #2
 800495a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800495e:	0089      	lsls	r1, r1, #2
 8004960:	1a89      	subs	r1, r1, r2
 8004962:	f164 0400 	sbc.w	r4, r4, #0
 8004966:	1a5b      	subs	r3, r3, r1
 8004968:	eb62 0204 	sbc.w	r2, r2, r4
  r=r-PRIME*(r>>LOG_Q);
 800496c:	0791      	lsls	r1, r2, #30
 800496e:	1a89      	subs	r1, r1, r2
 8004970:	ea4f 0492 	mov.w	r4, r2, lsr #2
 8004974:	f164 0400 	sbc.w	r4, r4, #0
 8004978:	00a4      	lsls	r4, r4, #2
 800497a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800497e:	0089      	lsls	r1, r1, #2
 8004980:	1a89      	subs	r1, r1, r2
 8004982:	f164 0400 	sbc.w	r4, r4, #0
 8004986:	1a5b      	subs	r3, r3, r1
 8004988:	eb62 0204 	sbc.w	r2, r2, r4
  r=r-PRIME*(r>>LOG_Q);
 800498c:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8004990:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 8004994:	1a99      	subs	r1, r3, r2
  uint64_t r=a*(uint64_t)b;
 8004996:	fba1 3201 	umull	r3, r2, r1, r1
  r=r-PRIME*(r>>LOG_Q);
 800499a:	ea4f 7c82 	mov.w	ip, r2, lsl #30
 800499e:	ebbc 0c02 	subs.w	ip, ip, r2
 80049a2:	ea4f 0492 	mov.w	r4, r2, lsr #2
 80049a6:	f164 0400 	sbc.w	r4, r4, #0
 80049aa:	00a4      	lsls	r4, r4, #2
 80049ac:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 80049b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80049b4:	ebbc 0c02 	subs.w	ip, ip, r2
 80049b8:	f164 0400 	sbc.w	r4, r4, #0
 80049bc:	ebb3 030c 	subs.w	r3, r3, ip
 80049c0:	eb62 0204 	sbc.w	r2, r2, r4
  r=r-PRIME*(r>>LOG_Q);
 80049c4:	ea4f 7c82 	mov.w	ip, r2, lsl #30
 80049c8:	ebbc 0c02 	subs.w	ip, ip, r2
 80049cc:	ea4f 0492 	mov.w	r4, r2, lsr #2
 80049d0:	f164 0400 	sbc.w	r4, r4, #0
 80049d4:	00a4      	lsls	r4, r4, #2
 80049d6:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 80049da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80049de:	ebbc 0c02 	subs.w	ip, ip, r2
 80049e2:	f164 0400 	sbc.w	r4, r4, #0
 80049e6:	ebb3 030c 	subs.w	r3, r3, ip
 80049ea:	eb62 0204 	sbc.w	r2, r2, r4
  r=r-PRIME*(r>>LOG_Q);
 80049ee:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
 80049f2:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
 80049f6:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 80049f8:	fba3 2303 	umull	r2, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80049fc:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8004a00:	ebbc 0c03 	subs.w	ip, ip, r3
 8004a04:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004a08:	f164 0400 	sbc.w	r4, r4, #0
 8004a0c:	00a4      	lsls	r4, r4, #2
 8004a0e:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004a12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a16:	ebbc 0c03 	subs.w	ip, ip, r3
 8004a1a:	f164 0400 	sbc.w	r4, r4, #0
 8004a1e:	ebb2 020c 	subs.w	r2, r2, ip
 8004a22:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004a26:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8004a2a:	ebbc 0c03 	subs.w	ip, ip, r3
 8004a2e:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004a32:	f164 0400 	sbc.w	r4, r4, #0
 8004a36:	00a4      	lsls	r4, r4, #2
 8004a38:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004a3c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a40:	ebbc 0c03 	subs.w	ip, ip, r3
 8004a44:	f164 0400 	sbc.w	r4, r4, #0
 8004a48:	ebb2 020c 	subs.w	r2, r2, ip
 8004a4c:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004a50:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004a54:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004a58:	1ad2      	subs	r2, r2, r3
  uint64_t r=a*(uint64_t)b;
 8004a5a:	fba2 2301 	umull	r2, r3, r2, r1
  r=r-PRIME*(r>>LOG_Q);
 8004a5e:	0799      	lsls	r1, r3, #30
 8004a60:	1ac9      	subs	r1, r1, r3
 8004a62:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004a66:	f164 0400 	sbc.w	r4, r4, #0
 8004a6a:	00a4      	lsls	r4, r4, #2
 8004a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a70:	0089      	lsls	r1, r1, #2
 8004a72:	1ac9      	subs	r1, r1, r3
 8004a74:	f164 0400 	sbc.w	r4, r4, #0
 8004a78:	1a52      	subs	r2, r2, r1
 8004a7a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004a7e:	0799      	lsls	r1, r3, #30
 8004a80:	1ac9      	subs	r1, r1, r3
 8004a82:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004a86:	f164 0400 	sbc.w	r4, r4, #0
 8004a8a:	00a4      	lsls	r4, r4, #2
 8004a8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a90:	0089      	lsls	r1, r1, #2
 8004a92:	1ac9      	subs	r1, r1, r3
 8004a94:	f164 0400 	sbc.w	r4, r4, #0
 8004a98:	1a52      	subs	r2, r2, r1
 8004a9a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004a9e:	ebc3 7183 	rsb	r1, r3, r3, lsl #30
 8004aa2:	ebc3 0381 	rsb	r3, r3, r1, lsl #2
 8004aa6:	1ad2      	subs	r2, r2, r3
  uint64_t r=a*(uint64_t)b;
 8004aa8:	fba2 3102 	umull	r3, r1, r2, r2
  r=r-PRIME*(r>>LOG_Q);
 8004aac:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8004ab0:	ebbc 0c01 	subs.w	ip, ip, r1
 8004ab4:	ea4f 0491 	mov.w	r4, r1, lsr #2
 8004ab8:	f164 0400 	sbc.w	r4, r4, #0
 8004abc:	00a4      	lsls	r4, r4, #2
 8004abe:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004ac2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004ac6:	ebbc 0c01 	subs.w	ip, ip, r1
 8004aca:	f164 0400 	sbc.w	r4, r4, #0
 8004ace:	ebb3 030c 	subs.w	r3, r3, ip
 8004ad2:	eb61 0104 	sbc.w	r1, r1, r4
  r=r-PRIME*(r>>LOG_Q);
 8004ad6:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8004ada:	ebbc 0c01 	subs.w	ip, ip, r1
 8004ade:	ea4f 0491 	mov.w	r4, r1, lsr #2
 8004ae2:	f164 0400 	sbc.w	r4, r4, #0
 8004ae6:	00a4      	lsls	r4, r4, #2
 8004ae8:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004aec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004af0:	ebbc 0c01 	subs.w	ip, ip, r1
 8004af4:	f164 0400 	sbc.w	r4, r4, #0
 8004af8:	ebb3 030c 	subs.w	r3, r3, ip
 8004afc:	eb61 0104 	sbc.w	r1, r1, r4
  r=r-PRIME*(r>>LOG_Q);
 8004b00:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8004b04:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 8004b08:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 8004b0a:	fba3 3103 	umull	r3, r1, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004b0e:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8004b12:	ebbc 0c01 	subs.w	ip, ip, r1
 8004b16:	ea4f 0491 	mov.w	r4, r1, lsr #2
 8004b1a:	f164 0400 	sbc.w	r4, r4, #0
 8004b1e:	00a4      	lsls	r4, r4, #2
 8004b20:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004b24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004b28:	ebbc 0c01 	subs.w	ip, ip, r1
 8004b2c:	f164 0400 	sbc.w	r4, r4, #0
 8004b30:	ebb3 030c 	subs.w	r3, r3, ip
 8004b34:	eb61 0104 	sbc.w	r1, r1, r4
  r=r-PRIME*(r>>LOG_Q);
 8004b38:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8004b3c:	ebbc 0c01 	subs.w	ip, ip, r1
 8004b40:	ea4f 0491 	mov.w	r4, r1, lsr #2
 8004b44:	f164 0400 	sbc.w	r4, r4, #0
 8004b48:	00a4      	lsls	r4, r4, #2
 8004b4a:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004b4e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004b52:	ebbc 0c01 	subs.w	ip, ip, r1
 8004b56:	f164 0400 	sbc.w	r4, r4, #0
 8004b5a:	ebb3 030c 	subs.w	r3, r3, ip
 8004b5e:	eb61 0104 	sbc.w	r1, r1, r4
  r=r-PRIME*(r>>LOG_Q);
 8004b62:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8004b66:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 8004b6a:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 8004b6c:	fba3 3103 	umull	r3, r1, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004b70:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8004b74:	ebbc 0c01 	subs.w	ip, ip, r1
 8004b78:	ea4f 0491 	mov.w	r4, r1, lsr #2
 8004b7c:	f164 0400 	sbc.w	r4, r4, #0
 8004b80:	00a4      	lsls	r4, r4, #2
 8004b82:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004b86:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004b8a:	ebbc 0c01 	subs.w	ip, ip, r1
 8004b8e:	f164 0400 	sbc.w	r4, r4, #0
 8004b92:	ebb3 030c 	subs.w	r3, r3, ip
 8004b96:	eb61 0104 	sbc.w	r1, r1, r4
  r=r-PRIME*(r>>LOG_Q);
 8004b9a:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8004b9e:	ebbc 0c01 	subs.w	ip, ip, r1
 8004ba2:	ea4f 0491 	mov.w	r4, r1, lsr #2
 8004ba6:	f164 0400 	sbc.w	r4, r4, #0
 8004baa:	00a4      	lsls	r4, r4, #2
 8004bac:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004bb0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004bb4:	ebbc 0c01 	subs.w	ip, ip, r1
 8004bb8:	f164 0400 	sbc.w	r4, r4, #0
 8004bbc:	ebb3 030c 	subs.w	r3, r3, ip
 8004bc0:	eb61 0104 	sbc.w	r1, r1, r4
  r=r-PRIME*(r>>LOG_Q);
 8004bc4:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8004bc8:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 8004bcc:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 8004bce:	fba3 1303 	umull	r1, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004bd2:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8004bd6:	ebbc 0c03 	subs.w	ip, ip, r3
 8004bda:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004bde:	f164 0400 	sbc.w	r4, r4, #0
 8004be2:	00a4      	lsls	r4, r4, #2
 8004be4:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004be8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004bec:	ebbc 0c03 	subs.w	ip, ip, r3
 8004bf0:	f164 0400 	sbc.w	r4, r4, #0
 8004bf4:	ebb1 010c 	subs.w	r1, r1, ip
 8004bf8:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004bfc:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8004c00:	ebbc 0c03 	subs.w	ip, ip, r3
 8004c04:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004c08:	f164 0400 	sbc.w	r4, r4, #0
 8004c0c:	00a4      	lsls	r4, r4, #2
 8004c0e:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004c12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c16:	ebbc 0c03 	subs.w	ip, ip, r3
 8004c1a:	f164 0400 	sbc.w	r4, r4, #0
 8004c1e:	ebb1 010c 	subs.w	r1, r1, ip
 8004c22:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004c26:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004c2a:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004c2e:	1ac9      	subs	r1, r1, r3
  uint64_t r=a*(uint64_t)b;
 8004c30:	fba1 1302 	umull	r1, r3, r1, r2
  r=r-PRIME*(r>>LOG_Q);
 8004c34:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8004c38:	ebbc 0c03 	subs.w	ip, ip, r3
 8004c3c:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004c40:	f164 0400 	sbc.w	r4, r4, #0
 8004c44:	00a4      	lsls	r4, r4, #2
 8004c46:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004c4a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c4e:	ebbc 0c03 	subs.w	ip, ip, r3
 8004c52:	f164 0400 	sbc.w	r4, r4, #0
 8004c56:	ebb1 010c 	subs.w	r1, r1, ip
 8004c5a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004c5e:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8004c62:	ebbc 0c03 	subs.w	ip, ip, r3
 8004c66:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004c6a:	f164 0400 	sbc.w	r4, r4, #0
 8004c6e:	00a4      	lsls	r4, r4, #2
 8004c70:	ea44 749c 	orr.w	r4, r4, ip, lsr #30
 8004c74:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c78:	ebbc 0c03 	subs.w	ip, ip, r3
 8004c7c:	f164 0400 	sbc.w	r4, r4, #0
 8004c80:	ebb1 010c 	subs.w	r1, r1, ip
 8004c84:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004c88:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004c8c:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004c90:	1ac9      	subs	r1, r1, r3
  uint64_t r=a*(uint64_t)b;
 8004c92:	fba1 c301 	umull	ip, r3, r1, r1
  r=r-PRIME*(r>>LOG_Q);
 8004c96:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004c9a:	ebbe 0e03 	subs.w	lr, lr, r3
 8004c9e:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004ca2:	f164 0400 	sbc.w	r4, r4, #0
 8004ca6:	00a4      	lsls	r4, r4, #2
 8004ca8:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004cac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004cb0:	ebbe 0e03 	subs.w	lr, lr, r3
 8004cb4:	f164 0400 	sbc.w	r4, r4, #0
 8004cb8:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004cbc:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004cc0:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004cc4:	ebbe 0e03 	subs.w	lr, lr, r3
 8004cc8:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004ccc:	f164 0400 	sbc.w	r4, r4, #0
 8004cd0:	00a4      	lsls	r4, r4, #2
 8004cd2:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004cd6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004cda:	ebbe 0e03 	subs.w	lr, lr, r3
 8004cde:	f164 0400 	sbc.w	r4, r4, #0
 8004ce2:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004ce6:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004cea:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004cee:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004cf2:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004cf6:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004cfa:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004cfe:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d02:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004d06:	f164 0400 	sbc.w	r4, r4, #0
 8004d0a:	00a4      	lsls	r4, r4, #2
 8004d0c:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004d10:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004d14:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d18:	f164 0400 	sbc.w	r4, r4, #0
 8004d1c:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004d20:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004d24:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004d28:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d2c:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004d30:	f164 0400 	sbc.w	r4, r4, #0
 8004d34:	00a4      	lsls	r4, r4, #2
 8004d36:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004d3a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004d3e:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d42:	f164 0400 	sbc.w	r4, r4, #0
 8004d46:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004d4a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004d4e:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004d52:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004d56:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004d5a:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004d5e:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004d62:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d66:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004d6a:	f164 0400 	sbc.w	r4, r4, #0
 8004d6e:	00a4      	lsls	r4, r4, #2
 8004d70:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004d74:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004d78:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d7c:	f164 0400 	sbc.w	r4, r4, #0
 8004d80:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004d84:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004d88:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004d8c:	ebbe 0e03 	subs.w	lr, lr, r3
 8004d90:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004d94:	f164 0400 	sbc.w	r4, r4, #0
 8004d98:	00a4      	lsls	r4, r4, #2
 8004d9a:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004d9e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004da2:	ebbe 0e03 	subs.w	lr, lr, r3
 8004da6:	f164 0400 	sbc.w	r4, r4, #0
 8004daa:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004dae:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004db2:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004db6:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004dba:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004dbe:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004dc2:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004dc6:	ebbe 0e03 	subs.w	lr, lr, r3
 8004dca:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004dce:	f164 0400 	sbc.w	r4, r4, #0
 8004dd2:	00a4      	lsls	r4, r4, #2
 8004dd4:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004dd8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004ddc:	ebbe 0e03 	subs.w	lr, lr, r3
 8004de0:	f164 0400 	sbc.w	r4, r4, #0
 8004de4:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004de8:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004dec:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004df0:	ebbe 0e03 	subs.w	lr, lr, r3
 8004df4:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004df8:	f164 0400 	sbc.w	r4, r4, #0
 8004dfc:	00a4      	lsls	r4, r4, #2
 8004dfe:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004e02:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004e06:	ebbe 0e03 	subs.w	lr, lr, r3
 8004e0a:	f164 0400 	sbc.w	r4, r4, #0
 8004e0e:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004e12:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004e16:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004e1a:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004e1e:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004e22:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004e26:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004e2a:	ebbe 0e03 	subs.w	lr, lr, r3
 8004e2e:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004e32:	f164 0400 	sbc.w	r4, r4, #0
 8004e36:	00a4      	lsls	r4, r4, #2
 8004e38:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004e3c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004e40:	ebbe 0e03 	subs.w	lr, lr, r3
 8004e44:	f164 0400 	sbc.w	r4, r4, #0
 8004e48:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004e4c:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004e50:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004e54:	ebbe 0e03 	subs.w	lr, lr, r3
 8004e58:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004e5c:	f164 0400 	sbc.w	r4, r4, #0
 8004e60:	00a4      	lsls	r4, r4, #2
 8004e62:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004e66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004e6a:	ebbe 0e03 	subs.w	lr, lr, r3
 8004e6e:	f164 0400 	sbc.w	r4, r4, #0
 8004e72:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004e76:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004e7a:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004e7e:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004e82:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004e86:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004e8a:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004e8e:	ebbe 0e03 	subs.w	lr, lr, r3
 8004e92:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004e96:	f164 0400 	sbc.w	r4, r4, #0
 8004e9a:	00a4      	lsls	r4, r4, #2
 8004e9c:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004ea0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004ea4:	ebbe 0e03 	subs.w	lr, lr, r3
 8004ea8:	f164 0400 	sbc.w	r4, r4, #0
 8004eac:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004eb0:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004eb4:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004eb8:	ebbe 0e03 	subs.w	lr, lr, r3
 8004ebc:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004ec0:	f164 0400 	sbc.w	r4, r4, #0
 8004ec4:	00a4      	lsls	r4, r4, #2
 8004ec6:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004eca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004ece:	ebbe 0e03 	subs.w	lr, lr, r3
 8004ed2:	f164 0400 	sbc.w	r4, r4, #0
 8004ed6:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004eda:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004ede:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004ee2:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004ee6:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004eea:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004eee:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004ef2:	ebbe 0e03 	subs.w	lr, lr, r3
 8004ef6:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004efa:	f164 0400 	sbc.w	r4, r4, #0
 8004efe:	00a4      	lsls	r4, r4, #2
 8004f00:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004f04:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004f08:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f0c:	f164 0400 	sbc.w	r4, r4, #0
 8004f10:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004f14:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004f18:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004f1c:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f20:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004f24:	f164 0400 	sbc.w	r4, r4, #0
 8004f28:	00a4      	lsls	r4, r4, #2
 8004f2a:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004f2e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004f32:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f36:	f164 0400 	sbc.w	r4, r4, #0
 8004f3a:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004f3e:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004f42:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004f46:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004f4a:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004f4e:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8004f52:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004f56:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f5a:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004f5e:	f164 0400 	sbc.w	r4, r4, #0
 8004f62:	00a4      	lsls	r4, r4, #2
 8004f64:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004f68:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004f6c:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f70:	f164 0400 	sbc.w	r4, r4, #0
 8004f74:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004f78:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004f7c:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004f80:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f84:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004f88:	f164 0400 	sbc.w	r4, r4, #0
 8004f8c:	00a4      	lsls	r4, r4, #2
 8004f8e:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004f92:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004f96:	ebbe 0e03 	subs.w	lr, lr, r3
 8004f9a:	f164 0400 	sbc.w	r4, r4, #0
 8004f9e:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004fa2:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004fa6:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8004faa:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8004fae:	ebbc 0c03 	subs.w	ip, ip, r3
  uint64_t r=a*(uint64_t)b;
 8004fb2:	fbac c301 	umull	ip, r3, ip, r1
  r=r-PRIME*(r>>LOG_Q);
 8004fb6:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004fba:	ebbe 0e03 	subs.w	lr, lr, r3
 8004fbe:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004fc2:	f164 0400 	sbc.w	r4, r4, #0
 8004fc6:	00a4      	lsls	r4, r4, #2
 8004fc8:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004fcc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004fd0:	ebbe 0e03 	subs.w	lr, lr, r3
 8004fd4:	f164 0400 	sbc.w	r4, r4, #0
 8004fd8:	ebbc 0c0e 	subs.w	ip, ip, lr
 8004fdc:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8004fe0:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8004fe4:	ebbe 0e03 	subs.w	lr, lr, r3
 8004fe8:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8004fec:	f164 0400 	sbc.w	r4, r4, #0
 8004ff0:	00a4      	lsls	r4, r4, #2
 8004ff2:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8004ff6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004ffa:	ebbe 0e03 	subs.w	lr, lr, r3
 8004ffe:	f164 0400 	sbc.w	r4, r4, #0
 8005002:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005006:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800500a:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 800500e:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8005012:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8005016:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 800501a:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 800501e:	ebbe 0e03 	subs.w	lr, lr, r3
 8005022:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8005026:	f164 0400 	sbc.w	r4, r4, #0
 800502a:	00a4      	lsls	r4, r4, #2
 800502c:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005030:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005034:	ebbe 0e03 	subs.w	lr, lr, r3
 8005038:	f164 0400 	sbc.w	r4, r4, #0
 800503c:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005040:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8005044:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8005048:	ebbe 0e03 	subs.w	lr, lr, r3
 800504c:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8005050:	f164 0400 	sbc.w	r4, r4, #0
 8005054:	00a4      	lsls	r4, r4, #2
 8005056:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 800505a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800505e:	ebbe 0e03 	subs.w	lr, lr, r3
 8005062:	f164 0400 	sbc.w	r4, r4, #0
 8005066:	ebbc 0c0e 	subs.w	ip, ip, lr
 800506a:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800506e:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8005072:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8005076:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 800507a:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 800507e:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8005082:	ebbe 0e03 	subs.w	lr, lr, r3
 8005086:	ea4f 0493 	mov.w	r4, r3, lsr #2
 800508a:	f164 0400 	sbc.w	r4, r4, #0
 800508e:	00a4      	lsls	r4, r4, #2
 8005090:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005094:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005098:	ebbe 0e03 	subs.w	lr, lr, r3
 800509c:	f164 0400 	sbc.w	r4, r4, #0
 80050a0:	ebbc 0c0e 	subs.w	ip, ip, lr
 80050a4:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 80050a8:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 80050ac:	ebbe 0e03 	subs.w	lr, lr, r3
 80050b0:	ea4f 0493 	mov.w	r4, r3, lsr #2
 80050b4:	f164 0400 	sbc.w	r4, r4, #0
 80050b8:	00a4      	lsls	r4, r4, #2
 80050ba:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 80050be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80050c2:	ebbe 0e03 	subs.w	lr, lr, r3
 80050c6:	f164 0400 	sbc.w	r4, r4, #0
 80050ca:	ebbc 0c0e 	subs.w	ip, ip, lr
 80050ce:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 80050d2:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 80050d6:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 80050da:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 80050de:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80050e2:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 80050e6:	ebbe 0e03 	subs.w	lr, lr, r3
 80050ea:	ea4f 0493 	mov.w	r4, r3, lsr #2
 80050ee:	f164 0400 	sbc.w	r4, r4, #0
 80050f2:	00a4      	lsls	r4, r4, #2
 80050f4:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 80050f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80050fc:	ebbe 0e03 	subs.w	lr, lr, r3
 8005100:	f164 0400 	sbc.w	r4, r4, #0
 8005104:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005108:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800510c:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8005110:	ebbe 0e03 	subs.w	lr, lr, r3
 8005114:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8005118:	f164 0400 	sbc.w	r4, r4, #0
 800511c:	00a4      	lsls	r4, r4, #2
 800511e:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005122:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005126:	ebbe 0e03 	subs.w	lr, lr, r3
 800512a:	f164 0400 	sbc.w	r4, r4, #0
 800512e:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005132:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8005136:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 800513a:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 800513e:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 8005142:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8005146:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 800514a:	ebbe 0e03 	subs.w	lr, lr, r3
 800514e:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8005152:	f164 0400 	sbc.w	r4, r4, #0
 8005156:	00a4      	lsls	r4, r4, #2
 8005158:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 800515c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005160:	ebbe 0e03 	subs.w	lr, lr, r3
 8005164:	f164 0400 	sbc.w	r4, r4, #0
 8005168:	ebbc 0c0e 	subs.w	ip, ip, lr
 800516c:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8005170:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8005174:	ebbe 0e03 	subs.w	lr, lr, r3
 8005178:	ea4f 0493 	mov.w	r4, r3, lsr #2
 800517c:	f164 0400 	sbc.w	r4, r4, #0
 8005180:	00a4      	lsls	r4, r4, #2
 8005182:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005186:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800518a:	ebbe 0e03 	subs.w	lr, lr, r3
 800518e:	f164 0400 	sbc.w	r4, r4, #0
 8005192:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005196:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800519a:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 800519e:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 80051a2:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 80051a6:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80051aa:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 80051ae:	ebbe 0e03 	subs.w	lr, lr, r3
 80051b2:	ea4f 0493 	mov.w	r4, r3, lsr #2
 80051b6:	f164 0400 	sbc.w	r4, r4, #0
 80051ba:	00a4      	lsls	r4, r4, #2
 80051bc:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 80051c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80051c4:	ebbe 0e03 	subs.w	lr, lr, r3
 80051c8:	f164 0400 	sbc.w	r4, r4, #0
 80051cc:	ebbc 0c0e 	subs.w	ip, ip, lr
 80051d0:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 80051d4:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 80051d8:	ebbe 0e03 	subs.w	lr, lr, r3
 80051dc:	ea4f 0493 	mov.w	r4, r3, lsr #2
 80051e0:	f164 0400 	sbc.w	r4, r4, #0
 80051e4:	00a4      	lsls	r4, r4, #2
 80051e6:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 80051ea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80051ee:	ebbe 0e03 	subs.w	lr, lr, r3
 80051f2:	f164 0400 	sbc.w	r4, r4, #0
 80051f6:	ebbc 0c0e 	subs.w	ip, ip, lr
 80051fa:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 80051fe:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8005202:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8005206:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 800520a:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 800520e:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8005212:	ebbe 0e03 	subs.w	lr, lr, r3
 8005216:	ea4f 0493 	mov.w	r4, r3, lsr #2
 800521a:	f164 0400 	sbc.w	r4, r4, #0
 800521e:	00a4      	lsls	r4, r4, #2
 8005220:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005224:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005228:	ebbe 0e03 	subs.w	lr, lr, r3
 800522c:	f164 0400 	sbc.w	r4, r4, #0
 8005230:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005234:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8005238:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 800523c:	ebbe 0e03 	subs.w	lr, lr, r3
 8005240:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8005244:	f164 0400 	sbc.w	r4, r4, #0
 8005248:	00a4      	lsls	r4, r4, #2
 800524a:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 800524e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005252:	ebbe 0e03 	subs.w	lr, lr, r3
 8005256:	f164 0400 	sbc.w	r4, r4, #0
 800525a:	ebbc 0c0e 	subs.w	ip, ip, lr
 800525e:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 8005262:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 8005266:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 800526a:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 800526e:	fba3 c303 	umull	ip, r3, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8005272:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 8005276:	ebbe 0e03 	subs.w	lr, lr, r3
 800527a:	ea4f 0493 	mov.w	r4, r3, lsr #2
 800527e:	f164 0400 	sbc.w	r4, r4, #0
 8005282:	00a4      	lsls	r4, r4, #2
 8005284:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005288:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800528c:	ebbe 0e03 	subs.w	lr, lr, r3
 8005290:	f164 0400 	sbc.w	r4, r4, #0
 8005294:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005298:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 800529c:	ea4f 7e83 	mov.w	lr, r3, lsl #30
 80052a0:	ebbe 0e03 	subs.w	lr, lr, r3
 80052a4:	ea4f 0493 	mov.w	r4, r3, lsr #2
 80052a8:	f164 0400 	sbc.w	r4, r4, #0
 80052ac:	00a4      	lsls	r4, r4, #2
 80052ae:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 80052b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80052b6:	ebbe 0e03 	subs.w	lr, lr, r3
 80052ba:	f164 0400 	sbc.w	r4, r4, #0
 80052be:	ebbc 0c0e 	subs.w	ip, ip, lr
 80052c2:	eb63 0304 	sbc.w	r3, r3, r4
  r=r-PRIME*(r>>LOG_Q);
 80052c6:	ebc3 7483 	rsb	r4, r3, r3, lsl #30
 80052ca:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 80052ce:	ebbc 0303 	subs.w	r3, ip, r3
  uint64_t r=a*(uint64_t)b;
 80052d2:	fba3 3c03 	umull	r3, ip, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80052d6:	ea4f 7e8c 	mov.w	lr, ip, lsl #30
 80052da:	ebbe 0e0c 	subs.w	lr, lr, ip
 80052de:	ea4f 049c 	mov.w	r4, ip, lsr #2
 80052e2:	f164 0400 	sbc.w	r4, r4, #0
 80052e6:	00a4      	lsls	r4, r4, #2
 80052e8:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 80052ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80052f0:	ebbe 0e0c 	subs.w	lr, lr, ip
 80052f4:	f164 0400 	sbc.w	r4, r4, #0
 80052f8:	ebb3 030e 	subs.w	r3, r3, lr
 80052fc:	eb6c 0c04 	sbc.w	ip, ip, r4
  r=r-PRIME*(r>>LOG_Q);
 8005300:	ea4f 7e8c 	mov.w	lr, ip, lsl #30
 8005304:	ebbe 0e0c 	subs.w	lr, lr, ip
 8005308:	ea4f 049c 	mov.w	r4, ip, lsr #2
 800530c:	f164 0400 	sbc.w	r4, r4, #0
 8005310:	00a4      	lsls	r4, r4, #2
 8005312:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
 8005316:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800531a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800531e:	f164 0400 	sbc.w	r4, r4, #0
 8005322:	ebb3 030e 	subs.w	r3, r3, lr
 8005326:	eb6c 0c04 	sbc.w	ip, ip, r4
  r=r-PRIME*(r>>LOG_Q);
 800532a:	ebcc 748c 	rsb	r4, ip, ip, lsl #30
 800532e:	ebcc 0c84 	rsb	ip, ip, r4, lsl #2
 8005332:	ebb3 030c 	subs.w	r3, r3, ip
  uint64_t r=a*(uint64_t)b;
 8005336:	fba3 3101 	umull	r3, r1, r3, r1
  r=r-PRIME*(r>>LOG_Q);
 800533a:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 800533e:	ebbc 0c01 	subs.w	ip, ip, r1
 8005342:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 8005346:	f16e 0e00 	sbc.w	lr, lr, #0
 800534a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800534e:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005352:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005356:	ebbc 0c01 	subs.w	ip, ip, r1
 800535a:	f16e 0e00 	sbc.w	lr, lr, #0
 800535e:	ebb3 030c 	subs.w	r3, r3, ip
 8005362:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 8005366:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 800536a:	ebbc 0c01 	subs.w	ip, ip, r1
 800536e:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 8005372:	f16e 0e00 	sbc.w	lr, lr, #0
 8005376:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800537a:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 800537e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005382:	ebbc 0c01 	subs.w	ip, ip, r1
 8005386:	f16e 0e00 	sbc.w	lr, lr, #0
 800538a:	ebb3 030c 	subs.w	r3, r3, ip
 800538e:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 8005392:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8005396:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 800539a:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 800539c:	fba3 3103 	umull	r3, r1, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80053a0:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 80053a4:	ebbc 0c01 	subs.w	ip, ip, r1
 80053a8:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 80053ac:	f16e 0e00 	sbc.w	lr, lr, #0
 80053b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80053b4:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 80053b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80053bc:	ebbc 0c01 	subs.w	ip, ip, r1
 80053c0:	f16e 0e00 	sbc.w	lr, lr, #0
 80053c4:	ebb3 030c 	subs.w	r3, r3, ip
 80053c8:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 80053cc:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 80053d0:	ebbc 0c01 	subs.w	ip, ip, r1
 80053d4:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 80053d8:	f16e 0e00 	sbc.w	lr, lr, #0
 80053dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80053e0:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 80053e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80053e8:	ebbc 0c01 	subs.w	ip, ip, r1
 80053ec:	f16e 0e00 	sbc.w	lr, lr, #0
 80053f0:	ebb3 030c 	subs.w	r3, r3, ip
 80053f4:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 80053f8:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 80053fc:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 8005400:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 8005402:	fba3 3103 	umull	r3, r1, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8005406:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 800540a:	ebbc 0c01 	subs.w	ip, ip, r1
 800540e:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 8005412:	f16e 0e00 	sbc.w	lr, lr, #0
 8005416:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800541a:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 800541e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005422:	ebbc 0c01 	subs.w	ip, ip, r1
 8005426:	f16e 0e00 	sbc.w	lr, lr, #0
 800542a:	ebb3 030c 	subs.w	r3, r3, ip
 800542e:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 8005432:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8005436:	ebbc 0c01 	subs.w	ip, ip, r1
 800543a:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 800543e:	f16e 0e00 	sbc.w	lr, lr, #0
 8005442:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005446:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 800544a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800544e:	ebbc 0c01 	subs.w	ip, ip, r1
 8005452:	f16e 0e00 	sbc.w	lr, lr, #0
 8005456:	ebb3 030c 	subs.w	r3, r3, ip
 800545a:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 800545e:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8005462:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 8005466:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 8005468:	fba3 3103 	umull	r3, r1, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 800546c:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8005470:	ebbc 0c01 	subs.w	ip, ip, r1
 8005474:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 8005478:	f16e 0e00 	sbc.w	lr, lr, #0
 800547c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005480:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005484:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005488:	ebbc 0c01 	subs.w	ip, ip, r1
 800548c:	f16e 0e00 	sbc.w	lr, lr, #0
 8005490:	ebb3 030c 	subs.w	r3, r3, ip
 8005494:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 8005498:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 800549c:	ebbc 0c01 	subs.w	ip, ip, r1
 80054a0:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 80054a4:	f16e 0e00 	sbc.w	lr, lr, #0
 80054a8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80054ac:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 80054b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80054b4:	ebbc 0c01 	subs.w	ip, ip, r1
 80054b8:	f16e 0e00 	sbc.w	lr, lr, #0
 80054bc:	ebb3 030c 	subs.w	r3, r3, ip
 80054c0:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 80054c4:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 80054c8:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 80054cc:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 80054ce:	fba3 3103 	umull	r3, r1, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80054d2:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 80054d6:	ebbc 0c01 	subs.w	ip, ip, r1
 80054da:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 80054de:	f16e 0e00 	sbc.w	lr, lr, #0
 80054e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80054e6:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 80054ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80054ee:	ebbc 0c01 	subs.w	ip, ip, r1
 80054f2:	f16e 0e00 	sbc.w	lr, lr, #0
 80054f6:	ebb3 030c 	subs.w	r3, r3, ip
 80054fa:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 80054fe:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8005502:	ebbc 0c01 	subs.w	ip, ip, r1
 8005506:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 800550a:	f16e 0e00 	sbc.w	lr, lr, #0
 800550e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005512:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005516:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800551a:	ebbc 0c01 	subs.w	ip, ip, r1
 800551e:	f16e 0e00 	sbc.w	lr, lr, #0
 8005522:	ebb3 030c 	subs.w	r3, r3, ip
 8005526:	eb61 010e 	sbc.w	r1, r1, lr
  r=r-PRIME*(r>>LOG_Q);
 800552a:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 800552e:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 8005532:	1a5b      	subs	r3, r3, r1
  uint64_t r=a*(uint64_t)b;
 8005534:	fba3 3202 	umull	r3, r2, r3, r2
  r=r-PRIME*(r>>LOG_Q);
 8005538:	0791      	lsls	r1, r2, #30
 800553a:	1a89      	subs	r1, r1, r2
 800553c:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005540:	f16c 0c00 	sbc.w	ip, ip, #0
 8005544:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005548:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 800554c:	0089      	lsls	r1, r1, #2
 800554e:	1a89      	subs	r1, r1, r2
 8005550:	f16c 0c00 	sbc.w	ip, ip, #0
 8005554:	1a5b      	subs	r3, r3, r1
 8005556:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 800555a:	0791      	lsls	r1, r2, #30
 800555c:	1a89      	subs	r1, r1, r2
 800555e:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005562:	f16c 0c00 	sbc.w	ip, ip, #0
 8005566:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800556a:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 800556e:	0089      	lsls	r1, r1, #2
 8005570:	1a89      	subs	r1, r1, r2
 8005572:	f16c 0c00 	sbc.w	ip, ip, #0
 8005576:	1a5b      	subs	r3, r3, r1
 8005578:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 800557c:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8005580:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 8005584:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 8005586:	fba3 3203 	umull	r3, r2, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 800558a:	0791      	lsls	r1, r2, #30
 800558c:	1a89      	subs	r1, r1, r2
 800558e:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005592:	f16c 0c00 	sbc.w	ip, ip, #0
 8005596:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800559a:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 800559e:	0089      	lsls	r1, r1, #2
 80055a0:	1a89      	subs	r1, r1, r2
 80055a2:	f16c 0c00 	sbc.w	ip, ip, #0
 80055a6:	1a5b      	subs	r3, r3, r1
 80055a8:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 80055ac:	0791      	lsls	r1, r2, #30
 80055ae:	1a89      	subs	r1, r1, r2
 80055b0:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 80055b4:	f16c 0c00 	sbc.w	ip, ip, #0
 80055b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80055bc:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 80055c0:	0089      	lsls	r1, r1, #2
 80055c2:	1a89      	subs	r1, r1, r2
 80055c4:	f16c 0c00 	sbc.w	ip, ip, #0
 80055c8:	1a5b      	subs	r3, r3, r1
 80055ca:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 80055ce:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80055d2:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 80055d6:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 80055d8:	fba3 3200 	umull	r3, r2, r3, r0
  r=r-PRIME*(r>>LOG_Q);
 80055dc:	0791      	lsls	r1, r2, #30
 80055de:	1a89      	subs	r1, r1, r2
 80055e0:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 80055e4:	f16c 0c00 	sbc.w	ip, ip, #0
 80055e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80055ec:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 80055f0:	0089      	lsls	r1, r1, #2
 80055f2:	1a89      	subs	r1, r1, r2
 80055f4:	f16c 0c00 	sbc.w	ip, ip, #0
 80055f8:	1a5b      	subs	r3, r3, r1
 80055fa:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 80055fe:	0791      	lsls	r1, r2, #30
 8005600:	1a89      	subs	r1, r1, r2
 8005602:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005606:	f16c 0c00 	sbc.w	ip, ip, #0
 800560a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800560e:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005612:	0089      	lsls	r1, r1, #2
 8005614:	1a89      	subs	r1, r1, r2
 8005616:	f16c 0c00 	sbc.w	ip, ip, #0
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 8005620:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8005624:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 8005628:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 800562a:	fba3 3203 	umull	r3, r2, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 800562e:	0791      	lsls	r1, r2, #30
 8005630:	1a89      	subs	r1, r1, r2
 8005632:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005636:	f16c 0c00 	sbc.w	ip, ip, #0
 800563a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800563e:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005642:	0089      	lsls	r1, r1, #2
 8005644:	1a89      	subs	r1, r1, r2
 8005646:	f16c 0c00 	sbc.w	ip, ip, #0
 800564a:	1a5b      	subs	r3, r3, r1
 800564c:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 8005650:	0791      	lsls	r1, r2, #30
 8005652:	1a89      	subs	r1, r1, r2
 8005654:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005658:	f16c 0c00 	sbc.w	ip, ip, #0
 800565c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005660:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005664:	0089      	lsls	r1, r1, #2
 8005666:	1a89      	subs	r1, r1, r2
 8005668:	f16c 0c00 	sbc.w	ip, ip, #0
 800566c:	1a5b      	subs	r3, r3, r1
 800566e:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 8005672:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8005676:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 800567a:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 800567c:	fba3 3203 	umull	r3, r2, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 8005680:	0791      	lsls	r1, r2, #30
 8005682:	1a89      	subs	r1, r1, r2
 8005684:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005688:	f16c 0c00 	sbc.w	ip, ip, #0
 800568c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005690:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005694:	0089      	lsls	r1, r1, #2
 8005696:	1a89      	subs	r1, r1, r2
 8005698:	f16c 0c00 	sbc.w	ip, ip, #0
 800569c:	1a5b      	subs	r3, r3, r1
 800569e:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 80056a2:	0791      	lsls	r1, r2, #30
 80056a4:	1a89      	subs	r1, r1, r2
 80056a6:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 80056aa:	f16c 0c00 	sbc.w	ip, ip, #0
 80056ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80056b2:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 80056b6:	0089      	lsls	r1, r1, #2
 80056b8:	1a89      	subs	r1, r1, r2
 80056ba:	f16c 0c00 	sbc.w	ip, ip, #0
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 80056c4:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80056c8:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 80056cc:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 80056ce:	fba3 3203 	umull	r3, r2, r3, r3
  r=r-PRIME*(r>>LOG_Q);
 80056d2:	0791      	lsls	r1, r2, #30
 80056d4:	1a89      	subs	r1, r1, r2
 80056d6:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 80056da:	f16c 0c00 	sbc.w	ip, ip, #0
 80056de:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80056e2:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 80056e6:	0089      	lsls	r1, r1, #2
 80056e8:	1a89      	subs	r1, r1, r2
 80056ea:	f16c 0c00 	sbc.w	ip, ip, #0
 80056ee:	1a5b      	subs	r3, r3, r1
 80056f0:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 80056f4:	0791      	lsls	r1, r2, #30
 80056f6:	1a89      	subs	r1, r1, r2
 80056f8:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 80056fc:	f16c 0c00 	sbc.w	ip, ip, #0
 8005700:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005704:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005708:	0089      	lsls	r1, r1, #2
 800570a:	1a89      	subs	r1, r1, r2
 800570c:	f16c 0c00 	sbc.w	ip, ip, #0
 8005710:	1a5b      	subs	r3, r3, r1
 8005712:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 8005716:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800571a:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 800571e:	1a9b      	subs	r3, r3, r2
  uint64_t r=a*(uint64_t)b;
 8005720:	fba3 3000 	umull	r3, r0, r3, r0
  r=r-PRIME*(r>>LOG_Q);
 8005724:	0782      	lsls	r2, r0, #30
 8005726:	1a12      	subs	r2, r2, r0
 8005728:	ea4f 0190 	mov.w	r1, r0, lsr #2
 800572c:	f161 0100 	sbc.w	r1, r1, #0
 8005730:	0089      	lsls	r1, r1, #2
 8005732:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005736:	0092      	lsls	r2, r2, #2
 8005738:	1a12      	subs	r2, r2, r0
 800573a:	f161 0100 	sbc.w	r1, r1, #0
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	eb60 0001 	sbc.w	r0, r0, r1
  r=r-PRIME*(r>>LOG_Q);
 8005744:	0782      	lsls	r2, r0, #30
 8005746:	1a12      	subs	r2, r2, r0
 8005748:	ea4f 0190 	mov.w	r1, r0, lsr #2
 800574c:	f161 0100 	sbc.w	r1, r1, #0
 8005750:	0089      	lsls	r1, r1, #2
 8005752:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005756:	0092      	lsls	r2, r2, #2
 8005758:	1a12      	subs	r2, r2, r0
 800575a:	f161 0100 	sbc.w	r1, r1, #0
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	eb60 0001 	sbc.w	r0, r0, r1
  r=r-PRIME*(r>>LOG_Q);
 8005764:	ebc0 7280 	rsb	r2, r0, r0, lsl #30
 8005768:	ebc0 0082 	rsb	r0, r0, r2, lsl #2
  b3=reductionModuloP(multiplicationModuloP(b3,b3));
  b3=reductionModuloP(multiplicationModuloP(b3,b3));
  b3=reductionModuloP(multiplicationModuloP(b3,b3));
  b3=reductionModuloP(multiplicationModuloP(b3,a));
  return (b3);
}
 800576c:	1a18      	subs	r0, r3, r0
 800576e:	bd10      	pop	{r4, pc}

08005770 <setInversionModuloP_vec_C>:

/* Modular inversion of a set of C fields element */
void setInversionModuloP_vec_C(uint32_t *set)
{
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	4682      	mov	sl, r0
 8005776:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800577a:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800577e:	f023 093f 	bic.w	r9, r3, #63	@ 0x3f
  int i,r;
  uint32_t mul[N*NB32_VEC_C] __attribute__ ((aligned (64)));
  uint32_t inv0[NB32_VEC_C] __attribute__ ((aligned (64)));

  for (r = 0; r < NB32_VEC_C; r++)
    mul[r]=set[r];
 8005782:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005786:	f8da 2008 	ldr.w	r2, [sl, #8]
 800578a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	f8cd a014 	str.w	sl, [sp, #20]
 8005794:	464c      	mov	r4, r9
 8005796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005798:	f8da 1014 	ldr.w	r1, [sl, #20]
 800579c:	f8da 2018 	ldr.w	r2, [sl, #24]
 80057a0:	f8da 301c 	ldr.w	r3, [sl, #28]
 80057a4:	f8da 0010 	ldr.w	r0, [sl, #16]
 80057a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80057ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057ae:	e9d9 4b00 	ldrd	r4, fp, [r9]
 80057b2:	f8d9 8014 	ldr.w	r8, [r9, #20]
 80057b6:	9401      	str	r4, [sp, #4]
 80057b8:	f509 73c0 	add.w	r3, r9, #384	@ 0x180
 80057bc:	e9d9 2702 	ldrd	r2, r7, [r9, #8]
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	46d6      	mov	lr, sl
 80057c4:	4643      	mov	r3, r8
 80057c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057ca:	f8cd a004 	str.w	sl, [sp, #4]
 80057ce:	f8dd a008 	ldr.w	sl, [sp, #8]
 80057d2:	f8cd 9010 	str.w	r9, [sp, #16]
 80057d6:	e9d9 1606 	ldrd	r1, r6, [r9, #24]
 80057da:	46cc      	mov	ip, r9
 80057dc:	465c      	mov	r4, fp
 80057de:	4691      	mov	r9, r2
  uint64_t r=a*(uint64_t)b;
 80057e0:	f8de 2020 	ldr.w	r2, [lr, #32]
 80057e4:	fba8 8202 	umull	r8, r2, r8, r2
  r=r-PRIME*(r>>LOG_Q);
 80057e8:	ea4f 7b82 	mov.w	fp, r2, lsl #30
 80057ec:	ebbb 0b02 	subs.w	fp, fp, r2
 80057f0:	ea4f 0592 	mov.w	r5, r2, lsr #2
 80057f4:	f165 0500 	sbc.w	r5, r5, #0
 80057f8:	00ad      	lsls	r5, r5, #2
 80057fa:	ea45 759b 	orr.w	r5, r5, fp, lsr #30
 80057fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005802:	ebbb 0b02 	subs.w	fp, fp, r2
 8005806:	f165 0500 	sbc.w	r5, r5, #0
 800580a:	ebb8 080b 	subs.w	r8, r8, fp
 800580e:	eb62 0505 	sbc.w	r5, r2, r5
  r=r-PRIME*(r>>LOG_Q);
 8005812:	ea4f 7b85 	mov.w	fp, r5, lsl #30
 8005816:	ebbb 0b05 	subs.w	fp, fp, r5
 800581a:	ea4f 0295 	mov.w	r2, r5, lsr #2
 800581e:	f162 0200 	sbc.w	r2, r2, #0
 8005822:	0092      	lsls	r2, r2, #2
 8005824:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8005828:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800582c:	ebbb 0b05 	subs.w	fp, fp, r5
 8005830:	f162 0200 	sbc.w	r2, r2, #0
 8005834:	ebb8 080b 	subs.w	r8, r8, fp
 8005838:	eb65 0502 	sbc.w	r5, r5, r2
  uint64_t r=a*(uint64_t)b;
 800583c:	f8de 2024 	ldr.w	r2, [lr, #36]	@ 0x24
  r=r-PRIME*(r>>LOG_Q);
 8005840:	ebc5 7b85 	rsb	fp, r5, r5, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005844:	fba4 4202 	umull	r4, r2, r4, r2
  r=r-PRIME*(r>>LOG_Q);
 8005848:	ebc5 058b 	rsb	r5, r5, fp, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 800584c:	ea4f 7b82 	mov.w	fp, r2, lsl #30
  return (uint32_t)r;
 8005850:	ebb8 0805 	subs.w	r8, r8, r5
  r=r-PRIME*(r>>LOG_Q);
 8005854:	ebbb 0b02 	subs.w	fp, fp, r2
 8005858:	ea4f 0592 	mov.w	r5, r2, lsr #2
 800585c:	f165 0500 	sbc.w	r5, r5, #0
 8005860:	00ad      	lsls	r5, r5, #2
 8005862:	ea45 759b 	orr.w	r5, r5, fp, lsr #30
 8005866:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800586a:	ebbb 0b02 	subs.w	fp, fp, r2
 800586e:	f165 0500 	sbc.w	r5, r5, #0
 8005872:	ebb4 040b 	subs.w	r4, r4, fp
 8005876:	eb62 0205 	sbc.w	r2, r2, r5
  r=r-PRIME*(r>>LOG_Q);
 800587a:	0795      	lsls	r5, r2, #30
 800587c:	1aad      	subs	r5, r5, r2
 800587e:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 8005882:	f16b 0b00 	sbc.w	fp, fp, #0
 8005886:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800588a:	ea4b 7b95 	orr.w	fp, fp, r5, lsr #30
 800588e:	00ad      	lsls	r5, r5, #2
 8005890:	1aad      	subs	r5, r5, r2
 8005892:	f16b 0b00 	sbc.w	fp, fp, #0
 8005896:	1b64      	subs	r4, r4, r5
  uint64_t r=a*(uint64_t)b;
 8005898:	f8de 5028 	ldr.w	r5, [lr, #40]	@ 0x28

  for (i=1;i<N;i++)
    for (r = 0; r < NB32_VEC_C; r++)
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 800589c:	f8cc 8020 	str.w	r8, [ip, #32]
  r=r-PRIME*(r>>LOG_Q);
 80058a0:	eb62 020b 	sbc.w	r2, r2, fp
  uint64_t r=a*(uint64_t)b;
 80058a4:	fba9 5905 	umull	r5, r9, r9, r5
  r=r-PRIME*(r>>LOG_Q);
 80058a8:	ebc2 7b82 	rsb	fp, r2, r2, lsl #30
 80058ac:	ebc2 028b 	rsb	r2, r2, fp, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 80058b0:	ea4f 7b89 	mov.w	fp, r9, lsl #30
  return (uint32_t)r;
 80058b4:	1aa4      	subs	r4, r4, r2
  r=r-PRIME*(r>>LOG_Q);
 80058b6:	ebbb 0b09 	subs.w	fp, fp, r9
 80058ba:	ea4f 0299 	mov.w	r2, r9, lsr #2
 80058be:	f162 0200 	sbc.w	r2, r2, #0
 80058c2:	0092      	lsls	r2, r2, #2
 80058c4:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80058c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80058cc:	ebbb 0b09 	subs.w	fp, fp, r9
 80058d0:	f162 0200 	sbc.w	r2, r2, #0
 80058d4:	ebb5 050b 	subs.w	r5, r5, fp
 80058d8:	eb69 0202 	sbc.w	r2, r9, r2
  r=r-PRIME*(r>>LOG_Q);
 80058dc:	ea4f 7982 	mov.w	r9, r2, lsl #30
 80058e0:	ebb9 0902 	subs.w	r9, r9, r2
 80058e4:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 80058e8:	f16b 0b00 	sbc.w	fp, fp, #0
 80058ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80058f0:	ea4b 7b99 	orr.w	fp, fp, r9, lsr #30
 80058f4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80058f8:	ebb9 0902 	subs.w	r9, r9, r2
 80058fc:	f16b 0b00 	sbc.w	fp, fp, #0
 8005900:	ebb5 0509 	subs.w	r5, r5, r9
 8005904:	eb62 090b 	sbc.w	r9, r2, fp
  uint64_t r=a*(uint64_t)b;
 8005908:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 800590c:	f8cc 4024 	str.w	r4, [ip, #36]	@ 0x24
  uint64_t r=a*(uint64_t)b;
 8005910:	fba7 7202 	umull	r7, r2, r7, r2
  r=r-PRIME*(r>>LOG_Q);
 8005914:	ebc9 7b89 	rsb	fp, r9, r9, lsl #30
 8005918:	ebc9 098b 	rsb	r9, r9, fp, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 800591c:	ea4f 7b82 	mov.w	fp, r2, lsl #30
  return (uint32_t)r;
 8005920:	ebb5 0909 	subs.w	r9, r5, r9
  r=r-PRIME*(r>>LOG_Q);
 8005924:	ebbb 0b02 	subs.w	fp, fp, r2
 8005928:	ea4f 0592 	mov.w	r5, r2, lsr #2
 800592c:	f165 0500 	sbc.w	r5, r5, #0
 8005930:	00ad      	lsls	r5, r5, #2
 8005932:	ea45 759b 	orr.w	r5, r5, fp, lsr #30
 8005936:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800593a:	ebbb 0b02 	subs.w	fp, fp, r2
 800593e:	f165 0500 	sbc.w	r5, r5, #0
 8005942:	ebb7 070b 	subs.w	r7, r7, fp
 8005946:	eb62 0205 	sbc.w	r2, r2, r5
  r=r-PRIME*(r>>LOG_Q);
 800594a:	0795      	lsls	r5, r2, #30
 800594c:	1aad      	subs	r5, r5, r2
 800594e:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 8005952:	f16b 0b00 	sbc.w	fp, fp, #0
 8005956:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800595a:	ea4b 7b95 	orr.w	fp, fp, r5, lsr #30
 800595e:	00ad      	lsls	r5, r5, #2
 8005960:	1aad      	subs	r5, r5, r2
 8005962:	f16b 0b00 	sbc.w	fp, fp, #0
 8005966:	1b7f      	subs	r7, r7, r5
 8005968:	eb62 050b 	sbc.w	r5, r2, fp
  uint64_t r=a*(uint64_t)b;
 800596c:	f8de 2030 	ldr.w	r2, [lr, #48]	@ 0x30
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 8005970:	f8cc 9028 	str.w	r9, [ip, #40]	@ 0x28
  uint64_t r=a*(uint64_t)b;
 8005974:	fba0 0202 	umull	r0, r2, r0, r2
  r=r-PRIME*(r>>LOG_Q);
 8005978:	ebc5 7b85 	rsb	fp, r5, r5, lsl #30
 800597c:	ebc5 058b 	rsb	r5, r5, fp, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 8005980:	ea4f 7b82 	mov.w	fp, r2, lsl #30
  return (uint32_t)r;
 8005984:	1b7f      	subs	r7, r7, r5
  r=r-PRIME*(r>>LOG_Q);
 8005986:	ebbb 0b02 	subs.w	fp, fp, r2
 800598a:	ea4f 0592 	mov.w	r5, r2, lsr #2
 800598e:	f165 0500 	sbc.w	r5, r5, #0
 8005992:	00ad      	lsls	r5, r5, #2
 8005994:	ea45 759b 	orr.w	r5, r5, fp, lsr #30
 8005998:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800599c:	ebbb 0b02 	subs.w	fp, fp, r2
 80059a0:	f165 0500 	sbc.w	r5, r5, #0
 80059a4:	ebb0 000b 	subs.w	r0, r0, fp
 80059a8:	eb62 0205 	sbc.w	r2, r2, r5
  r=r-PRIME*(r>>LOG_Q);
 80059ac:	0795      	lsls	r5, r2, #30
 80059ae:	1aad      	subs	r5, r5, r2
 80059b0:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 80059b4:	f16b 0b00 	sbc.w	fp, fp, #0
 80059b8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80059bc:	ea4b 7b95 	orr.w	fp, fp, r5, lsr #30
 80059c0:	00ad      	lsls	r5, r5, #2
 80059c2:	1aad      	subs	r5, r5, r2
 80059c4:	f16b 0b00 	sbc.w	fp, fp, #0
 80059c8:	1b40      	subs	r0, r0, r5
 80059ca:	eb62 050b 	sbc.w	r5, r2, fp
  uint64_t r=a*(uint64_t)b;
 80059ce:	f8de 2034 	ldr.w	r2, [lr, #52]	@ 0x34
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 80059d2:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  uint64_t r=a*(uint64_t)b;
 80059d6:	fba3 3202 	umull	r3, r2, r3, r2
  r=r-PRIME*(r>>LOG_Q);
 80059da:	ebc5 7b85 	rsb	fp, r5, r5, lsl #30
 80059de:	ebc5 058b 	rsb	r5, r5, fp, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 80059e2:	ea4f 7b82 	mov.w	fp, r2, lsl #30
  return (uint32_t)r;
 80059e6:	1b40      	subs	r0, r0, r5
  r=r-PRIME*(r>>LOG_Q);
 80059e8:	ebbb 0b02 	subs.w	fp, fp, r2
 80059ec:	ea4f 0592 	mov.w	r5, r2, lsr #2
 80059f0:	f165 0500 	sbc.w	r5, r5, #0
 80059f4:	00ad      	lsls	r5, r5, #2
 80059f6:	ea45 759b 	orr.w	r5, r5, fp, lsr #30
 80059fa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80059fe:	ebbb 0b02 	subs.w	fp, fp, r2
 8005a02:	f165 0500 	sbc.w	r5, r5, #0
 8005a06:	ebb3 030b 	subs.w	r3, r3, fp
 8005a0a:	eb62 0205 	sbc.w	r2, r2, r5
  r=r-PRIME*(r>>LOG_Q);
 8005a0e:	0795      	lsls	r5, r2, #30
 8005a10:	1aad      	subs	r5, r5, r2
 8005a12:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 8005a16:	f16b 0b00 	sbc.w	fp, fp, #0
 8005a1a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005a1e:	ea4b 7b95 	orr.w	fp, fp, r5, lsr #30
 8005a22:	00ad      	lsls	r5, r5, #2
 8005a24:	1aad      	subs	r5, r5, r2
 8005a26:	f16b 0b00 	sbc.w	fp, fp, #0
 8005a2a:	1b5b      	subs	r3, r3, r5
  uint64_t r=a*(uint64_t)b;
 8005a2c:	f8de 5038 	ldr.w	r5, [lr, #56]	@ 0x38
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 8005a30:	f8cc 0030 	str.w	r0, [ip, #48]	@ 0x30
  r=r-PRIME*(r>>LOG_Q);
 8005a34:	eb62 020b 	sbc.w	r2, r2, fp
  uint64_t r=a*(uint64_t)b;
 8005a38:	fba1 b105 	umull	fp, r1, r1, r5
  r=r-PRIME*(r>>LOG_Q);
 8005a3c:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
 8005a40:	ebc2 0285 	rsb	r2, r2, r5, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 8005a44:	078d      	lsls	r5, r1, #30
  return (uint32_t)r;
 8005a46:	1a9b      	subs	r3, r3, r2
  r=r-PRIME*(r>>LOG_Q);
 8005a48:	1a6d      	subs	r5, r5, r1
 8005a4a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8005a4e:	f162 0200 	sbc.w	r2, r2, #0
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	ea42 7295 	orr.w	r2, r2, r5, lsr #30
 8005a58:	00ad      	lsls	r5, r5, #2
 8005a5a:	1a6d      	subs	r5, r5, r1
 8005a5c:	f162 0200 	sbc.w	r2, r2, #0
 8005a60:	ebbb 0b05 	subs.w	fp, fp, r5
 8005a64:	eb61 0102 	sbc.w	r1, r1, r2
  r=r-PRIME*(r>>LOG_Q);
 8005a68:	078d      	lsls	r5, r1, #30
 8005a6a:	1a6d      	subs	r5, r5, r1
 8005a6c:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8005a70:	f162 0200 	sbc.w	r2, r2, #0
 8005a74:	0092      	lsls	r2, r2, #2
 8005a76:	ea42 7295 	orr.w	r2, r2, r5, lsr #30
 8005a7a:	00ad      	lsls	r5, r5, #2
 8005a7c:	1a6d      	subs	r5, r5, r1
 8005a7e:	f162 0200 	sbc.w	r2, r2, #0
 8005a82:	ebbb 0b05 	subs.w	fp, fp, r5
 8005a86:	eb61 0202 	sbc.w	r2, r1, r2
  uint64_t r=a*(uint64_t)b;
 8005a8a:	f8de 503c 	ldr.w	r5, [lr, #60]	@ 0x3c
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 8005a8e:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
  r=r-PRIME*(r>>LOG_Q);
 8005a92:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005a96:	fba6 5605 	umull	r5, r6, r6, r5
  r=r-PRIME*(r>>LOG_Q);
 8005a9a:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
  return (uint32_t)r;
 8005a9e:	ebbb 0102 	subs.w	r1, fp, r2
  r=r-PRIME*(r>>LOG_Q);
 8005aa2:	ea4f 7b86 	mov.w	fp, r6, lsl #30
 8005aa6:	ebbb 0b06 	subs.w	fp, fp, r6
 8005aaa:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005aae:	f162 0200 	sbc.w	r2, r2, #0
 8005ab2:	0092      	lsls	r2, r2, #2
 8005ab4:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8005ab8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005abc:	ebbb 0b06 	subs.w	fp, fp, r6
 8005ac0:	f162 0200 	sbc.w	r2, r2, #0
 8005ac4:	ebb5 050b 	subs.w	r5, r5, fp
 8005ac8:	eb66 0202 	sbc.w	r2, r6, r2
  r=r-PRIME*(r>>LOG_Q);
 8005acc:	0796      	lsls	r6, r2, #30
 8005ace:	1ab6      	subs	r6, r6, r2
 8005ad0:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 8005ad4:	f16b 0b00 	sbc.w	fp, fp, #0
 8005ad8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005adc:	ea4b 7b96 	orr.w	fp, fp, r6, lsr #30
 8005ae0:	00b6      	lsls	r6, r6, #2
 8005ae2:	1ab6      	subs	r6, r6, r2
 8005ae4:	f16b 0b00 	sbc.w	fp, fp, #0
 8005ae8:	1bae      	subs	r6, r5, r6
 8005aea:	eb62 020b 	sbc.w	r2, r2, fp
  r=r-PRIME*(r>>LOG_Q);
 8005aee:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
 8005af2:	ebc2 0285 	rsb	r2, r2, r5, lsl #2
  return (uint32_t)r;
 8005af6:	1ab6      	subs	r6, r6, r2
      mul[i*NB32_VEC_C+ r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+ r], set[i*NB32_VEC_C+ r]));
 8005af8:	f8cc 1038 	str.w	r1, [ip, #56]	@ 0x38
 8005afc:	f8cc 603c 	str.w	r6, [ip, #60]	@ 0x3c
  for (i=1;i<N;i++)
 8005b00:	f10c 0c20 	add.w	ip, ip, #32
 8005b04:	45e2      	cmp	sl, ip
 8005b06:	f10e 0e20 	add.w	lr, lr, #32
 8005b0a:	f47f ae69 	bne.w	80057e0 <setInversionModuloP_vec_C+0x70>

  for (r = 0; r < NB32_VEC_C; r++)
    inv0[r]=inversionModuloP(mul[(N-1)*NB32_VEC_C + r]);
 8005b0e:	e9dd 4903 	ldrd	r4, r9, [sp, #12]
 8005b12:	f8d9 0180 	ldr.w	r0, [r9, #384]	@ 0x180
 8005b16:	9d01      	ldr	r5, [sp, #4]
 8005b18:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005b1c:	f7fe feec 	bl	80048f8 <inversionModuloP>
 8005b20:	9003      	str	r0, [sp, #12]
 8005b22:	f8d9 0184 	ldr.w	r0, [r9, #388]	@ 0x184
 8005b26:	f7fe fee7 	bl	80048f8 <inversionModuloP>
 8005b2a:	9002      	str	r0, [sp, #8]
 8005b2c:	f8d9 0188 	ldr.w	r0, [r9, #392]	@ 0x188
 8005b30:	f7fe fee2 	bl	80048f8 <inversionModuloP>
 8005b34:	9001      	str	r0, [sp, #4]
 8005b36:	f8d9 018c 	ldr.w	r0, [r9, #396]	@ 0x18c
 8005b3a:	f7fe fedd 	bl	80048f8 <inversionModuloP>
 8005b3e:	9005      	str	r0, [sp, #20]
 8005b40:	f8d9 0190 	ldr.w	r0, [r9, #400]	@ 0x190
 8005b44:	f7fe fed8 	bl	80048f8 <inversionModuloP>
 8005b48:	4607      	mov	r7, r0
 8005b4a:	f8d9 0194 	ldr.w	r0, [r9, #404]	@ 0x194
 8005b4e:	f7fe fed3 	bl	80048f8 <inversionModuloP>
 8005b52:	4606      	mov	r6, r0
 8005b54:	f8d9 0198 	ldr.w	r0, [r9, #408]	@ 0x198
 8005b58:	f7fe fece 	bl	80048f8 <inversionModuloP>
 8005b5c:	9004      	str	r0, [sp, #16]
 8005b5e:	f8d9 019c 	ldr.w	r0, [r9, #412]	@ 0x19c
 8005b62:	f7fe fec9 	bl	80048f8 <inversionModuloP>
 8005b66:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	@ 0x28
 8005b6a:	f5a9 73c0 	sub.w	r3, r9, #384	@ 0x180
 8005b6e:	4683      	mov	fp, r0
  for (r = 0; r < NB32_VEC_C; r++)
 8005b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b72:	9606      	str	r6, [sp, #24]
  uint64_t r=a*(uint64_t)b;
 8005b74:	f8d4 2160 	ldr.w	r2, [r4, #352]	@ 0x160
 8005b78:	9903      	ldr	r1, [sp, #12]
 8005b7a:	f8d5 3180 	ldr.w	r3, [r5, #384]	@ 0x180
 8005b7e:	9e02      	ldr	r6, [sp, #8]
 8005b80:	fba1 c002 	umull	ip, r0, r1, r2
  r=r-PRIME*(r>>LOG_Q);
 8005b84:	ea4f 7e80 	mov.w	lr, r0, lsl #30
 8005b88:	ebbe 0e00 	subs.w	lr, lr, r0
 8005b8c:	ea4f 0290 	mov.w	r2, r0, lsr #2
 8005b90:	f162 0200 	sbc.w	r2, r2, #0
 8005b94:	0092      	lsls	r2, r2, #2
 8005b96:	ea42 729e 	orr.w	r2, r2, lr, lsr #30
 8005b9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005b9e:	ebbe 0e00 	subs.w	lr, lr, r0
 8005ba2:	f162 0200 	sbc.w	r2, r2, #0
 8005ba6:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005baa:	eb60 0202 	sbc.w	r2, r0, r2
  r=r-PRIME*(r>>LOG_Q);
 8005bae:	0790      	lsls	r0, r2, #30
 8005bb0:	1a80      	subs	r0, r0, r2
 8005bb2:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8005bb6:	f16e 0e00 	sbc.w	lr, lr, #0
 8005bba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005bbe:	ea4e 7e90 	orr.w	lr, lr, r0, lsr #30
 8005bc2:	0080      	lsls	r0, r0, #2
 8005bc4:	1a80      	subs	r0, r0, r2
 8005bc6:	f16e 0e00 	sbc.w	lr, lr, #0
 8005bca:	ebbc 0000 	subs.w	r0, ip, r0
 8005bce:	eb62 020e 	sbc.w	r2, r2, lr
  r=r-PRIME*(r>>LOG_Q);
 8005bd2:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8005bd6:	ebc2 028c 	rsb	r2, r2, ip, lsl #2
  uint64_t r=a*(uint64_t)b;
 8005bda:	fba1 3103 	umull	r3, r1, r1, r3
  r=r-PRIME*(r>>LOG_Q);
 8005bde:	1a82      	subs	r2, r0, r2

  for (i=N-1;i>0;i--)
    for (r = 0; r < NB32_VEC_C; r++)
      {
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8005be0:	f8c4 2180 	str.w	r2, [r4, #384]	@ 0x180
        inv0[r]=reductionModuloP(multiplicationModuloP(inv0[r], set[i*NB32_VEC_C+r]));
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8005be4:	f8c5 2180 	str.w	r2, [r5, #384]	@ 0x180
  r=r-PRIME*(r>>LOG_Q);
 8005be8:	9207      	str	r2, [sp, #28]
  r=r-PRIME*(r>>LOG_Q);
 8005bea:	078a      	lsls	r2, r1, #30
 8005bec:	1a52      	subs	r2, r2, r1
 8005bee:	ea4f 0091 	mov.w	r0, r1, lsr #2
 8005bf2:	f160 0000 	sbc.w	r0, r0, #0
 8005bf6:	0080      	lsls	r0, r0, #2
 8005bf8:	ea40 7092 	orr.w	r0, r0, r2, lsr #30
 8005bfc:	0092      	lsls	r2, r2, #2
 8005bfe:	1a52      	subs	r2, r2, r1
 8005c00:	f160 0000 	sbc.w	r0, r0, #0
 8005c04:	1a9a      	subs	r2, r3, r2
 8005c06:	eb61 0300 	sbc.w	r3, r1, r0
  r=r-PRIME*(r>>LOG_Q);
 8005c0a:	0799      	lsls	r1, r3, #30
 8005c0c:	1ac9      	subs	r1, r1, r3
 8005c0e:	ea4f 0093 	mov.w	r0, r3, lsr #2
 8005c12:	f160 0000 	sbc.w	r0, r0, #0
 8005c16:	0080      	lsls	r0, r0, #2
 8005c18:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
 8005c1c:	0089      	lsls	r1, r1, #2
 8005c1e:	1ac9      	subs	r1, r1, r3
 8005c20:	f160 0000 	sbc.w	r0, r0, #0
 8005c24:	1a51      	subs	r1, r2, r1
 8005c26:	eb63 0200 	sbc.w	r2, r3, r0
  r=r-PRIME*(r>>LOG_Q);
 8005c2a:	ebc2 7082 	rsb	r0, r2, r2, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005c2e:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
  r=r-PRIME*(r>>LOG_Q);
 8005c32:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
  return (uint32_t)r;
 8005c36:	1a8a      	subs	r2, r1, r2
 8005c38:	9203      	str	r2, [sp, #12]
  uint64_t r=a*(uint64_t)b;
 8005c3a:	fba6 0203 	umull	r0, r2, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005c3e:	0791      	lsls	r1, r2, #30
 8005c40:	1a89      	subs	r1, r1, r2
 8005c42:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005c46:	f16c 0c00 	sbc.w	ip, ip, #0
 8005c4a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005c4e:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005c52:	0089      	lsls	r1, r1, #2
 8005c54:	1a89      	subs	r1, r1, r2
 8005c56:	f16c 0c00 	sbc.w	ip, ip, #0
 8005c5a:	1a40      	subs	r0, r0, r1
 8005c5c:	eb62 020c 	sbc.w	r2, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 8005c60:	0791      	lsls	r1, r2, #30
 8005c62:	1a89      	subs	r1, r1, r2
 8005c64:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005c68:	f16c 0c00 	sbc.w	ip, ip, #0
 8005c6c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005c70:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005c74:	0089      	lsls	r1, r1, #2
 8005c76:	1a89      	subs	r1, r1, r2
 8005c78:	f16c 0c00 	sbc.w	ip, ip, #0
 8005c7c:	1a40      	subs	r0, r0, r1
  uint64_t r=a*(uint64_t)b;
 8005c7e:	f8d5 3184 	ldr.w	r3, [r5, #388]	@ 0x184
  r=r-PRIME*(r>>LOG_Q);
 8005c82:	eb62 010c 	sbc.w	r1, r2, ip
  r=r-PRIME*(r>>LOG_Q);
 8005c86:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005c8a:	fba6 3203 	umull	r3, r2, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005c8e:	ebc1 018c 	rsb	r1, r1, ip, lsl #2
 8005c92:	1a41      	subs	r1, r0, r1
  r=r-PRIME*(r>>LOG_Q);
 8005c94:	0790      	lsls	r0, r2, #30
 8005c96:	1a80      	subs	r0, r0, r2
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8005c98:	f8c4 1184 	str.w	r1, [r4, #388]	@ 0x184
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8005c9c:	f8c5 1184 	str.w	r1, [r5, #388]	@ 0x184
  r=r-PRIME*(r>>LOG_Q);
 8005ca0:	9108      	str	r1, [sp, #32]
  r=r-PRIME*(r>>LOG_Q);
 8005ca2:	ea4f 0192 	mov.w	r1, r2, lsr #2
 8005ca6:	f161 0100 	sbc.w	r1, r1, #0
 8005caa:	0089      	lsls	r1, r1, #2
 8005cac:	ea41 7190 	orr.w	r1, r1, r0, lsr #30
 8005cb0:	0080      	lsls	r0, r0, #2
 8005cb2:	1a80      	subs	r0, r0, r2
 8005cb4:	f161 0100 	sbc.w	r1, r1, #0
 8005cb8:	1a1b      	subs	r3, r3, r0
 8005cba:	eb62 0201 	sbc.w	r2, r2, r1
  r=r-PRIME*(r>>LOG_Q);
 8005cbe:	0791      	lsls	r1, r2, #30
 8005cc0:	1a89      	subs	r1, r1, r2
 8005cc2:	ea4f 0092 	mov.w	r0, r2, lsr #2
 8005cc6:	f160 0000 	sbc.w	r0, r0, #0
 8005cca:	0080      	lsls	r0, r0, #2
 8005ccc:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
 8005cd0:	0089      	lsls	r1, r1, #2
 8005cd2:	1a89      	subs	r1, r1, r2
 8005cd4:	f160 0000 	sbc.w	r0, r0, #0
 8005cd8:	1a59      	subs	r1, r3, r1
 8005cda:	eb62 0200 	sbc.w	r2, r2, r0
  r=r-PRIME*(r>>LOG_Q);
 8005cde:	ebc2 7082 	rsb	r0, r2, r2, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005ce2:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 8005ce6:	9e01      	ldr	r6, [sp, #4]
  r=r-PRIME*(r>>LOG_Q);
 8005ce8:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
  return (uint32_t)r;
 8005cec:	1a8a      	subs	r2, r1, r2
 8005cee:	9202      	str	r2, [sp, #8]
  uint64_t r=a*(uint64_t)b;
 8005cf0:	fba6 2003 	umull	r2, r0, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005cf4:	0781      	lsls	r1, r0, #30
 8005cf6:	1a09      	subs	r1, r1, r0
 8005cf8:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8005cfc:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d00:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d04:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005d08:	0089      	lsls	r1, r1, #2
 8005d0a:	1a09      	subs	r1, r1, r0
 8005d0c:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d10:	1a52      	subs	r2, r2, r1
 8005d12:	eb60 000c 	sbc.w	r0, r0, ip
  r=r-PRIME*(r>>LOG_Q);
 8005d16:	0781      	lsls	r1, r0, #30
 8005d18:	1a09      	subs	r1, r1, r0
 8005d1a:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8005d1e:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d22:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d26:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8005d2a:	0089      	lsls	r1, r1, #2
 8005d2c:	1a09      	subs	r1, r1, r0
 8005d2e:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d32:	1a52      	subs	r2, r2, r1
  uint64_t r=a*(uint64_t)b;
 8005d34:	f8d5 3188 	ldr.w	r3, [r5, #392]	@ 0x188
  r=r-PRIME*(r>>LOG_Q);
 8005d38:	eb60 000c 	sbc.w	r0, r0, ip
  r=r-PRIME*(r>>LOG_Q);
 8005d3c:	ebc0 7c80 	rsb	ip, r0, r0, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005d40:	fba6 3103 	umull	r3, r1, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005d44:	ebc0 008c 	rsb	r0, r0, ip, lsl #2
 8005d48:	1a12      	subs	r2, r2, r0
  r=r-PRIME*(r>>LOG_Q);
 8005d4a:	0788      	lsls	r0, r1, #30
 8005d4c:	1a40      	subs	r0, r0, r1
 8005d4e:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8005d52:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d5a:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 8005d5e:	0080      	lsls	r0, r0, #2
 8005d60:	1a40      	subs	r0, r0, r1
 8005d62:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d66:	1a1b      	subs	r3, r3, r0
 8005d68:	eb61 010c 	sbc.w	r1, r1, ip
  r=r-PRIME*(r>>LOG_Q);
 8005d6c:	0788      	lsls	r0, r1, #30
 8005d6e:	1a40      	subs	r0, r0, r1
 8005d70:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8005d74:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d78:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d7c:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 8005d80:	0080      	lsls	r0, r0, #2
 8005d82:	1a40      	subs	r0, r0, r1
 8005d84:	f16c 0c00 	sbc.w	ip, ip, #0
 8005d88:	1a18      	subs	r0, r3, r0
 8005d8a:	eb61 010c 	sbc.w	r1, r1, ip
  r=r-PRIME*(r>>LOG_Q);
 8005d8e:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005d92:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8005d96:	9e05      	ldr	r6, [sp, #20]
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8005d98:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
  r=r-PRIME*(r>>LOG_Q);
 8005d9c:	ebc1 018c 	rsb	r1, r1, ip, lsl #2
  return (uint32_t)r;
 8005da0:	1a41      	subs	r1, r0, r1
 8005da2:	9101      	str	r1, [sp, #4]
  uint64_t r=a*(uint64_t)b;
 8005da4:	fba6 1003 	umull	r1, r0, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005da8:	ea4f 7c80 	mov.w	ip, r0, lsl #30
 8005dac:	ebbc 0c00 	subs.w	ip, ip, r0
 8005db0:	ea4f 0e90 	mov.w	lr, r0, lsr #2
 8005db4:	f16e 0e00 	sbc.w	lr, lr, #0
 8005db8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005dbc:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005dc0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005dc4:	ebbc 0c00 	subs.w	ip, ip, r0
 8005dc8:	f16e 0e00 	sbc.w	lr, lr, #0
 8005dcc:	ebb1 010c 	subs.w	r1, r1, ip
 8005dd0:	eb60 000e 	sbc.w	r0, r0, lr
  r=r-PRIME*(r>>LOG_Q);
 8005dd4:	ea4f 7c80 	mov.w	ip, r0, lsl #30
 8005dd8:	ebbc 0c00 	subs.w	ip, ip, r0
 8005ddc:	ea4f 0e90 	mov.w	lr, r0, lsr #2
 8005de0:	f16e 0e00 	sbc.w	lr, lr, #0
 8005de4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005de8:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005dec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005df0:	ebbc 0c00 	subs.w	ip, ip, r0
  uint64_t r=a*(uint64_t)b;
 8005df4:	f8d5 318c 	ldr.w	r3, [r5, #396]	@ 0x18c
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8005df8:	f8c5 2188 	str.w	r2, [r5, #392]	@ 0x188
  r=r-PRIME*(r>>LOG_Q);
 8005dfc:	f16e 0e00 	sbc.w	lr, lr, #0
 8005e00:	ebb1 010c 	subs.w	r1, r1, ip
 8005e04:	eb60 000e 	sbc.w	r0, r0, lr
  r=r-PRIME*(r>>LOG_Q);
 8005e08:	ebc0 7c80 	rsb	ip, r0, r0, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005e0c:	fba6 3e03 	umull	r3, lr, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005e10:	ebc0 008c 	rsb	r0, r0, ip, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 8005e14:	ea4f 7c8e 	mov.w	ip, lr, lsl #30
  r=r-PRIME*(r>>LOG_Q);
 8005e18:	1a09      	subs	r1, r1, r0
  r=r-PRIME*(r>>LOG_Q);
 8005e1a:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005e1e:	ea4f 009e 	mov.w	r0, lr, lsr #2
 8005e22:	f160 0000 	sbc.w	r0, r0, #0
 8005e26:	0080      	lsls	r0, r0, #2
 8005e28:	ea40 709c 	orr.w	r0, r0, ip, lsr #30
 8005e2c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005e30:	ebbc 0c0e 	subs.w	ip, ip, lr
 8005e34:	f160 0000 	sbc.w	r0, r0, #0
 8005e38:	ebb3 030c 	subs.w	r3, r3, ip
 8005e3c:	eb6e 0000 	sbc.w	r0, lr, r0
  r=r-PRIME*(r>>LOG_Q);
 8005e40:	ea4f 7c80 	mov.w	ip, r0, lsl #30
 8005e44:	ebbc 0c00 	subs.w	ip, ip, r0
 8005e48:	ea4f 0e90 	mov.w	lr, r0, lsr #2
 8005e4c:	f16e 0e00 	sbc.w	lr, lr, #0
 8005e50:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005e54:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005e58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005e5c:	ebbc 0c00 	subs.w	ip, ip, r0
 8005e60:	f16e 0e00 	sbc.w	lr, lr, #0
 8005e64:	ebb3 0c0c 	subs.w	ip, r3, ip
 8005e68:	eb60 000e 	sbc.w	r0, r0, lr
  r=r-PRIME*(r>>LOG_Q);
 8005e6c:	ebc0 7e80 	rsb	lr, r0, r0, lsl #30
  uint64_t r=a*(uint64_t)b;
 8005e70:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 8005e74:	9e06      	ldr	r6, [sp, #24]
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8005e76:	f8c4 118c 	str.w	r1, [r4, #396]	@ 0x18c
  r=r-PRIME*(r>>LOG_Q);
 8005e7a:	ebc0 008e 	rsb	r0, r0, lr, lsl #2
  return (uint32_t)r;
 8005e7e:	ebbc 0000 	subs.w	r0, ip, r0
 8005e82:	9005      	str	r0, [sp, #20]
  uint64_t r=a*(uint64_t)b;
 8005e84:	fba7 0c03 	umull	r0, ip, r7, r3
  r=r-PRIME*(r>>LOG_Q);
 8005e88:	ea4f 7e8c 	mov.w	lr, ip, lsl #30
 8005e8c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8005e90:	ea4f 089c 	mov.w	r8, ip, lsr #2
 8005e94:	f168 0800 	sbc.w	r8, r8, #0
 8005e98:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005e9c:	ea48 789e 	orr.w	r8, r8, lr, lsr #30
 8005ea0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005ea4:	ebbe 0e0c 	subs.w	lr, lr, ip
 8005ea8:	f168 0800 	sbc.w	r8, r8, #0
 8005eac:	ebb0 000e 	subs.w	r0, r0, lr
 8005eb0:	eb6c 0c08 	sbc.w	ip, ip, r8
  r=r-PRIME*(r>>LOG_Q);
 8005eb4:	ea4f 7e8c 	mov.w	lr, ip, lsl #30
 8005eb8:	ebbe 0e0c 	subs.w	lr, lr, ip
 8005ebc:	ea4f 089c 	mov.w	r8, ip, lsr #2
 8005ec0:	f168 0800 	sbc.w	r8, r8, #0
 8005ec4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005ec8:	ea48 789e 	orr.w	r8, r8, lr, lsr #30
 8005ecc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005ed0:	ebbe 0e0c 	subs.w	lr, lr, ip
  uint64_t r=a*(uint64_t)b;
 8005ed4:	f8d5 3190 	ldr.w	r3, [r5, #400]	@ 0x190
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8005ed8:	f8c5 118c 	str.w	r1, [r5, #396]	@ 0x18c
  r=r-PRIME*(r>>LOG_Q);
 8005edc:	f168 0800 	sbc.w	r8, r8, #0
 8005ee0:	ebb0 000e 	subs.w	r0, r0, lr
 8005ee4:	eb6c 0c08 	sbc.w	ip, ip, r8
  uint64_t r=a*(uint64_t)b;
 8005ee8:	fba7 3703 	umull	r3, r7, r7, r3
  r=r-PRIME*(r>>LOG_Q);
 8005eec:	ebcc 7e8c 	rsb	lr, ip, ip, lsl #30
 8005ef0:	ebcc 0c8e 	rsb	ip, ip, lr, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 8005ef4:	ea4f 7e87 	mov.w	lr, r7, lsl #30
  r=r-PRIME*(r>>LOG_Q);
 8005ef8:	ebb0 000c 	subs.w	r0, r0, ip
  r=r-PRIME*(r>>LOG_Q);
 8005efc:	ebbe 0e07 	subs.w	lr, lr, r7
 8005f00:	ea4f 0c97 	mov.w	ip, r7, lsr #2
 8005f04:	f16c 0c00 	sbc.w	ip, ip, #0
 8005f08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005f0c:	ea4c 7c9e 	orr.w	ip, ip, lr, lsr #30
 8005f10:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005f14:	ebbe 0e07 	subs.w	lr, lr, r7
 8005f18:	f16c 0c00 	sbc.w	ip, ip, #0
 8005f1c:	ebb3 030e 	subs.w	r3, r3, lr
 8005f20:	eb67 070c 	sbc.w	r7, r7, ip
  r=r-PRIME*(r>>LOG_Q);
 8005f24:	ea4f 7c87 	mov.w	ip, r7, lsl #30
 8005f28:	ebbc 0c07 	subs.w	ip, ip, r7
 8005f2c:	ea4f 0e97 	mov.w	lr, r7, lsr #2
 8005f30:	f16e 0e00 	sbc.w	lr, lr, #0
 8005f34:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005f38:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8005f3c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005f40:	ebbc 0c07 	subs.w	ip, ip, r7
 8005f44:	f16e 0e00 	sbc.w	lr, lr, #0
 8005f48:	ebb3 0c0c 	subs.w	ip, r3, ip
 8005f4c:	eb67 070e 	sbc.w	r7, r7, lr
  uint64_t r=a*(uint64_t)b;
 8005f50:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8005f54:	f8c4 0190 	str.w	r0, [r4, #400]	@ 0x190
  r=r-PRIME*(r>>LOG_Q);
 8005f58:	ebc7 7e87 	rsb	lr, r7, r7, lsl #30
 8005f5c:	ebc7 078e 	rsb	r7, r7, lr, lsl #2
  return (uint32_t)r;
 8005f60:	ebbc 0707 	subs.w	r7, ip, r7
  uint64_t r=a*(uint64_t)b;
 8005f64:	fba6 ec03 	umull	lr, ip, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005f68:	ea4f 788c 	mov.w	r8, ip, lsl #30
 8005f6c:	ebb8 080c 	subs.w	r8, r8, ip
 8005f70:	ea4f 099c 	mov.w	r9, ip, lsr #2
 8005f74:	f169 0900 	sbc.w	r9, r9, #0
 8005f78:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005f7c:	ea49 7998 	orr.w	r9, r9, r8, lsr #30
 8005f80:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005f84:	ebb8 080c 	subs.w	r8, r8, ip
 8005f88:	f169 0900 	sbc.w	r9, r9, #0
 8005f8c:	ebbe 0e08 	subs.w	lr, lr, r8
 8005f90:	eb6c 0c09 	sbc.w	ip, ip, r9
  r=r-PRIME*(r>>LOG_Q);
 8005f94:	ea4f 788c 	mov.w	r8, ip, lsl #30
 8005f98:	ebb8 080c 	subs.w	r8, r8, ip
 8005f9c:	ea4f 099c 	mov.w	r9, ip, lsr #2
 8005fa0:	f169 0900 	sbc.w	r9, r9, #0
 8005fa4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005fa8:	ea49 7998 	orr.w	r9, r9, r8, lsr #30
 8005fac:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005fb0:	ebb8 080c 	subs.w	r8, r8, ip
 8005fb4:	f169 0900 	sbc.w	r9, r9, #0
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8005fb8:	f8c5 0190 	str.w	r0, [r5, #400]	@ 0x190
  r=r-PRIME*(r>>LOG_Q);
 8005fbc:	ebbe 0e08 	subs.w	lr, lr, r8
  uint64_t r=a*(uint64_t)b;
 8005fc0:	f8d5 3194 	ldr.w	r3, [r5, #404]	@ 0x194
  r=r-PRIME*(r>>LOG_Q);
 8005fc4:	eb6c 0c09 	sbc.w	ip, ip, r9
  uint64_t r=a*(uint64_t)b;
 8005fc8:	fba6 6303 	umull	r6, r3, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 8005fcc:	ebcc 788c 	rsb	r8, ip, ip, lsl #30
 8005fd0:	ebcc 0c88 	rsb	ip, ip, r8, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 8005fd4:	ea4f 7883 	mov.w	r8, r3, lsl #30
  r=r-PRIME*(r>>LOG_Q);
 8005fd8:	ebbe 0e0c 	subs.w	lr, lr, ip
  r=r-PRIME*(r>>LOG_Q);
 8005fdc:	ebb8 0803 	subs.w	r8, r8, r3
 8005fe0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005fe4:	f16c 0c00 	sbc.w	ip, ip, #0
 8005fe8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005fec:	ea4c 7c98 	orr.w	ip, ip, r8, lsr #30
 8005ff0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005ff4:	ebb8 0803 	subs.w	r8, r8, r3
 8005ff8:	f16c 0c00 	sbc.w	ip, ip, #0
 8005ffc:	ebb6 0608 	subs.w	r6, r6, r8
 8006000:	eb63 030c 	sbc.w	r3, r3, ip
  r=r-PRIME*(r>>LOG_Q);
 8006004:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 8006008:	ebbc 0c03 	subs.w	ip, ip, r3
 800600c:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8006010:	f168 0800 	sbc.w	r8, r8, #0
 8006014:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006018:	ea48 789c 	orr.w	r8, r8, ip, lsr #30
 800601c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006020:	ebbc 0c03 	subs.w	ip, ip, r3
 8006024:	f168 0800 	sbc.w	r8, r8, #0
 8006028:	ebb6 060c 	subs.w	r6, r6, ip
 800602c:	eb63 0308 	sbc.w	r3, r3, r8
  r=r-PRIME*(r>>LOG_Q);
 8006030:	ebc3 7c83 	rsb	ip, r3, r3, lsl #30
 8006034:	ebc3 038c 	rsb	r3, r3, ip, lsl #2
  return (uint32_t)r;
 8006038:	1af3      	subs	r3, r6, r3
 800603a:	9306      	str	r3, [sp, #24]
  uint64_t r=a*(uint64_t)b;
 800603c:	9e04      	ldr	r6, [sp, #16]
 800603e:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8006042:	f8c4 e194 	str.w	lr, [r4, #404]	@ 0x194
  uint64_t r=a*(uint64_t)b;
 8006046:	fba6 9303 	umull	r9, r3, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 800604a:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 800604e:	ebbc 0c03 	subs.w	ip, ip, r3
 8006052:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8006056:	f16a 0a00 	sbc.w	sl, sl, #0
 800605a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800605e:	ea4a 7a9c 	orr.w	sl, sl, ip, lsr #30
 8006062:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006066:	ebbc 0c03 	subs.w	ip, ip, r3
 800606a:	f16a 0a00 	sbc.w	sl, sl, #0
 800606e:	ebb9 090c 	subs.w	r9, r9, ip
 8006072:	eb63 030a 	sbc.w	r3, r3, sl
  r=r-PRIME*(r>>LOG_Q);
 8006076:	ea4f 7c83 	mov.w	ip, r3, lsl #30
 800607a:	ebbc 0c03 	subs.w	ip, ip, r3
 800607e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8006082:	f16a 0a00 	sbc.w	sl, sl, #0
 8006086:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800608a:	ea4a 7a9c 	orr.w	sl, sl, ip, lsr #30
 800608e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006092:	ebbc 0c03 	subs.w	ip, ip, r3
 8006096:	f16a 0a00 	sbc.w	sl, sl, #0
 800609a:	ebb9 090c 	subs.w	r9, r9, ip
 800609e:	eb63 080a 	sbc.w	r8, r3, sl
  uint64_t r=a*(uint64_t)b;
 80060a2:	f8d5 3198 	ldr.w	r3, [r5, #408]	@ 0x198
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 80060a6:	f8c5 e194 	str.w	lr, [r5, #404]	@ 0x194
  r=r-PRIME*(r>>LOG_Q);
 80060aa:	ebc8 7a88 	rsb	sl, r8, r8, lsl #30
  uint64_t r=a*(uint64_t)b;
 80060ae:	fba6 3c03 	umull	r3, ip, r6, r3
  r=r-PRIME*(r>>LOG_Q);
 80060b2:	ebc8 088a 	rsb	r8, r8, sl, lsl #2
 80060b6:	ebb9 0808 	subs.w	r8, r9, r8
  r=r-PRIME*(r>>LOG_Q);
 80060ba:	ea4f 798c 	mov.w	r9, ip, lsl #30
 80060be:	ebb9 090c 	subs.w	r9, r9, ip
 80060c2:	ea4f 0a9c 	mov.w	sl, ip, lsr #2
 80060c6:	f16a 0a00 	sbc.w	sl, sl, #0
 80060ca:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80060ce:	ea4a 7a99 	orr.w	sl, sl, r9, lsr #30
 80060d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80060d6:	ebb9 090c 	subs.w	r9, r9, ip
 80060da:	f16a 0a00 	sbc.w	sl, sl, #0
 80060de:	ebb3 0309 	subs.w	r3, r3, r9
 80060e2:	eb6c 0c0a 	sbc.w	ip, ip, sl
  r=r-PRIME*(r>>LOG_Q);
 80060e6:	ea4f 798c 	mov.w	r9, ip, lsl #30
 80060ea:	ebb9 090c 	subs.w	r9, r9, ip
 80060ee:	ea4f 0a9c 	mov.w	sl, ip, lsr #2
 80060f2:	f16a 0a00 	sbc.w	sl, sl, #0
 80060f6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80060fa:	ea4a 7a99 	orr.w	sl, sl, r9, lsr #30
 80060fe:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006102:	ebb9 090c 	subs.w	r9, r9, ip
 8006106:	f16a 0a00 	sbc.w	sl, sl, #0
 800610a:	ebb3 0909 	subs.w	r9, r3, r9
 800610e:	eb6c 0c0a 	sbc.w	ip, ip, sl
  uint64_t r=a*(uint64_t)b;
 8006112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8006116:	f8c4 8198 	str.w	r8, [r4, #408]	@ 0x198
  r=r-PRIME*(r>>LOG_Q);
 800611a:	ebcc 7a8c 	rsb	sl, ip, ip, lsl #30
 800611e:	ebcc 0c8a 	rsb	ip, ip, sl, lsl #2
  return (uint32_t)r;
 8006122:	ebb9 060c 	subs.w	r6, r9, ip
  uint64_t r=a*(uint64_t)b;
 8006126:	fbab 3c03 	umull	r3, ip, fp, r3
  r=r-PRIME*(r>>LOG_Q);
 800612a:	ea4f 798c 	mov.w	r9, ip, lsl #30
 800612e:	ebb9 090c 	subs.w	r9, r9, ip
 8006132:	ea4f 0a9c 	mov.w	sl, ip, lsr #2
 8006136:	f16a 0a00 	sbc.w	sl, sl, #0
 800613a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800613e:	ea4a 7a99 	orr.w	sl, sl, r9, lsr #30
 8006142:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006146:	ebb9 090c 	subs.w	r9, r9, ip
 800614a:	f16a 0a00 	sbc.w	sl, sl, #0
 800614e:	ebb3 0309 	subs.w	r3, r3, r9
 8006152:	eb6c 0c0a 	sbc.w	ip, ip, sl
  r=r-PRIME*(r>>LOG_Q);
 8006156:	ea4f 798c 	mov.w	r9, ip, lsl #30
 800615a:	ebb9 090c 	subs.w	r9, r9, ip
 800615e:	ea4f 0a9c 	mov.w	sl, ip, lsr #2
 8006162:	f16a 0a00 	sbc.w	sl, sl, #0
 8006166:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800616a:	ea4a 7a99 	orr.w	sl, sl, r9, lsr #30
 800616e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006172:	ebb9 090c 	subs.w	r9, r9, ip
 8006176:	f16a 0a00 	sbc.w	sl, sl, #0
  return (uint32_t)r;
 800617a:	9604      	str	r6, [sp, #16]
  r=r-PRIME*(r>>LOG_Q);
 800617c:	ebb3 0309 	subs.w	r3, r3, r9
  uint64_t r=a*(uint64_t)b;
 8006180:	f8d5 619c 	ldr.w	r6, [r5, #412]	@ 0x19c
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8006184:	f8c5 8198 	str.w	r8, [r5, #408]	@ 0x198
  r=r-PRIME*(r>>LOG_Q);
 8006188:	eb6c 0c0a 	sbc.w	ip, ip, sl
  uint64_t r=a*(uint64_t)b;
 800618c:	fbab b906 	umull	fp, r9, fp, r6
  r=r-PRIME*(r>>LOG_Q);
 8006190:	ebcc 7a8c 	rsb	sl, ip, ip, lsl #30
 8006194:	ebcc 0c8a 	rsb	ip, ip, sl, lsl #2
  r=r-PRIME*(r>>LOG_Q);
 8006198:	ea4f 7a89 	mov.w	sl, r9, lsl #30
  r=r-PRIME*(r>>LOG_Q);
 800619c:	ebb3 0c0c 	subs.w	ip, r3, ip
  r=r-PRIME*(r>>LOG_Q);
 80061a0:	ebba 0a09 	subs.w	sl, sl, r9
 80061a4:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80061a8:	f163 0300 	sbc.w	r3, r3, #0
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80061b2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80061b6:	ebba 0a09 	subs.w	sl, sl, r9
 80061ba:	f163 0300 	sbc.w	r3, r3, #0
 80061be:	ebbb 0a0a 	subs.w	sl, fp, sl
 80061c2:	eb69 0303 	sbc.w	r3, r9, r3
  r=r-PRIME*(r>>LOG_Q);
 80061c6:	ea4f 7b83 	mov.w	fp, r3, lsl #30
 80061ca:	ebbb 0b03 	subs.w	fp, fp, r3
 80061ce:	ea4f 0993 	mov.w	r9, r3, lsr #2
 80061d2:	f169 0900 	sbc.w	r9, r9, #0
 80061d6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80061da:	ea49 799b 	orr.w	r9, r9, fp, lsr #30
 80061de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80061e2:	ebbb 0b03 	subs.w	fp, fp, r3
 80061e6:	f169 0900 	sbc.w	r9, r9, #0
 80061ea:	ebba 0b0b 	subs.w	fp, sl, fp
 80061ee:	eb63 0309 	sbc.w	r3, r3, r9
  r=r-PRIME*(r>>LOG_Q);
 80061f2:	ebc3 7983 	rsb	r9, r3, r3, lsl #30
 80061f6:	ebc3 0389 	rsb	r3, r3, r9, lsl #2
  return (uint32_t)r;
 80061fa:	ebbb 0b03 	subs.w	fp, fp, r3
  for (i=N-1;i>0;i--)
 80061fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        mul[i*NB32_VEC_C+r]=reductionModuloP(multiplicationModuloP(mul[(i-1)*NB32_VEC_C+r], inv0[r]));
 8006200:	f8c4 c19c 	str.w	ip, [r4, #412]	@ 0x19c
  for (i=N-1;i>0;i--)
 8006204:	3c20      	subs	r4, #32
 8006206:	42a3      	cmp	r3, r4
        set[i*NB32_VEC_C+r]=mul[i*NB32_VEC_C+r];
 8006208:	f8c5 c19c 	str.w	ip, [r5, #412]	@ 0x19c
  for (i=N-1;i>0;i--)
 800620c:	f1a5 0520 	sub.w	r5, r5, #32
 8006210:	f47f acb0 	bne.w	8005b74 <setInversionModuloP_vec_C+0x404>
 8006214:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	@ 0x28
 8006218:	4663      	mov	r3, ip
 800621a:	468c      	mov	ip, r1
 800621c:	4601      	mov	r1, r0
 800621e:	4618      	mov	r0, r3
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	9e06      	ldr	r6, [sp, #24]
 8006224:	f8ca 003c 	str.w	r0, [sl, #60]	@ 0x3c
 8006228:	e9c9 3b76 	strd	r3, fp, [r9, #472]	@ 0x1d8
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	f8c9 31c0 	str.w	r3, [r9, #448]	@ 0x1c0
 8006232:	9b02      	ldr	r3, [sp, #8]
 8006234:	f8c9 31c4 	str.w	r3, [r9, #452]	@ 0x1c4
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	f8c9 31c8 	str.w	r3, [r9, #456]	@ 0x1c8
 800623e:	9b05      	ldr	r3, [sp, #20]
 8006240:	f8c9 31cc 	str.w	r3, [r9, #460]	@ 0x1cc
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	f8ca 3020 	str.w	r3, [sl, #32]
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	e9c9 7674 	strd	r7, r6, [r9, #464]	@ 0x1d0
      }

  for (r = 0; r < NB32_VEC_C; r++)
    set[r]=inv0[r];
 8006250:	f509 79e0 	add.w	r9, r9, #448	@ 0x1c0
 8006254:	e9ca 3209 	strd	r3, r2, [sl, #36]	@ 0x24
 8006258:	e9ca c10b 	strd	ip, r1, [sl, #44]	@ 0x2c
 800625c:	4674      	mov	r4, lr
 800625e:	4696      	mov	lr, r2
 8006260:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8006264:	e9ca 480d 	strd	r4, r8, [sl, #52]	@ 0x34
 8006268:	f8ca 0000 	str.w	r0, [sl]
 800626c:	f8ca 1004 	str.w	r1, [sl, #4]
 8006270:	f8ca 2008 	str.w	r2, [sl, #8]
 8006274:	f8ca 300c 	str.w	r3, [sl, #12]
 8006278:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800627c:	f8ca 0010 	str.w	r0, [sl, #16]
 8006280:	f8ca 1014 	str.w	r1, [sl, #20]
 8006284:	f8ca 2018 	str.w	r2, [sl, #24]
 8006288:	f8ca 301c 	str.w	r3, [sl, #28]
 800628c:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006294 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006294:	b500      	push	{lr}
 8006296:	b083      	sub	sp, #12
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8006298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
{
 800629c:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 800629e:	2201      	movs	r2, #1
 80062a0:	a901      	add	r1, sp, #4
 80062a2:	4803      	ldr	r0, [pc, #12]	@ (80062b0 <__io_putchar+0x1c>)
 80062a4:	f005 f9a2 	bl	800b5ec <HAL_UART_Transmit>

  return ch;
}
 80062a8:	9801      	ldr	r0, [sp, #4]
 80062aa:	b003      	add	sp, #12
 80062ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80062b0:	200000ec 	.word	0x200000ec

080062b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062b4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062b6:	2300      	movs	r3, #0
{
 80062b8:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ba:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80062be:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062c2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80062c6:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Macro to configure SAI1BlockB clock source selection
  */
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80062ca:	4a2c      	ldr	r2, [pc, #176]	@ (800637c <SystemClock_Config+0xc8>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062cc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80062ce:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
  __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80062d2:	482b      	ldr	r0, [pc, #172]	@ (8006380 <SystemClock_Config+0xcc>)
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80062d4:	f421 0150 	bic.w	r1, r1, #13631488	@ 0xd00000
 80062d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80062dc:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80062e0:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80062e4:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80062e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80062ec:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  __HAL_RCC_PWR_CLK_ENABLE();
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80062f4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80062f8:	6411      	str	r1, [r2, #64]	@ 0x40
 80062fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062fc:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006304:	9302      	str	r3, [sp, #8]
 8006306:	6803      	ldr	r3, [r0, #0]
 8006308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	6803      	ldr	r3, [r0, #0]
 8006310:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006314:	2401      	movs	r4, #1
 8006316:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800631a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
 800631c:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLN = 336;
 800631e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006322:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006326:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800632a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800632c:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006330:	2202      	movs	r2, #2
 8006332:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006334:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006336:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800633a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800633e:	9902      	ldr	r1, [sp, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006340:	f004 fad2 	bl	800a8e8 <HAL_RCC_OscConfig>
 8006344:	b108      	cbz	r0, 800634a <SystemClock_Config+0x96>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006346:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006348:	e7fe      	b.n	8006348 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800634a:	4603      	mov	r3, r0
 800634c:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800634e:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006352:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006358:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800635c:	a803      	add	r0, sp, #12
 800635e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006360:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006364:	f004 fd26 	bl	800adb4 <HAL_RCC_ClockConfig>
 8006368:	4602      	mov	r2, r0
 800636a:	b108      	cbz	r0, 8006370 <SystemClock_Config+0xbc>
 800636c:	b672      	cpsid	i
  while (1)
 800636e:	e7fe      	b.n	800636e <SystemClock_Config+0xba>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8006370:	4629      	mov	r1, r5
 8006372:	f004 fc9b 	bl	800acac <HAL_RCC_MCOConfig>
}
 8006376:	b015      	add	sp, #84	@ 0x54
 8006378:	bd30      	pop	{r4, r5, pc}
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800
 8006380:	40007000 	.word	0x40007000
 8006384:	00000000 	.word	0x00000000

08006388 <PeriphCommonClock_Config>:
{
 8006388:	b500      	push	{lr}
 800638a:	b08d      	sub	sp, #52	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800638c:	2228      	movs	r2, #40	@ 0x28
 800638e:	2100      	movs	r1, #0
 8006390:	a802      	add	r0, sp, #8
 8006392:	f006 f871 	bl	800c478 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLI2S;
 8006396:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80063b8 <PeriphCommonClock_Config+0x30>
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800639a:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800639c:	2301      	movs	r3, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800639e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLI2S;
 80063a0:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80063a4:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80063a6:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063a8:	f004 fdc2 	bl	800af30 <HAL_RCCEx_PeriphCLKConfig>
 80063ac:	b108      	cbz	r0, 80063b2 <PeriphCommonClock_Config+0x2a>
 80063ae:	b672      	cpsid	i
  while (1)
 80063b0:	e7fe      	b.n	80063b0 <PeriphCommonClock_Config+0x28>
}
 80063b2:	b00d      	add	sp, #52	@ 0x34
 80063b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80063b8:	00000002 	.word	0x00000002
 80063bc:	000000c0 	.word	0x000000c0

080063c0 <main>:
{
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	f5ad 4dbc 	sub.w	sp, sp, #24064	@ 0x5e00
 80063c8:	b097      	sub	sp, #92	@ 0x5c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ca:	f50d 5400 	add.w	r4, sp, #8192	@ 0x2000
 80063ce:	2700      	movs	r7, #0
  HAL_Init();
 80063d0:	f002 fe08 	bl	8008fe4 <HAL_Init>
  SystemClock_Config();
 80063d4:	f7ff ff6e 	bl	80062b4 <SystemClock_Config>
  PeriphCommonClock_Config();
 80063d8:	f7ff ffd6 	bl	8006388 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063dc:	e9c4 7700 	strd	r7, r7, [r4]
 80063e0:	e9c4 7702 	strd	r7, r7, [r4, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80063e4:	4bb4      	ldr	r3, [pc, #720]	@ (80066b8 <main+0x2f8>)
 80063e6:	9706      	str	r7, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e8:	6127      	str	r7, [r4, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80063ea:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 80063ec:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 80063f0:	631d      	str	r5, [r3, #48]	@ 0x30
 80063f2:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 80063f4:	f005 0540 	and.w	r5, r5, #64	@ 0x40
 80063f8:	9506      	str	r5, [sp, #24]
 80063fa:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063fc:	9707      	str	r7, [sp, #28]
 80063fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006400:	f040 0010 	orr.w	r0, r0, #16
 8006404:	6318      	str	r0, [r3, #48]	@ 0x30
 8006406:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006408:	f000 0010 	and.w	r0, r0, #16
 800640c:	9007      	str	r0, [sp, #28]
 800640e:	f60d 6258 	addw	r2, sp, #3672	@ 0xe58
 8006412:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006414:	f6a2 6138 	subw	r1, r2, #3640	@ 0xe38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006418:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800641a:	600f      	str	r7, [r1, #0]
 800641c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800641e:	f040 0002 	orr.w	r0, r0, #2
 8006422:	6318      	str	r0, [r3, #48]	@ 0x30
 8006424:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006426:	f000 0002 	and.w	r0, r0, #2
 800642a:	6008      	str	r0, [r1, #0]
 800642c:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800642e:	f6a2 6134 	subw	r1, r2, #3636	@ 0xe34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8006432:	2603      	movs	r6, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006434:	600f      	str	r7, [r1, #0]
 8006436:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006438:	f040 0008 	orr.w	r0, r0, #8
 800643c:	6318      	str	r0, [r3, #48]	@ 0x30
 800643e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006440:	f000 0008 	and.w	r0, r0, #8
 8006444:	6008      	str	r0, [r1, #0]
 8006446:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006448:	f5a2 6163 	sub.w	r1, r2, #3632	@ 0xe30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800644c:	f04f 090a 	mov.w	r9, #10
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006450:	600f      	str	r7, [r1, #0]
 8006452:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006454:	f040 0004 	orr.w	r0, r0, #4
 8006458:	6318      	str	r0, [r3, #48]	@ 0x30
 800645a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800645c:	f000 0004 	and.w	r0, r0, #4
 8006460:	6008      	str	r0, [r1, #0]
 8006462:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006464:	f6a2 612c 	subw	r1, r2, #3628	@ 0xe2c
  GPIO_InitStruct.Pin = EXT_INT_Pin;
 8006468:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800646c:	600f      	str	r7, [r1, #0]
 800646e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006470:	f040 0001 	orr.w	r0, r0, #1
 8006474:	6318      	str	r0, [r3, #48]	@ 0x30
 8006476:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006478:	f000 0001 	and.w	r0, r0, #1
 800647c:	6008      	str	r0, [r1, #0]
 800647e:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006480:	f6a2 6128 	subw	r1, r2, #3624	@ 0xe28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006484:	f04f 0a01 	mov.w	sl, #1
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006488:	600f      	str	r7, [r1, #0]
 800648a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800648c:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8006490:	6318      	str	r0, [r3, #48]	@ 0x30
 8006492:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006494:	f400 7000 	and.w	r0, r0, #512	@ 0x200
 8006498:	6008      	str	r0, [r1, #0]
 800649a:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800649c:	f6a2 6124 	subw	r1, r2, #3620	@ 0xe24
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80064a0:	f04f 0b0d 	mov.w	fp, #13
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80064a4:	600f      	str	r7, [r1, #0]
 80064a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064a8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80064ac:	6318      	str	r0, [r3, #48]	@ 0x30
 80064ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064b0:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80064b4:	6008      	str	r0, [r1, #0]
 80064b6:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80064b8:	f5a2 6162 	sub.w	r1, r2, #3616	@ 0xe20
 80064bc:	600f      	str	r7, [r1, #0]
 80064be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064c0:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 80064c4:	6318      	str	r0, [r3, #48]	@ 0x30
 80064c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064c8:	f400 6080 	and.w	r0, r0, #1024	@ 0x400
 80064cc:	6008      	str	r0, [r1, #0]
 80064ce:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80064d0:	f6a2 611c 	subw	r1, r2, #3612	@ 0xe1c
 80064d4:	600f      	str	r7, [r1, #0]
 80064d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064d8:	f040 0020 	orr.w	r0, r0, #32
 80064dc:	6318      	str	r0, [r3, #48]	@ 0x30
 80064de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064e0:	f000 0020 	and.w	r0, r0, #32
 80064e4:	6008      	str	r0, [r1, #0]
 80064e6:	6809      	ldr	r1, [r1, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064e8:	f6a2 6118 	subw	r1, r2, #3608	@ 0xe18
  HAL_GPIO_WritePin(GPIOG, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80064ec:	463a      	mov	r2, r7
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064ee:	600f      	str	r7, [r1, #0]
 80064f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064f2:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80064f6:	6318      	str	r0, [r3, #48]	@ 0x30
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOG, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80064fa:	4870      	ldr	r0, [pc, #448]	@ (80066bc <main+0x2fc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	600b      	str	r3, [r1, #0]
 8006502:	680b      	ldr	r3, [r1, #0]
  HAL_GPIO_WritePin(GPIOG, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8006504:	f44f 51a6 	mov.w	r1, #5312	@ 0x14c0
 8006508:	f003 f9fe 	bl	8009908 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800650c:	f643 4323 	movw	r3, #15395	@ 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006510:	486b      	ldr	r0, [pc, #428]	@ (80066c0 <main+0x300>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8006512:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006514:	4621      	mov	r1, r4
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8006516:	e9c4 6903 	strd	r6, r9, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800651a:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651c:	6065      	str	r5, [r4, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651e:	f003 f8bb 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006522:	220c      	movs	r2, #12
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8006524:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006528:	6122      	str	r2, [r4, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800652a:	4866      	ldr	r0, [pc, #408]	@ (80066c4 <main+0x304>)
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800652c:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800652e:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006530:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006534:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006536:	f003 f8af 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800653a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
  HAL_GPIO_Init(EXT_INT_GPIO_Port, &GPIO_InitStruct);
 800653e:	4862      	ldr	r0, [pc, #392]	@ (80066c8 <main+0x308>)
  GPIO_InitStruct.Pin = EXT_INT_Pin;
 8006540:	f8c4 8000 	str.w	r8, [r4]
  HAL_GPIO_Init(EXT_INT_GPIO_Port, &GPIO_InitStruct);
 8006544:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006546:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006548:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(EXT_INT_GPIO_Port, &GPIO_InitStruct);
 800654a:	f003 f8a5 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 800654e:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006552:	485a      	ldr	r0, [pc, #360]	@ (80066bc <main+0x2fc>)
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8006554:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006556:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006558:	e9c4 7702 	strd	r7, r7, [r4, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800655c:	f8c4 a004 	str.w	sl, [r4, #4]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006560:	f003 f89a 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PAR_D5_Pin;
 8006564:	2308      	movs	r3, #8
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 8006566:	4859      	ldr	r0, [pc, #356]	@ (80066cc <main+0x30c>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006568:	f8c4 b010 	str.w	fp, [r4, #16]
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 800656c:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = PAR_D5_Pin;
 800656e:	6023      	str	r3, [r4, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006570:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006574:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 8006576:	f003 f88f 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800657a:	220c      	movs	r2, #12
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800657c:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800657e:	6122      	str	r2, [r4, #16]
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8006580:	4852      	ldr	r0, [pc, #328]	@ (80066cc <main+0x30c>)
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8006582:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8006584:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006586:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800658a:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800658c:	f003 f884 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8006590:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006594:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8006596:	484c      	ldr	r0, [pc, #304]	@ (80066c8 <main+0x308>)
 8006598:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800659e:	e9c4 6903 	strd	r6, r9, [r4, #12]
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80065a2:	f003 f879 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a6:	e9c4 8500 	strd	r8, r5, [r4]
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 80065aa:	4849      	ldr	r0, [pc, #292]	@ (80066d0 <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80065ac:	6127      	str	r7, [r4, #16]
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 80065ae:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065b0:	e9c4 7702 	strd	r7, r7, [r4, #8]
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80065b4:	f04f 0810 	mov.w	r8, #16
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 80065b8:	f003 f86e 	bl	8009698 <HAL_GPIO_Init>
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80065bc:	4845      	ldr	r0, [pc, #276]	@ (80066d4 <main+0x314>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80065be:	f8c4 8000 	str.w	r8, [r4]
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80065c2:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c4:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80065c8:	e9c4 6903 	strd	r6, r9, [r4, #12]
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80065cc:	f003 f864 	bl	8009698 <HAL_GPIO_Init>
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80065d0:	483c      	ldr	r0, [pc, #240]	@ (80066c4 <main+0x304>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80065d2:	f8c4 9010 	str.w	r9, [r4, #16]
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80065d6:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d8:	e9c4 a500 	strd	sl, r5, [r4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065dc:	e9c4 7602 	strd	r7, r6, [r4, #8]
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80065e0:	f003 f85a 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80065e4:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065e6:	e9c4 3700 	strd	r3, r7, [r4]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80065ea:	4835      	ldr	r0, [pc, #212]	@ (80066c0 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80065ee:	4621      	mov	r1, r4
 80065f0:	f003 f852 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 80065f4:	2350      	movs	r3, #80	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f6:	4836      	ldr	r0, [pc, #216]	@ (80066d0 <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80065f8:	f8c4 b010 	str.w	fp, [r4, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065fc:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 80065fe:	6023      	str	r3, [r4, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006600:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006604:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006606:	f003 f847 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 800660a:	2328      	movs	r3, #40	@ 0x28
  hadc3.Instance = ADC3;
 800660c:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 80066f8 <main+0x338>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006610:	482f      	ldr	r0, [pc, #188]	@ (80066d0 <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8006612:	f8c4 9010 	str.w	r9, [r4, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006616:	e9c4 5701 	strd	r5, r7, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800661a:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800661c:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 800661e:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006620:	f003 f83a 	bl	8009698 <HAL_GPIO_Init>
  hadc3.Instance = ADC3;
 8006624:	4a2c      	ldr	r2, [pc, #176]	@ (80066d8 <main+0x318>)
 8006626:	f8cb 2000 	str.w	r2, [fp]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800662a:	4a2c      	ldr	r2, [pc, #176]	@ (80066dc <main+0x31c>)
 800662c:	f8cb 2028 	str.w	r2, [fp, #40]	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8006630:	e9c4 7700 	strd	r7, r7, [r4]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006634:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8006638:	e9c4 7702 	strd	r7, r7, [r4, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800663c:	4658      	mov	r0, fp
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800663e:	f8cb 7008 	str.w	r7, [fp, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8006642:	f8cb 7010 	str.w	r7, [fp, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006646:	f88b 7018 	strb.w	r7, [fp, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800664a:	f88b 7020 	strb.w	r7, [fp, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800664e:	f8cb 702c 	str.w	r7, [fp, #44]	@ 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006652:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006656:	f88b 7030 	strb.w	r7, [fp, #48]	@ 0x30
  hadc3.Init.NbrOfConversion = 1;
 800665a:	f8cb a01c 	str.w	sl, [fp, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800665e:	f8cb a014 	str.w	sl, [fp, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006662:	f8cb 2004 	str.w	r2, [fp, #4]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006666:	f002 fcfb 	bl	8009060 <HAL_ADC_Init>
 800666a:	b108      	cbz	r0, 8006670 <main+0x2b0>
 800666c:	b672      	cpsid	i
  while (1)
 800666e:	e7fe      	b.n	800666e <main+0x2ae>
  sConfig.Channel = ADC_CHANNEL_8;
 8006670:	2308      	movs	r3, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006672:	e9c4 a001 	strd	sl, r0, [r4, #4]
  sConfig.Channel = ADC_CHANNEL_8;
 8006676:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006678:	4658      	mov	r0, fp
 800667a:	f50d 5100 	add.w	r1, sp, #8192	@ 0x2000
 800667e:	f002 fd9b 	bl	80091b8 <HAL_ADC_ConfigChannel>
 8006682:	4603      	mov	r3, r0
 8006684:	b9a8      	cbnz	r0, 80066b2 <main+0x2f2>
  heth.Instance = ETH;
 8006686:	4816      	ldr	r0, [pc, #88]	@ (80066e0 <main+0x320>)
  MACAddr[0] = 0x00;
 8006688:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <main+0x324>)
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800668a:	6083      	str	r3, [r0, #8]
  MACAddr[4] = 0x00;
 800668c:	8093      	strh	r3, [r2, #4]
  heth.Instance = ETH;
 800668e:	4b16      	ldr	r3, [pc, #88]	@ (80066e8 <main+0x328>)
 8006690:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 8006692:	4b16      	ldr	r3, [pc, #88]	@ (80066ec <main+0x32c>)
 8006694:	6013      	str	r3, [r2, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8006696:	4b16      	ldr	r3, [pc, #88]	@ (80066f0 <main+0x330>)
 8006698:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800669a:	4b16      	ldr	r3, [pc, #88]	@ (80066f4 <main+0x334>)
 800669c:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 800669e:	f240 53f4 	movw	r3, #1524	@ 0x5f4
  heth.Init.MACAddr = &MACAddr[0];
 80066a2:	6042      	str	r2, [r0, #4]
  heth.Init.RxBuffLen = 1524;
 80066a4:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 80066a6:	f002 feb3 	bl	8009410 <HAL_ETH_Init>
 80066aa:	4601      	mov	r1, r0
 80066ac:	b330      	cbz	r0, 80066fc <main+0x33c>
 80066ae:	b672      	cpsid	i
  while (1)
 80066b0:	e7fe      	b.n	80066b0 <main+0x2f0>
 80066b2:	b672      	cpsid	i
 80066b4:	e7fe      	b.n	80066b4 <main+0x2f4>
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40021800 	.word	0x40021800
 80066c0:	40020400 	.word	0x40020400
 80066c4:	40020800 	.word	0x40020800
 80066c8:	40022000 	.word	0x40022000
 80066cc:	40020c00 	.word	0x40020c00
 80066d0:	40020000 	.word	0x40020000
 80066d4:	40021c00 	.word	0x40021c00
 80066d8:	40012200 	.word	0x40012200
 80066dc:	0f000001 	.word	0x0f000001
 80066e0:	2000083c 	.word	0x2000083c
 80066e4:	20000084 	.word	0x20000084
 80066e8:	40028000 	.word	0x40028000
 80066ec:	00e18000 	.word	0x00e18000
 80066f0:	20000934 	.word	0x20000934
 80066f4:	200009d4 	.word	0x200009d4
 80066f8:	200008ec 	.word	0x200008ec
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80066fc:	f8df a340 	ldr.w	sl, [pc, #832]	@ 8006a40 <main+0x680>
 8006700:	9004      	str	r0, [sp, #16]
 8006702:	2234      	movs	r2, #52	@ 0x34
 8006704:	4650      	mov	r0, sl
 8006706:	f005 feb7 	bl	800c478 <memset>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800670a:	9904      	ldr	r1, [sp, #16]
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 800670c:	48bb      	ldr	r0, [pc, #748]	@ (80069fc <main+0x63c>)
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800670e:	61a1      	str	r1, [r4, #24]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8006710:	2308      	movs	r3, #8
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8006712:	f10d 0998 	add.w	r9, sp, #152	@ 0x98
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8006716:	e9c0 1102 	strd	r1, r1, [r0, #8]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800671a:	e9c0 8105 	strd	r8, r1, [r0, #20]
  hnor1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 800671e:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8006722:	e9c0 1109 	strd	r1, r1, [r0, #36]	@ 0x24
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8006726:	e9c0 110b 	strd	r1, r1, [r0, #44]	@ 0x2c
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800672a:	e9c0 110d 	strd	r1, r1, [r0, #52]	@ 0x34
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 800672e:	6103      	str	r3, [r0, #16]
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006730:	63c1      	str	r1, [r0, #60]	@ 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8006732:	6441      	str	r1, [r0, #68]	@ 0x44
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8006734:	460a      	mov	r2, r1
  Timing.AddressSetupTime = 15;
 8006736:	230f      	movs	r3, #15
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006738:	e9c4 1100 	strd	r1, r1, [r4]
 800673c:	e9c4 1102 	strd	r1, r1, [r4, #8]
 8006740:	e9c4 1104 	strd	r1, r1, [r4, #16]
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8006744:	f8c9 1018 	str.w	r1, [r9, #24]
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006748:	2121      	movs	r1, #33	@ 0x21
 800674a:	f84a 1c04 	str.w	r1, [sl, #-4]
  Timing.AddressHoldTime = 15;
 800674e:	e9c9 3300 	strd	r3, r3, [r9]
  Timing.BusTurnAroundDuration = 15;
 8006752:	f8c9 300c 	str.w	r3, [r9, #12]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006756:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800675a:	4ba9      	ldr	r3, [pc, #676]	@ (8006a00 <main+0x640>)
 800675c:	6043      	str	r3, [r0, #4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800675e:	f8ca 1010 	str.w	r1, [sl, #16]
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8006762:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
  Timing.DataSetupTime = 255;
 8006766:	f04f 0bff 	mov.w	fp, #255	@ 0xff
  Timing.DataLatency = 17;
 800676a:	f04f 0a11 	mov.w	sl, #17
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 800676e:	6003      	str	r3, [r0, #0]
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8006770:	4649      	mov	r1, r9
  Timing.CLKDivision = 16;
 8006772:	f8c9 8010 	str.w	r8, [r9, #16]
  Timing.DataSetupTime = 255;
 8006776:	f8c9 b008 	str.w	fp, [r9, #8]
  Timing.DataLatency = 17;
 800677a:	f8c9 a014 	str.w	sl, [r9, #20]
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800677e:	f004 f80f 	bl	800a7a0 <HAL_NOR_Init>
 8006782:	230f      	movs	r3, #15
 8006784:	4602      	mov	r2, r0
 8006786:	b108      	cbz	r0, 800678c <main+0x3cc>
 8006788:	b672      	cpsid	i
  while (1)
 800678a:	e7fe      	b.n	800678a <main+0x3ca>
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800678c:	f8c9 0018 	str.w	r0, [r9, #24]
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8006790:	489c      	ldr	r0, [pc, #624]	@ (8006a04 <main+0x644>)
  Timing.DataSetupTime = 255;
 8006792:	f8c9 b008 	str.w	fp, [r9, #8]
  Timing.AddressHoldTime = 15;
 8006796:	e9c9 3300 	strd	r3, r3, [r9]
  Timing.CLKDivision = 16;
 800679a:	e9c9 3803 	strd	r3, r8, [r9, #12]
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 800679e:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 80067a2:	6003      	str	r3, [r0, #0]
  Timing.DataLatency = 17;
 80067a4:	f8c9 a014 	str.w	sl, [r9, #20]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80067a8:	f503 7382 	add.w	r3, r3, #260	@ 0x104
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80067ac:	a926      	add	r1, sp, #152	@ 0x98
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 80067ae:	e9c0 3501 	strd	r3, r5, [r0, #4]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80067b2:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80067b6:	e9c0 8205 	strd	r8, r2, [r0, #20]
  hsram2.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80067ba:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80067be:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80067c2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80067c6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80067ca:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80067cc:	6442      	str	r2, [r0, #68]	@ 0x44
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80067ce:	f004 fe4d 	bl	800b46c <HAL_SRAM_Init>
 80067d2:	4603      	mov	r3, r0
 80067d4:	b108      	cbz	r0, 80067da <main+0x41a>
 80067d6:	b672      	cpsid	i
  while (1)
 80067d8:	e7fe      	b.n	80067d8 <main+0x418>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80067da:	488b      	ldr	r0, [pc, #556]	@ (8006a08 <main+0x648>)
  SdramTiming.RCDDelay = 16;
 80067dc:	f8c4 8018 	str.w	r8, [r4, #24]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80067e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80067e4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80067e8:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80067ec:	4b87      	ldr	r3, [pc, #540]	@ (8006a0c <main+0x64c>)
 80067ee:	6003      	str	r3, [r0, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80067f0:	2720      	movs	r7, #32
 80067f2:	2340      	movs	r3, #64	@ 0x40
 80067f4:	e9c0 7304 	strd	r7, r3, [r0, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80067f8:	2204      	movs	r2, #4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80067fa:	2380      	movs	r3, #128	@ 0x80
  SdramTiming.ExitSelfRefreshDelay = 16;
 80067fc:	e9c4 8800 	strd	r8, r8, [r4]
  SdramTiming.RowCycleDelay = 16;
 8006800:	e9c4 8802 	strd	r8, r8, [r4, #8]
  SdramTiming.RPDelay = 16;
 8006804:	e9c4 8804 	strd	r8, r8, [r4, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006808:	f50d 5100 	add.w	r1, sp, #8192	@ 0x2000
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800680c:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800680e:	6183      	str	r3, [r0, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006810:	f004 fdec 	bl	800b3ec <HAL_SDRAM_Init>
 8006814:	b108      	cbz	r0, 800681a <main+0x45a>
 8006816:	b672      	cpsid	i
  while (1)
 8006818:	e7fe      	b.n	8006818 <main+0x458>
  hi2c1.Instance = I2C1;
 800681a:	4d7d      	ldr	r5, [pc, #500]	@ (8006a10 <main+0x650>)
  hi2c1.Init.ClockSpeed = 100000;
 800681c:	4b7d      	ldr	r3, [pc, #500]	@ (8006a14 <main+0x654>)
  hi2c1.Init.OwnAddress1 = 0;
 800681e:	e9c5 0002 	strd	r0, r0, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8006822:	e9c5 0005 	strd	r0, r0, [r5, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006826:	e9c5 0007 	strd	r0, r0, [r5, #28]
  hi2c1.Init.ClockSpeed = 100000;
 800682a:	487b      	ldr	r0, [pc, #492]	@ (8006a18 <main+0x658>)
 800682c:	e9c5 0300 	strd	r0, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006830:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006834:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006836:	612b      	str	r3, [r5, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006838:	f003 fd62 	bl	800a300 <HAL_I2C_Init>
 800683c:	4601      	mov	r1, r0
 800683e:	b108      	cbz	r0, 8006844 <main+0x484>
 8006840:	b672      	cpsid	i
  while (1)
 8006842:	e7fe      	b.n	8006842 <main+0x482>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006844:	4628      	mov	r0, r5
 8006846:	f003 fe23 	bl	800a490 <HAL_I2CEx_ConfigAnalogFilter>
 800684a:	4601      	mov	r1, r0
 800684c:	b108      	cbz	r0, 8006852 <main+0x492>
 800684e:	b672      	cpsid	i
  while (1)
 8006850:	e7fe      	b.n	8006850 <main+0x490>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006852:	4628      	mov	r0, r5
 8006854:	f003 fe3c 	bl	800a4d0 <HAL_I2CEx_ConfigDigitalFilter>
 8006858:	4605      	mov	r5, r0
 800685a:	b108      	cbz	r0, 8006860 <main+0x4a0>
 800685c:	b672      	cpsid	i
  while (1)
 800685e:	e7fe      	b.n	800685e <main+0x49e>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006860:	2234      	movs	r2, #52	@ 0x34
 8006862:	4629      	mov	r1, r5
 8006864:	4648      	mov	r0, r9
 8006866:	f005 fe07 	bl	800c478 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800686a:	2234      	movs	r2, #52	@ 0x34
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f005 fe02 	bl	800c478 <memset>
  hltdc.Instance = LTDC;
 8006874:	4869      	ldr	r0, [pc, #420]	@ (8006a1c <main+0x65c>)
 8006876:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <main+0x660>)
 8006878:	6003      	str	r3, [r0, #0]
  hltdc.Init.HorizontalSync = 7;
 800687a:	2307      	movs	r3, #7
 800687c:	6143      	str	r3, [r0, #20]
  hltdc.Init.AccumulatedVBP = 5;
 800687e:	f04f 0b0e 	mov.w	fp, #14
 8006882:	2305      	movs	r3, #5
 8006884:	e9c0 b307 	strd	fp, r3, [r0, #28]
  hltdc.Init.AccumulatedActiveH = 485;
 8006888:	f240 228e 	movw	r2, #654	@ 0x28e
 800688c:	f240 13e5 	movw	r3, #485	@ 0x1e5
 8006890:	e9c0 2309 	strd	r2, r3, [r0, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 487;
 8006894:	f44f 7125 	mov.w	r1, #660	@ 0x294
 8006898:	f240 13e7 	movw	r3, #487	@ 0x1e7
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800689c:	e9c0 5501 	strd	r5, r5, [r0, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80068a0:	e9c0 5503 	strd	r5, r5, [r0, #12]
  hltdc.Init.TotalHeigh = 487;
 80068a4:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hltdc.Init.VerticalSync = 3;
 80068a8:	6186      	str	r6, [r0, #24]
  hltdc.Init.Backcolor.Blue = 0;
 80068aa:	8685      	strh	r5, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 80068ac:	f880 5036 	strb.w	r5, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80068b0:	f003 fe32 	bl	800a518 <HAL_LTDC_Init>
 80068b4:	b108      	cbz	r0, 80068ba <main+0x4fa>
 80068b6:	b672      	cpsid	i
  while (1)
 80068b8:	e7fe      	b.n	80068b8 <main+0x4f8>
  pLayerCfg.WindowX0 = 0;
 80068ba:	ac26      	add	r4, sp, #152	@ 0x98
 80068bc:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80068be:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80068c2:	2505      	movs	r5, #5
  pLayerCfg.WindowX1 = 0;
 80068c4:	e9c4 2200 	strd	r2, r2, [r4]
  pLayerCfg.WindowY1 = 0;
 80068c8:	e9c4 2202 	strd	r2, r2, [r4, #8]
  pLayerCfg.Alpha = 0;
 80068cc:	e9c4 2204 	strd	r2, r2, [r4, #16]
  pLayerCfg.ImageWidth = 0;
 80068d0:	e9c4 2209 	strd	r2, r2, [r4, #36]	@ 0x24
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80068d4:	e9c4 6507 	strd	r6, r5, [r4, #28]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80068d8:	4850      	ldr	r0, [pc, #320]	@ (8006a1c <main+0x65c>)
  pLayerCfg.Alpha0 = 0;
 80068da:	61a2      	str	r2, [r4, #24]
  pLayerCfg.ImageHeight = 0;
 80068dc:	62e2      	str	r2, [r4, #44]	@ 0x2c
  pLayerCfg.Backcolor.Blue = 0;
 80068de:	8622      	strh	r2, [r4, #48]	@ 0x30
  pLayerCfg.Backcolor.Red = 0;
 80068e0:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80068e4:	4621      	mov	r1, r4
 80068e6:	f003 fe87 	bl	800a5f8 <HAL_LTDC_ConfigLayer>
 80068ea:	b108      	cbz	r0, 80068f0 <main+0x530>
 80068ec:	b672      	cpsid	i
  while (1)
 80068ee:	e7fe      	b.n	80068ee <main+0x52e>
  pLayerCfg1.WindowX0 = 0;
 80068f0:	f50d 5b00 	add.w	fp, sp, #8192	@ 0x2000
  pLayerCfg1.WindowX1 = 0;
 80068f4:	e9cb 0000 	strd	r0, r0, [fp]
  pLayerCfg1.WindowY1 = 0;
 80068f8:	e9cb 0002 	strd	r0, r0, [fp, #8]
  pLayerCfg1.Alpha = 0;
 80068fc:	e9cb 0004 	strd	r0, r0, [fp, #16]
  pLayerCfg1.ImageWidth = 0;
 8006900:	e9cb 0009 	strd	r0, r0, [fp, #36]	@ 0x24
  pLayerCfg1.Alpha0 = 0;
 8006904:	f8cb 0018 	str.w	r0, [fp, #24]
  pLayerCfg1.ImageHeight = 0;
 8006908:	f8cb 002c 	str.w	r0, [fp, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800690c:	f8ab 0030 	strh.w	r0, [fp, #48]	@ 0x30
  pLayerCfg1.Backcolor.Red = 0;
 8006910:	f88b 0032 	strb.w	r0, [fp, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8006914:	2201      	movs	r2, #1
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006916:	e9cb 6507 	strd	r6, r5, [fp, #28]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800691a:	4840      	ldr	r0, [pc, #256]	@ (8006a1c <main+0x65c>)
 800691c:	4659      	mov	r1, fp
 800691e:	f003 fe6b 	bl	800a5f8 <HAL_LTDC_ConfigLayer>
 8006922:	4602      	mov	r2, r0
 8006924:	b108      	cbz	r0, 800692a <main+0x56a>
 8006926:	b672      	cpsid	i
  while (1)
 8006928:	e7fe      	b.n	8006928 <main+0x568>
  hsai_BlockA1.Instance = SAI1_Block_A;
 800692a:	483e      	ldr	r0, [pc, #248]	@ (8006a24 <main+0x664>)
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800692c:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006930:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8006934:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8006938:	6342      	str	r2, [r0, #52]	@ 0x34
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800693a:	6102      	str	r2, [r0, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800693c:	6182      	str	r2, [r0, #24]
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800693e:	65c2      	str	r2, [r0, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8006940:	6642      	str	r2, [r0, #100]	@ 0x64
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006942:	4a39      	ldr	r2, [pc, #228]	@ (8006a28 <main+0x668>)
 8006944:	2303      	movs	r3, #3
 8006946:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 800694a:	2501      	movs	r5, #1
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800694c:	2308      	movs	r3, #8
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_24;
 800694e:	26c0      	movs	r6, #192	@ 0xc0
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 8006950:	6085      	str	r5, [r0, #8]
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8006952:	6485      	str	r5, [r0, #72]	@ 0x48
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8006954:	6605      	str	r5, [r0, #96]	@ 0x60
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_24;
 8006956:	6386      	str	r6, [r0, #56]	@ 0x38
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8006958:	6443      	str	r3, [r0, #68]	@ 0x44
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800695a:	f004 fc0f 	bl	800b17c <HAL_SAI_Init>
 800695e:	4602      	mov	r2, r0
 8006960:	b108      	cbz	r0, 8006966 <main+0x5a6>
 8006962:	b672      	cpsid	i
  while (1)
 8006964:	e7fe      	b.n	8006964 <main+0x5a4>
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006966:	4831      	ldr	r0, [pc, #196]	@ (8006a2c <main+0x66c>)
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_PLLI2S;
 8006968:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8006a44 <main+0x684>
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800696c:	6042      	str	r2, [r0, #4]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800696e:	e9c0 260d 	strd	r2, r6, [r0, #52]	@ 0x34
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006972:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006976:	e9c0 2204 	strd	r2, r2, [r0, #16]
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800697a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800697e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8006982:	e9c0 5218 	strd	r5, r2, [r0, #96]	@ 0x60
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006986:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006988:	6182      	str	r2, [r0, #24]
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800698a:	65c2      	str	r2, [r0, #92]	@ 0x5c
  hsai_BlockB1.Instance = SAI1_Block_B;
 800698c:	4a28      	ldr	r2, [pc, #160]	@ (8006a30 <main+0x670>)
 800698e:	6002      	str	r2, [r0, #0]
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8006990:	2308      	movs	r3, #8
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_PLLI2S;
 8006992:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006996:	e9c0 2807 	strd	r2, r8, [r0, #28]
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800699a:	e9c0 3511 	strd	r3, r5, [r0, #68]	@ 0x44
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800699e:	f004 fbed 	bl	800b17c <HAL_SAI_Init>
 80069a2:	4602      	mov	r2, r0
 80069a4:	b108      	cbz	r0, 80069aa <main+0x5ea>
 80069a6:	b672      	cpsid	i
  while (1)
 80069a8:	e7fe      	b.n	80069a8 <main+0x5e8>
  huart1.Instance = USART1;
 80069aa:	4822      	ldr	r0, [pc, #136]	@ (8006a34 <main+0x674>)
  huart1.Init.BaudRate = 9600;
 80069ac:	4b22      	ldr	r3, [pc, #136]	@ (8006a38 <main+0x678>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80069ae:	60c2      	str	r2, [r0, #12]
  huart1.Init.BaudRate = 9600;
 80069b0:	f44f 5a16 	mov.w	sl, #9600	@ 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80069b4:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  huart1.Init.Mode = UART_MODE_TX_RX;
 80069b8:	f44f 69c0 	mov.w	r9, #1536	@ 0x600
 80069bc:	f04f 080c 	mov.w	r8, #12
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80069c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart1.Init.BaudRate = 9600;
 80069c4:	e9c0 3a00 	strd	r3, sl, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80069c8:	e9c0 9804 	strd	r9, r8, [r0, #16]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80069cc:	6086      	str	r6, [r0, #8]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80069ce:	f004 fd7b 	bl	800b4c8 <HAL_UART_Init>
 80069d2:	b108      	cbz	r0, 80069d8 <main+0x618>
 80069d4:	b672      	cpsid	i
  while (1)
 80069d6:	e7fe      	b.n	80069d6 <main+0x616>
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069d8:	4818      	ldr	r0, [pc, #96]	@ (8006a3c <main+0x67c>)
 80069da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80069de:	2308      	movs	r3, #8
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80069e0:	2702      	movs	r7, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069e2:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80069e4:	71c5      	strb	r5, [r0, #7]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80069e6:	f8a0 3005 	strh.w	r3, [r0, #5]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80069ea:	f8a0 7009 	strh.w	r7, [r0, #9]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80069ee:	f002 ff8f 	bl	8009910 <HAL_HCD_Init>
 80069f2:	4602      	mov	r2, r0
 80069f4:	b340      	cbz	r0, 8006a48 <main+0x688>
 80069f6:	b672      	cpsid	i
  while (1)
 80069f8:	e7fe      	b.n	80069f8 <main+0x638>
 80069fa:	bf00      	nop
 80069fc:	200001b8 	.word	0x200001b8
 8006a00:	a0000104 	.word	0xa0000104
 8006a04:	20000168 	.word	0x20000168
 8006a08:	20000134 	.word	0x20000134
 8006a0c:	a0000140 	.word	0xa0000140
 8006a10:	200007e8 	.word	0x200007e8
 8006a14:	000186a0 	.word	0x000186a0
 8006a18:	40005400 	.word	0x40005400
 8006a1c:	20000740 	.word	0x20000740
 8006a20:	40016800 	.word	0x40016800
 8006a24:	200006b8 	.word	0x200006b8
 8006a28:	40015804 	.word	0x40015804
 8006a2c:	20000630 	.word	0x20000630
 8006a30:	40015824 	.word	0x40015824
 8006a34:	200005e8 	.word	0x200005e8
 8006a38:	40011000 	.word	0x40011000
 8006a3c:	20000208 	.word	0x20000208
 8006a40:	20000a78 	.word	0x20000a78
 8006a44:	0002ee00 	.word	0x0002ee00
  UartHandle.Instance          = USART1;
 8006a48:	488f      	ldr	r0, [pc, #572]	@ (8006c88 <main+0x8c8>)
 8006a4a:	4b90      	ldr	r3, [pc, #576]	@ (8006c8c <main+0x8cc>)
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8006a4c:	e9c0 9804 	strd	r9, r8, [r0, #16]
  UartHandle.Init.BaudRate     = 9600;
 8006a50:	e9c0 3a00 	strd	r3, sl, [r0]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8006a54:	e9c0 6202 	strd	r6, r2, [r0, #8]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a58:	e9c0 2206 	strd	r2, r2, [r0, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8006a5c:	f004 fd34 	bl	800b4c8 <HAL_UART_Init>
 8006a60:	b108      	cbz	r0, 8006a66 <main+0x6a6>
 8006a62:	b672      	cpsid	i
  while (1)
 8006a64:	e7fe      	b.n	8006a64 <main+0x6a4>
  SDRAM_Timing.LoadToActiveDelay    = 2;
 8006a66:	498a      	ldr	r1, [pc, #552]	@ (8006c90 <main+0x8d0>)
  hsdram.Instance = FMC_SDRAM_DEVICE;
 8006a68:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 8006cd0 <main+0x910>
  SDRAM_Timing.LoadToActiveDelay    = 2;
 8006a6c:	600f      	str	r7, [r1, #0]
  SDRAM_Timing.ExitSelfRefreshDelay = 6;
 8006a6e:	2206      	movs	r2, #6
  SDRAM_Timing.SelfRefreshTime      = 4;
 8006a70:	2304      	movs	r3, #4
  SDRAM_Timing.ExitSelfRefreshDelay = 6;
 8006a72:	604a      	str	r2, [r1, #4]
  SDRAM_Timing.RowCycleDelay        = 6;
 8006a74:	60ca      	str	r2, [r1, #12]
  hsdram.Instance = FMC_SDRAM_DEVICE;
 8006a76:	4a87      	ldr	r2, [pc, #540]	@ (8006c94 <main+0x8d4>)
  SDRAM_Timing.SelfRefreshTime      = 4;
 8006a78:	608b      	str	r3, [r1, #8]
  hsdram.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006a7a:	f8c9 300c 	str.w	r3, [r9, #12]
  hsdram.Instance = FMC_SDRAM_DEVICE;
 8006a7e:	f8c9 2000 	str.w	r2, [r9]
  hsdram.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006a82:	2320      	movs	r3, #32
 8006a84:	2240      	movs	r2, #64	@ 0x40
 8006a86:	e9c9 3204 	strd	r3, r2, [r9, #16]
  hsdram.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006a8a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  hsdram.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006a8e:	e9c9 0001 	strd	r0, r0, [r9, #4]
  hsdram.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006a92:	e9c9 6009 	strd	r6, r0, [r9, #36]	@ 0x24
  hsdram.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006a96:	f8c9 001c 	str.w	r0, [r9, #28]
  hsdram.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006a9a:	f8c9 2018 	str.w	r2, [r9, #24]
  if(HAL_SDRAM_Init(&hsdram, &SDRAM_Timing) != HAL_OK)
 8006a9e:	4648      	mov	r0, r9
  hsdram.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006aa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  SDRAM_Timing.RPDelay              = 2;
 8006aa4:	e9c1 7704 	strd	r7, r7, [r1, #16]
  SDRAM_Timing.RCDDelay             = 2;
 8006aa8:	618f      	str	r7, [r1, #24]
  hsdram.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006aaa:	f8c9 2020 	str.w	r2, [r9, #32]
  if(HAL_SDRAM_Init(&hsdram, &SDRAM_Timing) != HAL_OK)
 8006aae:	f004 fc9d 	bl	800b3ec <HAL_SDRAM_Init>
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	b108      	cbz	r0, 8006aba <main+0x6fa>
 8006ab6:	b672      	cpsid	i
  while (1)
 8006ab8:	e7fe      	b.n	8006ab8 <main+0x6f8>
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006aba:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8006cd4 <main+0x914>
  __IO uint32_t tmpmrd = 0;
 8006abe:	9011      	str	r0, [sp, #68]	@ 0x44
  crypto_sign(sm, &smlen, m, mlen, sk);
 8006ac0:	ab1e      	add	r3, sp, #120	@ 0x78
 8006ac2:	9304      	str	r3, [sp, #16]
  __IO uint32_t tmpmrd = 0;
 8006ac4:	ab11      	add	r3, sp, #68	@ 0x44
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006ac6:	4632      	mov	r2, r6
  Command->ModeRegisterDefinition = 0;
 8006ac8:	e9ca 5002 	strd	r5, r0, [sl, #8]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006acc:	4651      	mov	r1, sl
  __IO uint32_t tmpmrd = 0;
 8006ace:	9305      	str	r3, [sp, #20]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006ad0:	4648      	mov	r0, r9
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	f8ca 3004 	str.w	r3, [sl, #4]
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006ad8:	f8ca 5000 	str.w	r5, [sl]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006adc:	f004 fca8 	bl	800b430 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f002 faab 	bl	800903c <HAL_Delay>
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ae6:	2310      	movs	r3, #16
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006ae8:	4632      	mov	r2, r6
 8006aea:	4651      	mov	r1, sl
 8006aec:	4648      	mov	r0, r9
  Command->AutoRefreshNumber = 1;
 8006aee:	e9ca 3501 	strd	r3, r5, [sl, #4]
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8006af2:	f8ca 7000 	str.w	r7, [sl]
  Command->ModeRegisterDefinition = 0;
 8006af6:	f8ca 800c 	str.w	r8, [sl, #12]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006afa:	f004 fc99 	bl	800b430 <HAL_SDRAM_SendCommand>
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006afe:	2303      	movs	r3, #3
 8006b00:	f8ca 3000 	str.w	r3, [sl]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006b04:	2108      	movs	r1, #8
 8006b06:	2310      	movs	r3, #16
 8006b08:	e9ca 3101 	strd	r3, r1, [sl, #4]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4651      	mov	r1, sl
 8006b10:	4648      	mov	r0, r9
  Command->ModeRegisterDefinition = 0;
 8006b12:	f8ca 800c 	str.w	r8, [sl, #12]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006b16:	f004 fc8b 	bl	800b430 <HAL_SDRAM_SendCommand>
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006b1a:	2004      	movs	r0, #4
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	e9ca 0300 	strd	r0, r3, [sl]
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8006b22:	9b05      	ldr	r3, [sp, #20]
  Command->AutoRefreshNumber = 1;
 8006b24:	f8ca 5008 	str.w	r5, [sl, #8]
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8006b28:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8006b2c:	6018      	str	r0, [r3, #0]
  Command->ModeRegisterDefinition = tmpmrd;
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	f8ca 000c 	str.w	r0, [sl, #12]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8006b34:	4632      	mov	r2, r6
 8006b36:	4651      	mov	r1, sl
 8006b38:	4648      	mov	r0, r9
 8006b3a:	f004 fc79 	bl	800b430 <HAL_SDRAM_SendCommand>
  hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 8006b3e:	f8d9 1000 	ldr.w	r1, [r9]
  *DWT_LAR = 0xC5ACCE55; // unlock (CM7)
 8006b42:	4d55      	ldr	r5, [pc, #340]	@ (8006c98 <main+0x8d8>)
  hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 8006b44:	694a      	ldr	r2, [r1, #20]
  printf("\r\n-------------------ALTEQ START-------------------\r\n");
 8006b46:	4855      	ldr	r0, [pc, #340]	@ (8006c9c <main+0x8dc>)
  hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 8006b48:	f442 6221 	orr.w	r2, r2, #2576	@ 0xa10
 8006b4c:	f042 0208 	orr.w	r2, r2, #8
 8006b50:	614a      	str	r2, [r1, #20]
  *SCB_DEMCR |= 0x01000000;
 8006b52:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
  *DWT_LAR = 0xC5ACCE55; // unlock (CM7)
 8006b56:	4a52      	ldr	r2, [pc, #328]	@ (8006ca0 <main+0x8e0>)
 8006b58:	f8c5 2fb0 	str.w	r2, [r5, #4016]	@ 0xfb0
  *SCB_DEMCR |= 0x01000000;
 8006b5c:	f8d1 2dfc 	ldr.w	r2, [r1, #3580]	@ 0xdfc
 8006b60:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006b64:	f8c1 2dfc 	str.w	r2, [r1, #3580]	@ 0xdfc
  *DWT_CYCCNT = 0; // reset the counter
 8006b68:	f8c5 8004 	str.w	r8, [r5, #4]
  *DWT_CONTROL |= 1 ; // enable the counter
 8006b6c:	682a      	ldr	r2, [r5, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	602a      	str	r2, [r5, #0]
  printf("\r\n-------------------ALTEQ START-------------------\r\n");
 8006b74:	f005 fba0 	bl	800c2b8 <puts>
  unsigned char pk[CRYPTO_PUBLICKEYBYTES] = { 0, };
 8006b78:	f8c4 8000 	str.w	r8, [r4]
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	f641 7264 	movw	r2, #8036	@ 0x1f64
 8006b82:	a827      	add	r0, sp, #156	@ 0x9c
 8006b84:	f005 fc78 	bl	800c478 <memset>
  unsigned char sm[CRYPTO_BYTES + 32] = { 0, };
 8006b88:	f50d 5339 	add.w	r3, sp, #11840	@ 0x2e40
  unsigned char sk[CRYPTO_SECRETKEYBYTES] = { 0, };
 8006b8c:	ac16      	add	r4, sp, #88	@ 0x58
  unsigned char sm[CRYPTO_BYTES + 32] = { 0, };
 8006b8e:	3318      	adds	r3, #24
 8006b90:	f6a3 6054 	subw	r0, r3, #3668	@ 0xe54
  unsigned char sk[CRYPTO_SECRETKEYBYTES] = { 0, };
 8006b94:	4623      	mov	r3, r4
  unsigned char sm[CRYPTO_BYTES + 32] = { 0, };
 8006b96:	4641      	mov	r1, r8
  unsigned char sk[CRYPTO_SECRETKEYBYTES] = { 0, };
 8006b98:	f843 8b04 	str.w	r8, [r3], #4
  unsigned char sm[CRYPTO_BYTES + 32] = { 0, };
 8006b9c:	f8cb 8000 	str.w	r8, [fp]
 8006ba0:	f643 6254 	movw	r2, #15956	@ 0x3e54
  unsigned char sk[CRYPTO_SECRETKEYBYTES] = { 0, };
 8006ba4:	e9c3 8801 	strd	r8, r8, [r3, #4]
 8006ba8:	e9c3 8803 	strd	r8, r8, [r3, #12]
 8006bac:	e9c3 8805 	strd	r8, r8, [r3, #20]
 8006bb0:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  unsigned char sm[CRYPTO_BYTES + 32] = { 0, };
 8006bb4:	f005 fc60 	bl	800c478 <memset>
  unsigned char m[32] = {0,};
 8006bb8:	f60d 6358 	addw	r3, sp, #3672	@ 0xe58
 8006bbc:	f5a3 635e 	sub.w	r3, r3, #3552	@ 0xde0
  unsigned long long smlen = 0;
 8006bc0:	2200      	movs	r2, #0
  unsigned char m[32] = {0,};
 8006bc2:	f8c3 8000 	str.w	r8, [r3]
  unsigned long long smlen = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  printf("pk size = %d\r\n", CRYPTO_PUBLICKEYBYTES);
 8006bcc:	f641 7168 	movw	r1, #8040	@ 0x1f68
  unsigned long long mlen = 32;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2220      	movs	r2, #32
  printf("pk size = %d\r\n", CRYPTO_PUBLICKEYBYTES);
 8006bd4:	4833      	ldr	r0, [pc, #204]	@ (8006ca4 <main+0x8e4>)
  unsigned char m[32] = {0,};
 8006bd6:	f8cd 8094 	str.w	r8, [sp, #148]	@ 0x94
  unsigned long long mlen = 32;
 8006bda:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  unsigned char m[32] = {0,};
 8006bde:	e9cd 881f 	strd	r8, r8, [sp, #124]	@ 0x7c
 8006be2:	e9cd 8821 	strd	r8, r8, [sp, #132]	@ 0x84
 8006be6:	e9cd 8823 	strd	r8, r8, [sp, #140]	@ 0x8c
  printf("pk size = %d\r\n", CRYPTO_PUBLICKEYBYTES);
 8006bea:	f005 fafd 	bl	800c1e8 <iprintf>
  printf("sk size = %d\r\n", CRYPTO_SECRETKEYBYTES);
 8006bee:	2120      	movs	r1, #32
 8006bf0:	482d      	ldr	r0, [pc, #180]	@ (8006ca8 <main+0x8e8>)
 8006bf2:	f005 faf9 	bl	800c1e8 <iprintf>
  printf("sig size = %d\r\n", CRYPTO_BYTES);
 8006bf6:	f643 6138 	movw	r1, #15928	@ 0x3e38
 8006bfa:	482c      	ldr	r0, [pc, #176]	@ (8006cac <main+0x8ec>)
 8006bfc:	f005 faf4 	bl	800c1e8 <iprintf>
  printf("keypair...\r\n");
 8006c00:	482b      	ldr	r0, [pc, #172]	@ (8006cb0 <main+0x8f0>)
 8006c02:	f005 fb59 	bl	800c2b8 <puts>
  crypto_sign_keypair(pk, sk);
 8006c06:	4621      	mov	r1, r4
 8006c08:	a826      	add	r0, sp, #152	@ 0x98
  before = *DWT_CYCCNT;
 8006c0a:	686f      	ldr	r7, [r5, #4]
  crypto_sign_keypair(pk, sk);
 8006c0c:	f000 fd96 	bl	800773c <crypto_sign_keypair>
  after = *DWT_CYCCNT;
 8006c10:	6869      	ldr	r1, [r5, #4]
  printf("keypair cc : %d\r\n", after - before - 2);
 8006c12:	4828      	ldr	r0, [pc, #160]	@ (8006cb4 <main+0x8f4>)
 8006c14:	3902      	subs	r1, #2
 8006c16:	1bc9      	subs	r1, r1, r7
 8006c18:	f005 fae6 	bl	800c1e8 <iprintf>
  printf("sign...\r\n");
 8006c1c:	4826      	ldr	r0, [pc, #152]	@ (8006cb8 <main+0x8f8>)
 8006c1e:	f005 fb4b 	bl	800c2b8 <puts>
  crypto_sign(sm, &smlen, m, mlen, sk);
 8006c22:	4626      	mov	r6, r4
  before = *DWT_CYCCNT;
 8006c24:	686f      	ldr	r7, [r5, #4]
  crypto_sign(sm, &smlen, m, mlen, sk);
 8006c26:	9402      	str	r4, [sp, #8]
 8006c28:	e976 8902 	ldrd	r8, r9, [r6, #-8]!
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	e9cd 8900 	strd	r8, r9, [sp]
 8006c32:	a912      	add	r1, sp, #72	@ 0x48
 8006c34:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 8006c38:	f000 fe02 	bl	8007840 <crypto_sign>
  after = *DWT_CYCCNT;
 8006c3c:	6869      	ldr	r1, [r5, #4]
  printf("sign cc : %d\r\n", after - before - 2);
 8006c3e:	481f      	ldr	r0, [pc, #124]	@ (8006cbc <main+0x8fc>)
 8006c40:	3902      	subs	r1, #2
 8006c42:	1bc9      	subs	r1, r1, r7
 8006c44:	f005 fad0 	bl	800c1e8 <iprintf>
  printf("open...\r\n");
 8006c48:	481d      	ldr	r0, [pc, #116]	@ (8006cc0 <main+0x900>)
 8006c4a:	f005 fb35 	bl	800c2b8 <puts>
  r = crypto_sign_open(m, &mlen, sm, smlen, pk);
 8006c4e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8006c52:	ab26      	add	r3, sp, #152	@ 0x98
 8006c54:	4631      	mov	r1, r6
 8006c56:	9804      	ldr	r0, [sp, #16]
  before = *DWT_CYCCNT;
 8006c58:	686e      	ldr	r6, [r5, #4]
  r = crypto_sign_open(m, &mlen, sm, smlen, pk);
 8006c5a:	9302      	str	r3, [sp, #8]
 8006c5c:	e9cd 8900 	strd	r8, r9, [sp]
 8006c60:	f50d 5200 	add.w	r2, sp, #8192	@ 0x2000
 8006c64:	f000 ff92 	bl	8007b8c <crypto_sign_open>
  after = *DWT_CYCCNT;
 8006c68:	6869      	ldr	r1, [r5, #4]
  printf("verify cc : %d\r\n", after - before - 2);
 8006c6a:	3902      	subs	r1, #2
  r = crypto_sign_open(m, &mlen, sm, smlen, pk);
 8006c6c:	4604      	mov	r4, r0
  printf("verify cc : %d\r\n", after - before - 2);
 8006c6e:	1b89      	subs	r1, r1, r6
 8006c70:	4814      	ldr	r0, [pc, #80]	@ (8006cc4 <main+0x904>)
 8006c72:	f005 fab9 	bl	800c1e8 <iprintf>
  if (r != 0) {
 8006c76:	b11c      	cbz	r4, 8006c80 <main+0x8c0>
	  printf("ALTEQ VERIFY FAILED\r\n");
 8006c78:	4813      	ldr	r0, [pc, #76]	@ (8006cc8 <main+0x908>)
 8006c7a:	f005 fb1d 	bl	800c2b8 <puts>
  while (1)
 8006c7e:	e7fe      	b.n	8006c7e <main+0x8be>
	  printf("ALTEQ VERIFY SUCCESS\r\n");
 8006c80:	4812      	ldr	r0, [pc, #72]	@ (8006ccc <main+0x90c>)
 8006c82:	f005 fb19 	bl	800c2b8 <puts>
 8006c86:	e7fa      	b.n	8006c7e <main+0x8be>
 8006c88:	200000ec 	.word	0x200000ec
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	2000009c 	.word	0x2000009c
 8006c94:	a0000140 	.word	0xa0000140
 8006c98:	e0001000 	.word	0xe0001000
 8006c9c:	0800ce9c 	.word	0x0800ce9c
 8006ca0:	c5acce55 	.word	0xc5acce55
 8006ca4:	0800ced4 	.word	0x0800ced4
 8006ca8:	0800cee4 	.word	0x0800cee4
 8006cac:	0800cef4 	.word	0x0800cef4
 8006cb0:	0800cf04 	.word	0x0800cf04
 8006cb4:	0800cf10 	.word	0x0800cf10
 8006cb8:	0800cf24 	.word	0x0800cf24
 8006cbc:	0800cf30 	.word	0x0800cf30
 8006cc0:	0800cf40 	.word	0x0800cf40
 8006cc4:	0800cf4c 	.word	0x0800cf4c
 8006cc8:	0800cf60 	.word	0x0800cf60
 8006ccc:	0800cf78 	.word	0x0800cf78
 8006cd0:	200000b8 	.word	0x200000b8
 8006cd4:	2000008c 	.word	0x2000008c

08006cd8 <Error_Handler>:
 8006cd8:	b672      	cpsid	i
  while (1)
 8006cda:	e7fe      	b.n	8006cda <Error_Handler+0x2>

08006cdc <columnMul_32_vec>:
#include "matrix.h"
#include <string.h>

static void
columnMul_32_vec(uint32_t *mat, const uint32_t *column, const int j, const int s, const int vec_size)
{
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	b08f      	sub	sp, #60	@ 0x3c
 8006ce2:	4615      	mov	r5, r2
 8006ce4:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60

  for(i=0;i<N;i++)
    if (i!=j)
      for(k=s;k<N;k++)
        for(r=0; r<vec_size; r++)
	        mat[(i*N+k)*vec_size+r]=reductionModuloP(((uint64_t)mat[(i*N+k)*vec_size+r])+multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(i)*vec_size+r]));
 8006ce8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006cec:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006cf0:	eb03 0b02 	add.w	fp, r3, r2
 8006cf4:	fb0a f203 	mul.w	r2, sl, r3
 8006cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cfa:	fb0a f20b 	mul.w	r2, sl, fp
 8006cfe:	2700      	movs	r7, #0
 8006d00:	9208      	str	r2, [sp, #32]
 8006d02:	f1a0 0904 	sub.w	r9, r0, #4
 8006d06:	1f0a      	subs	r2, r1, #4
 8006d08:	e9cd 010b 	strd	r0, r1, [sp, #44]	@ 0x2c
 8006d0c:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8006d10:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d12:	4619      	mov	r1, r3
 8006d14:	46b8      	mov	r8, r7
 8006d16:	46ab      	mov	fp, r5
 8006d18:	464e      	mov	r6, r9
    if (i!=j)
 8006d1a:	45bb      	cmp	fp, r7
 8006d1c:	d042      	beq.n	8006da4 <columnMul_32_vec+0xc8>
      for(k=s;k<N;k++)
 8006d1e:	290d      	cmp	r1, #13
 8006d20:	d040      	beq.n	8006da4 <columnMul_32_vec+0xc8>
 8006d22:	f1ba 0f00 	cmp.w	sl, #0
 8006d26:	dd3d      	ble.n	8006da4 <columnMul_32_vec+0xc8>
 8006d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d2e:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 8006d32:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8006d36:	4499      	add	r9, r3
 8006d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d3a:	9107      	str	r1, [sp, #28]
 8006d3c:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	9b08      	ldr	r3, [sp, #32]
 8006d44:	e9cd 7b05 	strd	r7, fp, [sp, #20]
 8006d48:	46b4      	mov	ip, r6
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	464e      	mov	r6, r9
  for(i=0;i<N;i++)
 8006d50:	9c03      	ldr	r4, [sp, #12]
 8006d52:	eb0c 098b 	add.w	r9, ip, fp, lsl #2
 8006d56:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006d5a:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
        for(r=0; r<vec_size; r++)
 8006d5e:	2700      	movs	r7, #0
 8006d60:	464e      	mov	r6, r9
 8006d62:	4625      	mov	r5, r4
 8006d64:	46e1      	mov	r9, ip
	        mat[(i*N+k)*vec_size+r]=reductionModuloP(((uint64_t)mat[(i*N+k)*vec_size+r])+multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(i)*vec_size+r]));
 8006d66:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8006d6a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8006d6e:	f858 4f04 	ldr.w	r4, [r8, #4]!
 8006d72:	f7fd fd8d 	bl	8004890 <multiplicationModuloP>
 8006d76:	1820      	adds	r0, r4, r0
 8006d78:	f141 0100 	adc.w	r1, r1, #0
 8006d7c:	f7fd fd9c 	bl	80048b8 <reductionModuloP>
        for(r=0; r<vec_size; r++)
 8006d80:	3701      	adds	r7, #1
 8006d82:	45ba      	cmp	sl, r7
	        mat[(i*N+k)*vec_size+r]=reductionModuloP(((uint64_t)mat[(i*N+k)*vec_size+r])+multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(i)*vec_size+r]));
 8006d84:	f8c8 0000 	str.w	r0, [r8]
        for(r=0; r<vec_size; r++)
 8006d88:	d1ed      	bne.n	8006d66 <columnMul_32_vec+0x8a>
      for(k=s;k<N;k++)
 8006d8a:	e9dd 5601 	ldrd	r5, r6, [sp, #4]
 8006d8e:	3501      	adds	r5, #1
 8006d90:	2d0d      	cmp	r5, #13
 8006d92:	46cc      	mov	ip, r9
 8006d94:	4456      	add	r6, sl
 8006d96:	44d3      	add	fp, sl
 8006d98:	d1da      	bne.n	8006d50 <columnMul_32_vec+0x74>
 8006d9a:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8006d9e:	e9dd b106 	ldrd	fp, r1, [sp, #24]
 8006da2:	464e      	mov	r6, r9
  for(i=0;i<N;i++)
 8006da4:	3701      	adds	r7, #1
 8006da6:	2f0d      	cmp	r7, #13
 8006da8:	44d0      	add	r8, sl
 8006daa:	d1b6      	bne.n	8006d1a <columnMul_32_vec+0x3e>
  for(k=s;k<N;k++)
 8006dac:	4688      	mov	r8, r1
 8006dae:	f1b8 0f0d 	cmp.w	r8, #13
 8006db2:	465d      	mov	r5, fp
 8006db4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006db6:	e9dd 1b0c 	ldrd	r1, fp, [sp, #48]	@ 0x30
 8006dba:	d023      	beq.n	8006e04 <columnMul_32_vec+0x128>
 8006dbc:	f1ba 0f00 	cmp.w	sl, #0
    for(r=0; r<vec_size; r++)
      mat[(j*N+k)*vec_size+r]=reductionModuloP(multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(j)*vec_size+r]));
 8006dc0:	fb05 f70a 	mul.w	r7, r5, sl
 8006dc4:	dd1e      	ble.n	8006e04 <columnMul_32_vec+0x128>
 8006dc6:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8006dca:	3f01      	subs	r7, #1
 8006dcc:	fb0a f90b 	mul.w	r9, sl, fp
 8006dd0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006dd4:	f1a3 0b04 	sub.w	fp, r3, #4
    for(r=0; r<vec_size; r++)
 8006dd8:	eb0b 0589 	add.w	r5, fp, r9, lsl #2
      for(k=s;k<N;k++)
 8006ddc:	463e      	mov	r6, r7
    for(r=0; r<vec_size; r++)
 8006dde:	2400      	movs	r4, #0
      mat[(j*N+k)*vec_size+r]=reductionModuloP(multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(j)*vec_size+r]));
 8006de0:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8006de4:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8006de8:	f7fd fd52 	bl	8004890 <multiplicationModuloP>
 8006dec:	f7fd fd64 	bl	80048b8 <reductionModuloP>
    for(r=0; r<vec_size; r++)
 8006df0:	3401      	adds	r4, #1
 8006df2:	45a2      	cmp	sl, r4
      mat[(j*N+k)*vec_size+r]=reductionModuloP(multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(j)*vec_size+r]));
 8006df4:	6028      	str	r0, [r5, #0]
    for(r=0; r<vec_size; r++)
 8006df6:	d1f3      	bne.n	8006de0 <columnMul_32_vec+0x104>
  for(k=s;k<N;k++)
 8006df8:	f108 0801 	add.w	r8, r8, #1
 8006dfc:	f1b8 0f0d 	cmp.w	r8, #13
 8006e00:	44d1      	add	r9, sl
 8006e02:	d1e9      	bne.n	8006dd8 <columnMul_32_vec+0xfc>

}
 8006e04:	b00f      	add	sp, #60	@ 0x3c
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	bf00      	nop

08006e0c <columnsMatrix>:
        col[(i)*vec_size+r]=reductionModuloP(multiplicationModuloP((PRIME-col[(j)*vec_size+r]),col[(i)*vec_size+r]));
}

void
columnsMatrix(uint32_t *mat, const uint32_t *colsA, const uint32_t *colsB, const int vec_size)
{
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e10:	b091      	sub	sp, #68	@ 0x44
 8006e12:	f1b3 0900 	subs.w	r9, r3, #0
 8006e16:	4683      	mov	fp, r0
 8006e18:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e1a:	4617      	mov	r7, r2
 8006e1c:	bfd8      	it	le
 8006e1e:	ea4f 0449 	movle.w	r4, r9, lsl #1
 8006e22:	dd5b      	ble.n	8006edc <columnsMatrix+0xd0>
  int i,j,r;

  /* Transposition */
  for(i=0;i<N;i++)
 8006e24:	2234      	movs	r2, #52	@ 0x34
 8006e26:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8006e2a:	fb02 f609 	mul.w	r6, r2, r9
 8006e2e:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8006e32:	9302      	str	r3, [sp, #8]
 8006e34:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8006e38:	ea4f 0259 	mov.w	r2, r9, lsr #1
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	00d3      	lsls	r3, r2, #3
 8006e40:	9307      	str	r3, [sp, #28]
 8006e42:	f109 33ff 	add.w	r3, r9, #4294967295
 8006e46:	4608      	mov	r0, r1
 8006e48:	ea4f 0449 	mov.w	r4, r9, lsl #1
    for(j=0;j<N;j++)
      for(r=0; r<vec_size; r++)
        mat[(i*N+j)*vec_size + r]=colsA[(j*N+i)*vec_size + r];
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	f009 0301 	and.w	r3, r9, #1
 8006e54:	4682      	mov	sl, r0
 8006e56:	9308      	str	r3, [sp, #32]
 8006e58:	4680      	mov	r8, r0
 8006e5a:	f029 0501 	bic.w	r5, r9, #1
  for(i=0;i<N;i++)
 8006e5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e60:	465b      	mov	r3, fp
 8006e62:	460a      	mov	r2, r1
 8006e64:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e66:	4648      	mov	r0, r9
 8006e68:	940c      	str	r4, [sp, #48]	@ 0x30
    for(j=0;j<N;j++)
 8006e6a:	9902      	ldr	r1, [sp, #8]
 8006e6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e6e:	46c6      	mov	lr, r8
 8006e70:	4488      	add	r8, r1
 8006e72:	e9cd 830d 	strd	r8, r3, [sp, #52]	@ 0x34
 8006e76:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8006e7a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
        mat[(i*N+j)*vec_size + r]=colsA[(j*N+i)*vec_size + r];
 8006e7e:	4641      	mov	r1, r8
 8006e80:	4617      	mov	r7, r2
 8006e82:	469c      	mov	ip, r3
 8006e84:	f04f 090d 	mov.w	r9, #13
      for(r=0; r<vec_size; r++)
 8006e88:	9b03      	ldr	r3, [sp, #12]
 8006e8a:	2b06      	cmp	r3, #6
 8006e8c:	d904      	bls.n	8006e98 <columnsMatrix+0x8c>
 8006e8e:	f10e 0304 	add.w	r3, lr, #4
 8006e92:	4563      	cmp	r3, ip
 8006e94:	f040 80de 	bne.w	8007054 <columnsMatrix+0x248>
 8006e98:	f1ac 0204 	sub.w	r2, ip, #4
        mat[(i*N+j)*vec_size + r]=colsA[(j*N+i)*vec_size + r];
 8006e9c:	4673      	mov	r3, lr
 8006e9e:	4688      	mov	r8, r1
 8006ea0:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ea4:	f842 1f04 	str.w	r1, [r2, #4]!
      for(r=0; r<vec_size; r++)
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	d1f9      	bne.n	8006ea0 <columnsMatrix+0x94>
 8006eac:	4641      	mov	r1, r8
    for(j=0;j<N;j++)
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	449c      	add	ip, r3
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb8:	44b6      	add	lr, r6
 8006eba:	441f      	add	r7, r3
 8006ebc:	4404      	add	r4, r0
 8006ebe:	4431      	add	r1, r6
 8006ec0:	d1e2      	bne.n	8006e88 <columnsMatrix+0x7c>
  for(i=0;i<N;i++)
 8006ec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ec4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ec6:	e9dd 830d 	ldrd	r8, r3, [sp, #52]	@ 0x34
 8006eca:	3101      	adds	r1, #1
 8006ecc:	290d      	cmp	r1, #13
 8006ece:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ed0:	4433      	add	r3, r6
 8006ed2:	4402      	add	r2, r0
 8006ed4:	d1c9      	bne.n	8006e6a <columnsMatrix+0x5e>
 8006ed6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006ed8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006eda:	4681      	mov	r9, r0
 8006edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ede:	f44f 761c 	mov.w	r6, #624	@ 0x270
 8006ee2:	fb06 f609 	mul.w	r6, r6, r9
 8006ee6:	4433      	add	r3, r6
 8006ee8:	f06f 0233 	mvn.w	r2, #51	@ 0x33
 8006eec:	4698      	mov	r8, r3
 8006eee:	fb02 f309 	mul.w	r3, r2, r9
 8006ef2:	930a      	str	r3, [sp, #40]	@ 0x28

  /* operation */
  for(j=N-1;j>=0;j--)
 8006ef4:	250c      	movs	r5, #12
    columnMul_32_vec(mat, &(colsA[j*N*vec_size]), j, j+1, vec_size);
 8006ef6:	1c6b      	adds	r3, r5, #1
 8006ef8:	462a      	mov	r2, r5
 8006efa:	4641      	mov	r1, r8
 8006efc:	f8cd 9000 	str.w	r9, [sp]
 8006f00:	4658      	mov	r0, fp
 8006f02:	f7ff feeb 	bl	8006cdc <columnMul_32_vec>
  for(j=N-1;j>=0;j--)
 8006f06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f08:	3d01      	subs	r5, #1
 8006f0a:	4498      	add	r8, r3
 8006f0c:	1c6b      	adds	r3, r5, #1
 8006f0e:	d1f2      	bne.n	8006ef6 <columnsMatrix+0xea>
 8006f10:	229c      	movs	r2, #156	@ 0x9c
 8006f12:	fb02 f209 	mul.w	r2, r2, r9
 8006f16:	eb04 0109 	add.w	r1, r4, r9
 8006f1a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006f1e:	eb07 0581 	add.w	r5, r7, r1, lsl #2
 8006f22:	f06f 010c 	mvn.w	r1, #12
 8006f26:	f1ab 0a04 	sub.w	sl, fp, #4
 8006f2a:	fb01 fb09 	mul.w	fp, r1, r9
 8006f2e:	eba9 01c9 	sub.w	r1, r9, r9, lsl #3
 8006f32:	00c9      	lsls	r1, r1, #3
  for(j=N-1;j>=0;j--)
 8006f34:	200c      	movs	r0, #12
 8006f36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	19bb      	adds	r3, r7, r6
 8006f40:	4680      	mov	r8, r0
 8006f42:	462a      	mov	r2, r5
 8006f44:	46d3      	mov	fp, sl
 8006f46:	2600      	movs	r6, #0
 8006f48:	1f18      	subs	r0, r3, #4
 8006f4a:	46c2      	mov	sl, r8
 8006f4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f4e:	46b0      	mov	r8, r6
 8006f50:	930d      	str	r3, [sp, #52]	@ 0x34
 8006f52:	9108      	str	r1, [sp, #32]
 8006f54:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f56:	465f      	mov	r7, fp
    if (i!=j)
 8006f58:	45b2      	cmp	sl, r6
 8006f5a:	d03d      	beq.n	8006fd8 <columnsMatrix+0x1cc>
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	dd3a      	ble.n	8006fd8 <columnsMatrix+0x1cc>
 8006f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f64:	9607      	str	r6, [sp, #28]
 8006f66:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8006f6a:	eb08 0b48 	add.w	fp, r8, r8, lsl #1
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	e9cd 8a05 	strd	r8, sl, [sp, #20]
 8006f74:	9b08      	ldr	r3, [sp, #32]
 8006f76:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
 8006f7a:	240d      	movs	r4, #13
 8006f7c:	46bc      	mov	ip, r7
 8006f7e:	461d      	mov	r5, r3
 8006f80:	465e      	mov	r6, fp
 8006f82:	4627      	mov	r7, r4
  for(i=0;i<N;i++)
 8006f84:	9c04      	ldr	r4, [sp, #16]
 8006f86:	9502      	str	r5, [sp, #8]
 8006f88:	eb0c 0b85 	add.w	fp, ip, r5, lsl #2
 8006f8c:	eb0c 0a86 	add.w	sl, ip, r6, lsl #2
 8006f90:	9603      	str	r6, [sp, #12]
        for(r=0; r<vec_size; r++)
 8006f92:	f04f 0800 	mov.w	r8, #0
 8006f96:	465e      	mov	r6, fp
 8006f98:	4625      	mov	r5, r4
 8006f9a:	46e3      	mov	fp, ip
	        mat[(i*N+k)*vec_size+r]=reductionModuloP(((uint64_t)mat[(i*N+k)*vec_size+r])+multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(i)*vec_size+r]));
 8006f9c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8006fa0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8006fa4:	f85a 4f04 	ldr.w	r4, [sl, #4]!
 8006fa8:	f7fd fc72 	bl	8004890 <multiplicationModuloP>
 8006fac:	1820      	adds	r0, r4, r0
 8006fae:	f141 0100 	adc.w	r1, r1, #0
 8006fb2:	f7fd fc81 	bl	80048b8 <reductionModuloP>
        for(r=0; r<vec_size; r++)
 8006fb6:	f108 0801 	add.w	r8, r8, #1
 8006fba:	45c1      	cmp	r9, r8
	        mat[(i*N+k)*vec_size+r]=reductionModuloP(((uint64_t)mat[(i*N+k)*vec_size+r])+multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(i)*vec_size+r]));
 8006fbc:	f8ca 0000 	str.w	r0, [sl]
        for(r=0; r<vec_size; r++)
 8006fc0:	d1ec      	bne.n	8006f9c <columnsMatrix+0x190>
      for(k=s;k<N;k++)
 8006fc2:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 8006fc6:	3f01      	subs	r7, #1
 8006fc8:	46dc      	mov	ip, fp
 8006fca:	444e      	add	r6, r9
 8006fcc:	444d      	add	r5, r9
 8006fce:	d1d9      	bne.n	8006f84 <columnsMatrix+0x178>
 8006fd0:	e9dd 8a05 	ldrd	r8, sl, [sp, #20]
 8006fd4:	9e07      	ldr	r6, [sp, #28]
 8006fd6:	465f      	mov	r7, fp
  for(i=0;i<N;i++)
 8006fd8:	3601      	adds	r6, #1
 8006fda:	2e0d      	cmp	r6, #13
 8006fdc:	44c8      	add	r8, r9
 8006fde:	d1bb      	bne.n	8006f58 <columnsMatrix+0x14c>
 8006fe0:	f1b9 0f00 	cmp.w	r9, #0
 8006fe4:	46bb      	mov	fp, r7
 8006fe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fe8:	9908      	ldr	r1, [sp, #32]
 8006fea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fec:	46d0      	mov	r8, sl
 8006fee:	4637      	mov	r7, r6
 8006ff0:	dd21      	ble.n	8007036 <columnsMatrix+0x22a>
 8006ff2:	463d      	mov	r5, r7
 8006ff4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	1f17      	subs	r7, r2, #4
 8006ffc:	f8cd a008 	str.w	sl, [sp, #8]
 8007000:	460d      	mov	r5, r1
 8007002:	9205      	str	r2, [sp, #20]
 8007004:	4606      	mov	r6, r0
    for(r=0; r<vec_size; r++)
 8007006:	eb0b 0a85 	add.w	sl, fp, r5, lsl #2
 800700a:	46b8      	mov	r8, r7
 800700c:	2400      	movs	r4, #0
      mat[(j*N+k)*vec_size+r]=reductionModuloP(multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(j)*vec_size+r]));
 800700e:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8007012:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8007016:	f7fd fc3b 	bl	8004890 <multiplicationModuloP>
 800701a:	f7fd fc4d 	bl	80048b8 <reductionModuloP>
    for(r=0; r<vec_size; r++)
 800701e:	3401      	adds	r4, #1
 8007020:	45a1      	cmp	r9, r4
      mat[(j*N+k)*vec_size+r]=reductionModuloP(multiplicationModuloP(mat[(j*N+k)*vec_size+r],column[(j)*vec_size+r]));
 8007022:	f8ca 0000 	str.w	r0, [sl]
    for(r=0; r<vec_size; r++)
 8007026:	d1f2      	bne.n	800700e <columnsMatrix+0x202>
  for(k=s;k<N;k++)
 8007028:	3e01      	subs	r6, #1
 800702a:	444d      	add	r5, r9
 800702c:	d1eb      	bne.n	8007006 <columnsMatrix+0x1fa>
 800702e:	e9dd 8302 	ldrd	r8, r3, [sp, #8]
 8007032:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  for(j=N-1;j>=0;j--)
 8007036:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007038:	4403      	add	r3, r0
 800703a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800703c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007040:	4401      	add	r1, r0
 8007042:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007044:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007048:	4402      	add	r2, r0
 800704a:	f47f af7c 	bne.w	8006f46 <columnsMatrix+0x13a>
    columnMul_32_vec(mat, &(colsB[j*N*vec_size]), j, 0  , vec_size);
}
 800704e:	b011      	add	sp, #68	@ 0x44
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	9b07      	ldr	r3, [sp, #28]
        mat[(i*N+j)*vec_size + r]=colsA[(j*N+i)*vec_size + r];
 8007056:	f8cd 9014 	str.w	r9, [sp, #20]
 800705a:	eb03 080c 	add.w	r8, r3, ip
 800705e:	4672      	mov	r2, lr
 8007060:	4663      	mov	r3, ip
 8007062:	4689      	mov	r9, r1
 8007064:	9006      	str	r0, [sp, #24]
 8007066:	e9d2 1000 	ldrd	r1, r0, [r2]
 800706a:	e9c3 1000 	strd	r1, r0, [r3]
 800706e:	3308      	adds	r3, #8
 8007070:	4543      	cmp	r3, r8
 8007072:	f102 0208 	add.w	r2, r2, #8
 8007076:	d1f6      	bne.n	8007066 <columnsMatrix+0x25a>
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	4649      	mov	r1, r9
 800707c:	e9dd 9005 	ldrd	r9, r0, [sp, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f43f af14 	beq.w	8006eae <columnsMatrix+0xa2>
 8007086:	197b      	adds	r3, r7, r5
 8007088:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 800708c:	1963      	adds	r3, r4, r5
 800708e:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
      for(r=0; r<vec_size; r++)
 8007092:	e70c      	b.n	8006eae <columnsMatrix+0xa2>

08007094 <columnsDecomposition>:

int
columnsDecomposition(uint32_t *mat_to_transform, const int vec_size, const int nb_mats)
{
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t vec_mat0[N*N*vec_size];
 8007098:	f44f 7429 	mov.w	r4, #676	@ 0x2a4
 800709c:	fb01 f404 	mul.w	r4, r1, r4
  uint32_t vec_cols[N*vec_size];
 80070a0:	f04f 0a34 	mov.w	sl, #52	@ 0x34
  uint32_t vec_mat0[N*N*vec_size];
 80070a4:	1de3      	adds	r3, r4, #7
{
 80070a6:	b095      	sub	sp, #84	@ 0x54
 80070a8:	460d      	mov	r5, r1
  uint32_t vec_mat0[N*N*vec_size];
 80070aa:	f023 0307 	bic.w	r3, r3, #7
  uint32_t vec_cols[N*vec_size];
 80070ae:	fb0a f101 	mul.w	r1, sl, r1
{
 80070b2:	af02      	add	r7, sp, #8
  uint32_t vec_mat0[N*N*vec_size];
 80070b4:	ebad 0d03 	sub.w	sp, sp, r3
  uint32_t vec_cols[N*vec_size];
 80070b8:	1dcb      	adds	r3, r1, #7

  /* this will hold the return value */
  uint32_t vec_res[vec_size];
 80070ba:	ea4f 0885 	mov.w	r8, r5, lsl #2
  uint32_t vec_cols[N*vec_size];
 80070be:	f023 0307 	bic.w	r3, r3, #7
  uint32_t vec_mat0[N*N*vec_size];
 80070c2:	ae02      	add	r6, sp, #8
  uint32_t vec_cols[N*vec_size];
 80070c4:	ebad 0d03 	sub.w	sp, sp, r3
  uint32_t vec_res[vec_size];
 80070c8:	f108 0307 	add.w	r3, r8, #7
 80070cc:	f023 0307 	bic.w	r3, r3, #7
{
 80070d0:	4693      	mov	fp, r2
  uint32_t vec_cols[N*vec_size];
 80070d2:	aa02      	add	r2, sp, #8
  uint32_t vec_res[vec_size];
 80070d4:	ebad 0d03 	sub.w	sp, sp, r3
 80070d8:	f10d 030b 	add.w	r3, sp, #11
  uint32_t vec_cols[N*vec_size];
 80070dc:	61fa      	str	r2, [r7, #28]
  uint32_t vec_res[vec_size];
 80070de:	f023 0203 	bic.w	r2, r3, #3
{
 80070e2:	4682      	mov	sl, r0
  uint32_t vec_res[vec_size];
 80070e4:	089b      	lsrs	r3, r3, #2
{
 80070e6:	61b8      	str	r0, [r7, #24]
  uint32_t vec_cols[N*vec_size];
 80070e8:	6239      	str	r1, [r7, #32]
  uint32_t vec_res[vec_size];
 80070ea:	4610      	mov	r0, r2
 80070ec:	60fa      	str	r2, [r7, #12]

  int i,j, r;

  memset(vec_res, 1, sizeof(uint32_t) * vec_size);
 80070ee:	2101      	movs	r1, #1
 80070f0:	4642      	mov	r2, r8
  uint32_t vec_res[vec_size];
 80070f2:	60bb      	str	r3, [r7, #8]
  uint32_t vec_mat0[N*N*vec_size];
 80070f4:	617e      	str	r6, [r7, #20]
  memset(vec_res, 1, sizeof(uint32_t) * vec_size);
 80070f6:	f005 f9bf 	bl	800c478 <memset>

  /* copy */
  memcpy(vec_mat0, mat_to_transform, sizeof(uint32_t) * N*N*vec_size);
 80070fa:	4622      	mov	r2, r4
 80070fc:	4651      	mov	r1, sl
 80070fe:	4630      	mov	r0, r6
 8007100:	f005 fa45 	bl	800c58e <memcpy>
 8007104:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8007108:	4653      	mov	r3, sl
 800710a:	240d      	movs	r4, #13

  /* transposition/copy operation */
  for(i=0;i<N;i++)
    memcpy(mat_to_transform+i*vec_size, vec_mat0+i*N*vec_size, sizeof(uint32_t) * vec_size);
 800710c:	4631      	mov	r1, r6
 800710e:	4618      	mov	r0, r3
 8007110:	4642      	mov	r2, r8
 8007112:	f005 fa3c 	bl	800c58e <memcpy>
  for(i=0;i<N;i++)
 8007116:	3c01      	subs	r4, #1
    memcpy(mat_to_transform+i*vec_size, vec_mat0+i*N*vec_size, sizeof(uint32_t) * vec_size);
 8007118:	4603      	mov	r3, r0
  for(i=0;i<N;i++)
 800711a:	4443      	add	r3, r8
 800711c:	444e      	add	r6, r9
 800711e:	d1f5      	bne.n	800710c <columnsDecomposition+0x78>
  /* pure copy operation */
  memcpy(vec_cols, mat_to_transform, sizeof(uint32_t) * N * vec_size);
 8007120:	e9d7 1406 	ldrd	r1, r4, [r7, #24]
 8007124:	6a3a      	ldr	r2, [r7, #32]
 8007126:	4620      	mov	r0, r4
 8007128:	f005 fa31 	bl	800c58e <memcpy>
  /* verification operation */
  for(r=0; r<K; r++)
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	1f21      	subs	r1, r4, #4
 8007130:	1f13      	subs	r3, r2, #4
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007136:	4608      	mov	r0, r1
 8007138:	4614      	mov	r4, r2
 800713a:	f102 0954 	add.w	r9, r2, #84	@ 0x54
    vec_res[r] &= !(vec_cols[r]==0||vec_cols[r]==PRIME);
 800713e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007142:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8007146:	1d51      	adds	r1, r2, #5
 8007148:	bf18      	it	ne
 800714a:	2101      	movne	r1, #1
 800714c:	4031      	ands	r1, r6
 800714e:	2a00      	cmp	r2, #0
 8007150:	f000 80e9 	beq.w	8007326 <columnsDecomposition+0x292>
  for(r=0; r<K; r++)
 8007154:	454b      	cmp	r3, r9
    vec_res[r] &= !(vec_cols[r]==0||vec_cols[r]==PRIME);
 8007156:	6019      	str	r1, [r3, #0]
  for(r=0; r<K; r++)
 8007158:	d1f1      	bne.n	800713e <columnsDecomposition+0xaa>
  memcpy(vec_cols, mat_to_transform, sizeof(uint32_t) * N * vec_size);
 800715a:	f04f 0e00 	mov.w	lr, #0
 800715e:	e9c7 e50a 	strd	lr, r5, [r7, #40]	@ 0x28
 8007162:	e9c7 b400 	strd	fp, r4, [r7]
 8007166:	f8c7 e034 	str.w	lr, [r7, #52]	@ 0x34
        col[(i)*vec_size+r]=reductionModuloP(multiplicationModuloP((PRIME-col[(j)*vec_size+r]),col[(i)*vec_size+r]));
 800716a:	f06f 0604 	mvn.w	r6, #4
 800716e:	f8c7 e024 	str.w	lr, [r7, #36]	@ 0x24
 8007172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  for(r=0; r<vec_size; r++)
 8007174:	2d00      	cmp	r5, #0
 8007176:	461a      	mov	r2, r3
 8007178:	f103 0301 	add.w	r3, r3, #1
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
 800717e:	dd0f      	ble.n	80071a0 <columnsDecomposition+0x10c>
 8007180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007184:	2400      	movs	r4, #0
 8007186:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 800718a:	4693      	mov	fp, r2
    col[(j)*vec_size+r]=inversionModuloP(col[(j)*vec_size+r]);
 800718c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8007190:	f7fd fbb2 	bl	80048f8 <inversionModuloP>
  for(r=0; r<vec_size; r++)
 8007194:	3401      	adds	r4, #1
 8007196:	42a5      	cmp	r5, r4
    col[(j)*vec_size+r]=inversionModuloP(col[(j)*vec_size+r]);
 8007198:	f8ca 0000 	str.w	r0, [sl]
  for(r=0; r<vec_size; r++)
 800719c:	d1f6      	bne.n	800718c <columnsDecomposition+0xf8>
 800719e:	465a      	mov	r2, fp
  for(i=0;i<N;i++)
 80071a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a4:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
  for(r=0; r<vec_size; r++)
 80071a8:	f04f 0a00 	mov.w	sl, #0
 80071ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80071b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071b2:	4649      	mov	r1, r9
  for(i=0;i<N;i++)
 80071b4:	46d3      	mov	fp, sl
 80071b6:	46d1      	mov	r9, sl
 80071b8:	46a8      	mov	r8, r5
    if (i!=j)
 80071ba:	455a      	cmp	r2, fp
 80071bc:	d024      	beq.n	8007208 <columnsDecomposition+0x174>
      for(r=0; r<vec_size; r++)
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	dd19      	ble.n	80071f8 <columnsDecomposition+0x164>
 80071c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c6:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 80071c8:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 80071cc:	e9c7 9210 	strd	r9, r2, [r7, #64]	@ 0x40
 80071d0:	2400      	movs	r4, #0
 80071d2:	46a9      	mov	r9, r5
 80071d4:	4655      	mov	r5, sl
 80071d6:	468a      	mov	sl, r1
        col[(i)*vec_size+r]=reductionModuloP(multiplicationModuloP((PRIME-col[(j)*vec_size+r]),col[(i)*vec_size+r]));
 80071d8:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80071dc:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80071e0:	1a30      	subs	r0, r6, r0
 80071e2:	f7fd fb55 	bl	8004890 <multiplicationModuloP>
 80071e6:	f7fd fb67 	bl	80048b8 <reductionModuloP>
      for(r=0; r<vec_size; r++)
 80071ea:	3401      	adds	r4, #1
 80071ec:	45a0      	cmp	r8, r4
        col[(i)*vec_size+r]=reductionModuloP(multiplicationModuloP((PRIME-col[(j)*vec_size+r]),col[(i)*vec_size+r]));
 80071ee:	6028      	str	r0, [r5, #0]
      for(r=0; r<vec_size; r++)
 80071f0:	d1f2      	bne.n	80071d8 <columnsDecomposition+0x144>
 80071f2:	e9d7 9210 	ldrd	r9, r2, [r7, #64]	@ 0x40
 80071f6:	4651      	mov	r1, sl
  for(i=0;i<N;i++)
 80071f8:	f10b 0b01 	add.w	fp, fp, #1
 80071fc:	f1bb 0f0d 	cmp.w	fp, #13
 8007200:	d006      	beq.n	8007210 <columnsDecomposition+0x17c>
    if (i!=j)
 8007202:	455a      	cmp	r2, fp
  for(i=0;i<N;i++)
 8007204:	44c1      	add	r9, r8
    if (i!=j)
 8007206:	d1da      	bne.n	80071be <columnsDecomposition+0x12a>
  for(i=0;i<N;i++)
 8007208:	44c1      	add	r9, r8
 800720a:	f102 0b01 	add.w	fp, r2, #1
 800720e:	e7d4      	b.n	80071ba <columnsDecomposition+0x126>

  for(j=1;j<N;j++)
  {
    /* actual operations */
    columnInv_32_vec(vec_cols, j-1, vec_size);
    columnMul_32_vec(vec_mat0, vec_cols, j-1, j, vec_size);
 8007210:	4645      	mov	r5, r8
 8007212:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
 8007216:	9500      	str	r5, [sp, #0]
 8007218:	697c      	ldr	r4, [r7, #20]
 800721a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721c:	4689      	mov	r9, r1
 800721e:	4620      	mov	r0, r4
 8007220:	69f9      	ldr	r1, [r7, #28]
 8007222:	f7ff fd5b 	bl	8006cdc <columnMul_32_vec>

    /* transposition/copy operation */
    for(i=0;i<N;i++)
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	69ba      	ldr	r2, [r7, #24]
    columnMul_32_vec(vec_mat0, vec_cols, j-1, j, vec_size);
 800722a:	f8c7 9038 	str.w	r9, [r7, #56]	@ 0x38
 800722e:	46da      	mov	sl, fp
 8007230:	2134      	movs	r1, #52	@ 0x34
 8007232:	fb01 2103 	mla	r1, r1, r3, r2
 8007236:	46d1      	mov	r9, sl
 8007238:	009a      	lsls	r2, r3, #2
 800723a:	46aa      	mov	sl, r5
 800723c:	6a3d      	ldr	r5, [r7, #32]
 800723e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007240:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
 8007244:	6439      	str	r1, [r7, #64]	@ 0x40
 8007246:	460c      	mov	r4, r1
      memcpy(mat_to_transform+(j*N+i)*vec_size, vec_mat0+(i*N+j)*vec_size, sizeof(uint32_t) * vec_size);
 8007248:	4659      	mov	r1, fp
 800724a:	4620      	mov	r0, r4
 800724c:	4642      	mov	r2, r8
 800724e:	f005 f99e 	bl	800c58e <memcpy>
    for(i=0;i<N;i++)
 8007252:	f1b9 0901 	subs.w	r9, r9, #1
 8007256:	44ab      	add	fp, r5
 8007258:	4444      	add	r4, r8
 800725a:	d1f5      	bne.n	8007248 <columnsDecomposition+0x1b4>
    /* pure copy operation */
    memcpy(vec_cols, mat_to_transform+j*N*vec_size, sizeof(uint32_t) * N * vec_size);
 800725c:	e9d7 0207 	ldrd	r0, r2, [r7, #28]
 8007260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007262:	4655      	mov	r5, sl
 8007264:	46ca      	mov	sl, r9
 8007266:	f8d7 9038 	ldr.w	r9, [r7, #56]	@ 0x38
 800726a:	f005 f990 	bl	800c58e <memcpy>
    /* verification operation */
    for(r=0; r<K; r++)
 800726e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007270:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007272:	4418      	add	r0, r3
    memcpy(vec_cols, mat_to_transform+j*N*vec_size, sizeof(uint32_t) * N * vec_size);
 8007274:	693b      	ldr	r3, [r7, #16]
      vec_res[r] &= !(vec_cols[(j)*vec_size+r]==0||vec_cols[(j)*vec_size+r]==PRIME);
 8007276:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800727a:	f853 4f04 	ldr.w	r4, [r3, #4]!
 800727e:	1d51      	adds	r1, r2, #5
 8007280:	bf18      	it	ne
 8007282:	2101      	movne	r1, #1
 8007284:	4021      	ands	r1, r4
 8007286:	2a00      	cmp	r2, #0
 8007288:	d049      	beq.n	800731e <columnsDecomposition+0x28a>
    for(r=0; r<K; r++)
 800728a:	454b      	cmp	r3, r9
      vec_res[r] &= !(vec_cols[(j)*vec_size+r]==0||vec_cols[(j)*vec_size+r]==PRIME);
 800728c:	6019      	str	r1, [r3, #0]
    for(r=0; r<K; r++)
 800728e:	d1f2      	bne.n	8007276 <columnsDecomposition+0x1e2>
  for(j=1;j<N;j++)
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	442b      	add	r3, r5
 8007294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	442b      	add	r3, r5
 800729a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	442b      	add	r3, r5
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	f47f af64 	bne.w	8007172 <columnsDecomposition+0xde>
  }

  i = 1; /* this will hold the return value */
  for(r=0; r<nb_mats; r++)
 80072aa:	e9d7 b400 	ldrd	fp, r4, [r7]
 80072ae:	f1bb 0f00 	cmp.w	fp, #0
 80072b2:	dd40      	ble.n	8007336 <columnsDecomposition+0x2a2>
 80072b4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d939      	bls.n	8007330 <columnsDecomposition+0x29c>
 80072bc:	f04f 31ff 	mov.w	r1, #4294967295
 80072c0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80072c4:	4608      	mov	r0, r1
    i &= vec_res[r];
 80072c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072ca:	f10a 0a01 	add.w	sl, sl, #1
 80072ce:	45aa      	cmp	sl, r5
 80072d0:	ea01 0102 	and.w	r1, r1, r2
 80072d4:	ea00 0003 	and.w	r0, r0, r3
  for(r=0; r<nb_mats; r++)
 80072d8:	f104 0408 	add.w	r4, r4, #8
 80072dc:	d1f3      	bne.n	80072c6 <columnsDecomposition+0x232>
 80072de:	4001      	ands	r1, r0
 80072e0:	f01b 0f01 	tst.w	fp, #1
 80072e4:	f001 0001 	and.w	r0, r1, #1
 80072e8:	d015      	beq.n	8007316 <columnsDecomposition+0x282>
 80072ea:	f02b 0201 	bic.w	r2, fp, #1
    i &= vec_res[r];
 80072ee:	0091      	lsls	r1, r2, #2
 80072f0:	68bc      	ldr	r4, [r7, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
  for(r=0; r<nb_mats; r++)
 80072f8:	1c51      	adds	r1, r2, #1
 80072fa:	458b      	cmp	fp, r1
 80072fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    i &= vec_res[r];
 8007300:	ea00 0004 	and.w	r0, r0, r4
  for(r=0; r<nb_mats; r++)
 8007304:	dd07      	ble.n	8007316 <columnsDecomposition+0x282>
    i &= vec_res[r];
 8007306:	6859      	ldr	r1, [r3, #4]
  for(r=0; r<nb_mats; r++)
 8007308:	3202      	adds	r2, #2
 800730a:	455a      	cmp	r2, fp
    i &= vec_res[r];
 800730c:	ea00 0001 	and.w	r0, r0, r1
  for(r=0; r<nb_mats; r++)
 8007310:	da01      	bge.n	8007316 <columnsDecomposition+0x282>
    i &= vec_res[r];
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	4018      	ands	r0, r3

  return i;

}
 8007316:	374c      	adds	r7, #76	@ 0x4c
 8007318:	46bd      	mov	sp, r7
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(r=0; r<K; r++)
 800731e:	454b      	cmp	r3, r9
      vec_res[r] &= !(vec_cols[(j)*vec_size+r]==0||vec_cols[(j)*vec_size+r]==PRIME);
 8007320:	601a      	str	r2, [r3, #0]
    for(r=0; r<K; r++)
 8007322:	d1a8      	bne.n	8007276 <columnsDecomposition+0x1e2>
 8007324:	e7b4      	b.n	8007290 <columnsDecomposition+0x1fc>
  for(r=0; r<K; r++)
 8007326:	454b      	cmp	r3, r9
    vec_res[r] &= !(vec_cols[r]==0||vec_cols[r]==PRIME);
 8007328:	601a      	str	r2, [r3, #0]
  for(r=0; r<K; r++)
 800732a:	f47f af08 	bne.w	800713e <columnsDecomposition+0xaa>
 800732e:	e714      	b.n	800715a <columnsDecomposition+0xc6>
  for(r=0; r<nb_mats; r++)
 8007330:	2200      	movs	r2, #0
  i = 1; /* this will hold the return value */
 8007332:	2001      	movs	r0, #1
 8007334:	e7db      	b.n	80072ee <columnsDecomposition+0x25a>
 8007336:	2001      	movs	r0, #1
}
 8007338:	374c      	adds	r7, #76	@ 0x4c
 800733a:	46bd      	mov	sp, r7
 800733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007340 <seedexpander>:
 */
int
seedexpander(AES_XOF_struct *ctx, uint8_t *x, size_t xlen) {
    size_t offset;

    if ( x == NULL ) {
 8007340:	2900      	cmp	r1, #0
 8007342:	d065      	beq.n	8007410 <seedexpander+0xd0>
seedexpander(AES_XOF_struct *ctx, uint8_t *x, size_t xlen) {
 8007344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return RNG_BAD_OUTBUF;
    }
    if ( xlen >= ctx->length_remaining ) {
 8007348:	6943      	ldr	r3, [r0, #20]
 800734a:	4293      	cmp	r3, r2
seedexpander(AES_XOF_struct *ctx, uint8_t *x, size_t xlen) {
 800734c:	b083      	sub	sp, #12
 800734e:	4604      	mov	r4, r0
 8007350:	4615      	mov	r5, r2
    if ( xlen >= ctx->length_remaining ) {
 8007352:	d95a      	bls.n	800740a <seedexpander+0xca>
        return RNG_BAD_REQ_LEN;
    }

    ctx->length_remaining -= xlen;
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	6143      	str	r3, [r0, #20]

    offset = 0;
    while ( xlen > 0 ) {
 8007358:	2a00      	cmp	r2, #0
 800735a:	d046      	beq.n	80073ea <seedexpander+0xaa>
 800735c:	460f      	mov	r7, r1
    offset = 0;
 800735e:	2600      	movs	r6, #0
        if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 8007360:	6901      	ldr	r1, [r0, #16]
        // take what's in the buffer
        memcpy(x + offset, ctx->buffer + ctx->buffer_pos, 16 - ctx->buffer_pos);
        xlen -= 16 - ctx->buffer_pos;
        offset += 16 - ctx->buffer_pos;

        AES256_ECB(ctx->key, ctx->ctr, ctx->buffer);
 8007362:	f100 0918 	add.w	r9, r0, #24
 8007366:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 800736a:	e031      	b.n	80073d0 <seedexpander+0x90>
        memcpy(x + offset, ctx->buffer + ctx->buffer_pos, 16 - ctx->buffer_pos);
 800736c:	f005 f90f 	bl	800c58e <memcpy>
        xlen -= 16 - ctx->buffer_pos;
 8007370:	6923      	ldr	r3, [r4, #16]
    aes256_ecb_keyexp(&ctx, key);
 8007372:	4649      	mov	r1, r9
        xlen -= 16 - ctx->buffer_pos;
 8007374:	f1a3 0210 	sub.w	r2, r3, #16
    aes256_ecb_keyexp(&ctx, key);
 8007378:	a801      	add	r0, sp, #4
        offset += 16 - ctx->buffer_pos;
 800737a:	f1c3 0310 	rsb	r3, r3, #16
        xlen -= 16 - ctx->buffer_pos;
 800737e:	4415      	add	r5, r2
        offset += 16 - ctx->buffer_pos;
 8007380:	441e      	add	r6, r3
    aes256_ecb_keyexp(&ctx, key);
 8007382:	f7fa fd03 	bl	8001d8c <aes256_ecb_keyexp>
    aes256_ecb(buffer, ctr, 1, &ctx);
 8007386:	ab01      	add	r3, sp, #4
 8007388:	2201      	movs	r2, #1
 800738a:	4641      	mov	r1, r8
 800738c:	4620      	mov	r0, r4
 800738e:	f7fa fe65 	bl	800205c <aes256_ecb>
    aes256_ctx_release(&ctx);
 8007392:	a801      	add	r0, sp, #4
 8007394:	f7fa febc 	bl	8002110 <aes256_ctx_release>
        ctx->buffer_pos = 0;

        //increment the counter
        for (size_t i = 15; i >= 12; i--) {
            if ( ctx->ctr[i] == 0xff ) {
 8007398:	f894 3047 	ldrb.w	r3, [r4, #71]	@ 0x47
        ctx->buffer_pos = 0;
 800739c:	2200      	movs	r2, #0
            if ( ctx->ctr[i] == 0xff ) {
 800739e:	2bff      	cmp	r3, #255	@ 0xff
        ctx->buffer_pos = 0;
 80073a0:	6122      	str	r2, [r4, #16]
            if ( ctx->ctr[i] == 0xff ) {
 80073a2:	d126      	bne.n	80073f2 <seedexpander+0xb2>
 80073a4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
                ctx->ctr[i] = 0x00;
 80073a8:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
            if ( ctx->ctr[i] == 0xff ) {
 80073ac:	2bff      	cmp	r3, #255	@ 0xff
 80073ae:	d126      	bne.n	80073fe <seedexpander+0xbe>
 80073b0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
                ctx->ctr[i] = 0x00;
 80073b4:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
            if ( ctx->ctr[i] == 0xff ) {
 80073b8:	2bff      	cmp	r3, #255	@ 0xff
 80073ba:	d122      	bne.n	8007402 <seedexpander+0xc2>
 80073bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
                ctx->ctr[i] = 0x00;
 80073c0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
            if ( ctx->ctr[i] == 0xff ) {
 80073c4:	2bff      	cmp	r3, #255	@ 0xff
 80073c6:	d11e      	bne.n	8007406 <seedexpander+0xc6>
                ctx->ctr[i] = 0x00;
 80073c8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
    while ( xlen > 0 ) {
 80073cc:	2100      	movs	r1, #0
 80073ce:	b165      	cbz	r5, 80073ea <seedexpander+0xaa>
        if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 80073d0:	f1c1 0210 	rsb	r2, r1, #16
 80073d4:	42aa      	cmp	r2, r5
            memcpy(x + offset, ctx->buffer + ctx->buffer_pos, xlen);
 80073d6:	eb07 0006 	add.w	r0, r7, r6
 80073da:	4421      	add	r1, r4
        if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 80073dc:	d3c6      	bcc.n	800736c <seedexpander+0x2c>
            memcpy(x + offset, ctx->buffer + ctx->buffer_pos, xlen);
 80073de:	462a      	mov	r2, r5
 80073e0:	f005 f8d5 	bl	800c58e <memcpy>
            ctx->buffer_pos += xlen;
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	442b      	add	r3, r5
 80073e8:	6123      	str	r3, [r4, #16]
            return RNG_SUCCESS;
 80073ea:	2000      	movs	r0, #0
        }

    }

    return RNG_SUCCESS;
}
 80073ec:	b003      	add	sp, #12
 80073ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (size_t i = 15; i >= 12; i--) {
 80073f2:	220f      	movs	r2, #15
                ctx->ctr[i]++;
 80073f4:	4422      	add	r2, r4
 80073f6:	3301      	adds	r3, #1
 80073f8:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
                break;
 80073fc:	e7e6      	b.n	80073cc <seedexpander+0x8c>
        for (size_t i = 15; i >= 12; i--) {
 80073fe:	220e      	movs	r2, #14
 8007400:	e7f8      	b.n	80073f4 <seedexpander+0xb4>
 8007402:	220d      	movs	r2, #13
 8007404:	e7f6      	b.n	80073f4 <seedexpander+0xb4>
 8007406:	220c      	movs	r2, #12
 8007408:	e7f4      	b.n	80073f4 <seedexpander+0xb4>
        return RNG_BAD_REQ_LEN;
 800740a:	f06f 0002 	mvn.w	r0, #2
 800740e:	e7ed      	b.n	80073ec <seedexpander+0xac>
        return RNG_BAD_OUTBUF;
 8007410:	f06f 0001 	mvn.w	r0, #1
}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop

08007418 <seedexpander_init_customized>:
int
seedexpander_init_customized(AES_XOF_struct *ctx,
                  uint8_t *seed,
                  uint8_t *diversifier,
                  size_t maxlen)
{
 8007418:	b510      	push	{r4, lr}
 800741a:	4684      	mov	ip, r0
    if ( maxlen >= 0x100000000 )
        return RNG_BAD_MAXLEN;

    ctx->length_remaining = maxlen;
 800741c:	6143      	str	r3, [r0, #20]

    memcpy(ctx->key, seed, 32);
 800741e:	f8d1 e000 	ldr.w	lr, [r1]
 8007422:	6848      	ldr	r0, [r1, #4]
 8007424:	688b      	ldr	r3, [r1, #8]
 8007426:	68cc      	ldr	r4, [r1, #12]
 8007428:	f8cc 4024 	str.w	r4, [ip, #36]	@ 0x24
 800742c:	f8cc e018 	str.w	lr, [ip, #24]
 8007430:	f8cc 001c 	str.w	r0, [ip, #28]
 8007434:	f8cc 3020 	str.w	r3, [ip, #32]
 8007438:	6948      	ldr	r0, [r1, #20]
 800743a:	698b      	ldr	r3, [r1, #24]
 800743c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8007440:	69cc      	ldr	r4, [r1, #28]
 8007442:	f8cc 4034 	str.w	r4, [ip, #52]	@ 0x34
 8007446:	f8cc 002c 	str.w	r0, [ip, #44]	@ 0x2c
 800744a:	f8cc e028 	str.w	lr, [ip, #40]	@ 0x28
 800744e:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30

    memcpy(ctx->ctr, diversifier, 8);
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	6851      	ldr	r1, [r2, #4]
 8007456:	f8cc 103c 	str.w	r1, [ip, #60]	@ 0x3c
 800745a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    memcpy(ctx->ctr+8, diversifier, 8);
 800745e:	6811      	ldr	r1, [r2, #0]
 8007460:	6852      	ldr	r2, [r2, #4]
 8007462:	f8cc 2044 	str.w	r2, [ip, #68]	@ 0x44

    ctx->buffer_pos = 16;
    memset(ctx->buffer, 0x00, 16);
 8007466:	2000      	movs	r0, #0
    ctx->buffer_pos = 16;
 8007468:	2310      	movs	r3, #16
    memcpy(ctx->ctr+8, diversifier, 8);
 800746a:	f8cc 1040 	str.w	r1, [ip, #64]	@ 0x40
    memset(ctx->buffer, 0x00, 16);
 800746e:	f8cc 0000 	str.w	r0, [ip]
 8007472:	f8cc 0004 	str.w	r0, [ip, #4]
 8007476:	f8cc 0008 	str.w	r0, [ip, #8]
 800747a:	f8cc 000c 	str.w	r0, [ip, #12]
    ctx->buffer_pos = 16;
 800747e:	f8cc 3010 	str.w	r3, [ip, #16]

    return RNG_SUCCESS;
 8007482:	bd10      	pop	{r4, pc}

08007484 <surf>:

#define ROTATE(x, b) (((x) << (b)) | ((x) >> (32 - (b))))
#define MUSH(i, b) x = t[i] += (((x ^ seed[i]) + sum) ^ ROTATE(x, b));

static void surf(uint32_t out[8])
{
 8007484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t r;
  int32_t i;
  int32_t loop;

  for (i = 0; i < 12; ++i) {
    t[i] = in[i] ^ seed[12 + i];
 8007488:	4b6d      	ldr	r3, [pc, #436]	@ (8007640 <surf+0x1bc>)
{
 800748a:	b091      	sub	sp, #68	@ 0x44
    t[i] = in[i] ^ seed[12 + i];
 800748c:	689a      	ldr	r2, [r3, #8]
{
 800748e:	900d      	str	r0, [sp, #52]	@ 0x34
 8007490:	4606      	mov	r6, r0
    t[i] = in[i] ^ seed[12 + i];
 8007492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007496:	f082 0b09 	eor.w	fp, r2, #9
  }
  for (i = 0; i < 8; ++i) {
    out[i] = seed[24 + i];
 800749a:	4a6a      	ldr	r2, [pc, #424]	@ (8007644 <surf+0x1c0>)
    t[i] = in[i] ^ seed[12 + i];
 800749c:	699f      	ldr	r7, [r3, #24]
 800749e:	f081 0507 	eor.w	r5, r1, #7
    out[i] = seed[24 + i];
 80074a2:	4611      	mov	r1, r2
 80074a4:	4632      	mov	r2, r6
 80074a6:	3204      	adds	r2, #4
 80074a8:	920e      	str	r2, [sp, #56]	@ 0x38
    t[i] = in[i] ^ seed[12 + i];
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	69de      	ldr	r6, [r3, #28]
 80074ae:	950b      	str	r5, [sp, #44]	@ 0x2c
 80074b0:	f080 0409 	eor.w	r4, r0, #9
 80074b4:	940a      	str	r4, [sp, #40]	@ 0x28
 80074b6:	f082 0902 	eor.w	r9, r2, #2
 80074ba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80074bc:	695a      	ldr	r2, [r3, #20]
 80074be:	6a1d      	ldr	r5, [r3, #32]
 80074c0:	f082 0803 	eor.w	r8, r2, #3
 80074c4:	f084 0202 	eor.w	r2, r4, #2
 80074c8:	920c      	str	r2, [sp, #48]	@ 0x30
 80074ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074cc:	f082 0e06 	eor.w	lr, r2, #6
 80074d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f082 0c04 	eor.w	ip, r2, #4
    out[i] = seed[24 + i];
 80074d8:	4a5b      	ldr	r2, [pc, #364]	@ (8007648 <surf+0x1c4>)
 80074da:	9201      	str	r2, [sp, #4]
 80074dc:	2205      	movs	r2, #5
 80074de:	9204      	str	r2, [sp, #16]
 80074e0:	2209      	movs	r2, #9
 80074e2:	9207      	str	r2, [sp, #28]
 80074e4:	2207      	movs	r2, #7
 80074e6:	9205      	str	r2, [sp, #20]
 80074e8:	2002      	movs	r0, #2
 80074ea:	2208      	movs	r2, #8
    t[i] = in[i] ^ seed[12 + i];
 80074ec:	f083 0a03 	eor.w	sl, r3, #3
    out[i] = seed[24 + i];
 80074f0:	460c      	mov	r4, r1
 80074f2:	2303      	movs	r3, #3
 80074f4:	e9cd 0208 	strd	r0, r2, [sp, #32]
 80074f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074fc:	9306      	str	r3, [sp, #24]
 80074fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007500:	940f      	str	r4, [sp, #60]	@ 0x3c
 8007502:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8007504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007506:	4623      	mov	r3, r4
 8007508:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800750a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800750e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
  x = t[11];
  for (loop = 0; loop < 2; ++loop) {
 8007512:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	@ 0x28
 8007516:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    t[i] = in[i] ^ seed[12 + i];
 8007518:	f087 0708 	eor.w	r7, r7, #8
 800751c:	f086 0604 	eor.w	r6, r6, #4
 8007520:	f085 0506 	eor.w	r5, r5, #6
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	f103 53e4 	add.w	r3, r3, #478150656	@ 0x1c800000
 800752a:	f503 2306 	add.w	r3, r3, #548864	@ 0x86000
 800752e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
    for (r = 0; r < 16; ++r) {
      sum += 0x9e3779b9;
 8007532:	f1a3 43c3 	sub.w	r3, r3, #1635778560	@ 0x61800000
 8007536:	f5a3 0391 	sub.w	r3, r3, #4751360	@ 0x488000
 800753a:	f2a3 6347 	subw	r3, r3, #1607	@ 0x647
      MUSH(0, 5)
 800753e:	f08c 0203 	eor.w	r2, ip, #3
 8007542:	441a      	add	r2, r3
 8007544:	ea82 62fc 	eor.w	r2, r2, ip, ror #27
 8007548:	4411      	add	r1, r2
      MUSH(1, 7)
 800754a:	f081 0201 	eor.w	r2, r1, #1
 800754e:	441a      	add	r2, r3
 8007550:	ea82 6271 	eor.w	r2, r2, r1, ror #25
 8007554:	4410      	add	r0, r2
      MUSH(2, 9)
 8007556:	f080 0204 	eor.w	r2, r0, #4
 800755a:	441a      	add	r2, r3
 800755c:	ea82 52f0 	eor.w	r2, r2, r0, ror #23
 8007560:	4493      	add	fp, r2
      MUSH(3, 13)
 8007562:	f08b 0201 	eor.w	r2, fp, #1
 8007566:	441a      	add	r2, r3
 8007568:	ea82 42fb 	eor.w	r2, r2, fp, ror #19
 800756c:	4492      	add	sl, r2
      MUSH(4, 5)
 800756e:	f08a 0205 	eor.w	r2, sl, #5
 8007572:	441a      	add	r2, r3
 8007574:	ea82 62fa 	eor.w	r2, r2, sl, ror #27
 8007578:	4491      	add	r9, r2
      MUSH(5, 7)
 800757a:	f089 0209 	eor.w	r2, r9, #9
 800757e:	441a      	add	r2, r3
 8007580:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 8007584:	4490      	add	r8, r2
      MUSH(6, 9)
 8007586:	f088 0202 	eor.w	r2, r8, #2
 800758a:	441a      	add	r2, r3
 800758c:	ea82 52f8 	eor.w	r2, r2, r8, ror #23
 8007590:	4417      	add	r7, r2
      MUSH(7, 13)
 8007592:	f087 0206 	eor.w	r2, r7, #6
 8007596:	441a      	add	r2, r3
 8007598:	ea82 42f7 	eor.w	r2, r2, r7, ror #19
 800759c:	4416      	add	r6, r2
      MUSH(8, 5)
 800759e:	f086 0205 	eor.w	r2, r6, #5
 80075a2:	441a      	add	r2, r3
 80075a4:	ea82 62f6 	eor.w	r2, r2, r6, ror #27
 80075a8:	4415      	add	r5, r2
      MUSH(9, 7)
 80075aa:	f085 0203 	eor.w	r2, r5, #3
 80075ae:	441a      	add	r2, r3
 80075b0:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 80075b4:	4414      	add	r4, r2
      MUSH(10, 9)
 80075b6:	f084 0205 	eor.w	r2, r4, #5
 80075ba:	441a      	add	r2, r3
 80075bc:	ea82 52f4 	eor.w	r2, r2, r4, ror #23
 80075c0:	4496      	add	lr, r2
      MUSH(11, 13)
 80075c2:	f08e 0208 	eor.w	r2, lr, #8
 80075c6:	441a      	add	r2, r3
 80075c8:	ea82 42fe 	eor.w	r2, r2, lr, ror #19
 80075cc:	4494      	add	ip, r2
    for (r = 0; r < 16; ++r) {
 80075ce:	9a01      	ldr	r2, [sp, #4]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d1ae      	bne.n	8007532 <surf+0xae>
    }
    for (i = 0; i < 8; ++i) {
      out[i] ^= t[i + 4];
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	ea83 0309 	eor.w	r3, r3, r9
 80075da:	9302      	str	r3, [sp, #8]
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	ea83 0308 	eor.w	r3, r3, r8
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e6:	407b      	eors	r3, r7
 80075e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	4073      	eors	r3, r6
 80075ee:	9306      	str	r3, [sp, #24]
 80075f0:	9b08      	ldr	r3, [sp, #32]
 80075f2:	406b      	eors	r3, r5
 80075f4:	9308      	str	r3, [sp, #32]
 80075f6:	9b05      	ldr	r3, [sp, #20]
 80075f8:	4063      	eors	r3, r4
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	ea83 030e 	eor.w	r3, r3, lr
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	ea83 030c 	eor.w	r3, r3, ip
 800760a:	9304      	str	r3, [sp, #16]
  for (loop = 0; loop < 2; ++loop) {
 800760c:	4613      	mov	r3, r2
 800760e:	4a0f      	ldr	r2, [pc, #60]	@ (800764c <surf+0x1c8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d001      	beq.n	8007618 <surf+0x194>
 8007614:	9201      	str	r2, [sp, #4]
 8007616:	e785      	b.n	8007524 <surf+0xa0>
 8007618:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800761a:	9a02      	ldr	r2, [sp, #8]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	9a03      	ldr	r2, [sp, #12]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007624:	609a      	str	r2, [r3, #8]
 8007626:	9a06      	ldr	r2, [sp, #24]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	9a08      	ldr	r2, [sp, #32]
 800762c:	611a      	str	r2, [r3, #16]
 800762e:	9a05      	ldr	r2, [sp, #20]
 8007630:	615a      	str	r2, [r3, #20]
 8007632:	9a07      	ldr	r2, [sp, #28]
 8007634:	619a      	str	r2, [r3, #24]
 8007636:	9a04      	ldr	r2, [sp, #16]
 8007638:	61da      	str	r2, [r3, #28]
    }
  }
}
 800763a:	b011      	add	sp, #68	@ 0x44
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	20000af0 	.word	0x20000af0
 8007644:	0800cff4 	.word	0x0800cff4
 8007648:	e3779b90 	.word	0xe3779b90
 800764c:	c6ef3720 	.word	0xc6ef3720

08007650 <randombytes_regen>:

void randombytes_regen(void);
void randombytes_regen(void)
{
 8007650:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t out[8];
  if (!++in[0]) {
 8007652:	4d29      	ldr	r5, [pc, #164]	@ (80076f8 <randombytes_regen+0xa8>)
 8007654:	682f      	ldr	r7, [r5, #0]
 8007656:	1c7a      	adds	r2, r7, #1
{
 8007658:	b089      	sub	sp, #36	@ 0x24
  if (!++in[0]) {
 800765a:	602a      	str	r2, [r5, #0]
 800765c:	bb22      	cbnz	r2, 80076a8 <randombytes_regen+0x58>
    if (!++in[1]) {
 800765e:	686b      	ldr	r3, [r5, #4]
 8007660:	3301      	adds	r3, #1
 8007662:	606b      	str	r3, [r5, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03e      	beq.n	80076e6 <randombytes_regen+0x96>
      if (!++in[2]) {
        ++in[3];
      }
    }
  }
  surf(out);
 8007668:	466c      	mov	r4, sp
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff ff0a 	bl	8007484 <surf>
  memcpy(out_buf, out, sizeof(out));
  if (!++in[0]) {
 8007670:	2301      	movs	r3, #1
  memcpy(out_buf, out, sizeof(out));
 8007672:	46a4      	mov	ip, r4
  if (!++in[0]) {
 8007674:	602b      	str	r3, [r5, #0]
  memcpy(out_buf, out, sizeof(out));
 8007676:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800767a:	4e20      	ldr	r6, [pc, #128]	@ (80076fc <randombytes_regen+0xac>)
 800767c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800767e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007682:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      if (!++in[2]) {
        ++in[3];
      }
    }
  }
  surf(out);
 8007686:	4620      	mov	r0, r4
 8007688:	f7ff fefc 	bl	8007484 <surf>
  memcpy(out_buf + sizeof(out), out, sizeof(out));
  outleft = sizeof(out_buf);
 800768c:	4b1c      	ldr	r3, [pc, #112]	@ (8007700 <randombytes_regen+0xb0>)
  memcpy(out_buf + sizeof(out), out, sizeof(out));
 800768e:	46a4      	mov	ip, r4
  outleft = sizeof(out_buf);
 8007690:	2240      	movs	r2, #64	@ 0x40
 8007692:	601a      	str	r2, [r3, #0]
  memcpy(out_buf + sizeof(out), out, sizeof(out));
 8007694:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007698:	4c1a      	ldr	r4, [pc, #104]	@ (8007704 <randombytes_regen+0xb4>)
 800769a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800769c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80076a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80076a4:	b009      	add	sp, #36	@ 0x24
 80076a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  surf(out);
 80076a8:	466c      	mov	r4, sp
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7ff feea 	bl	8007484 <surf>
  memcpy(out_buf, out, sizeof(out));
 80076b0:	46a4      	mov	ip, r4
 80076b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80076b6:	4e11      	ldr	r6, [pc, #68]	@ (80076fc <randombytes_regen+0xac>)
 80076b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80076ba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
  if (!++in[0]) {
 80076be:	3702      	adds	r7, #2
  memcpy(out_buf, out, sizeof(out));
 80076c0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  if (!++in[0]) {
 80076c4:	602f      	str	r7, [r5, #0]
 80076c6:	2f00      	cmp	r7, #0
 80076c8:	d1dd      	bne.n	8007686 <randombytes_regen+0x36>
    if (!++in[1]) {
 80076ca:	686b      	ldr	r3, [r5, #4]
 80076cc:	3301      	adds	r3, #1
 80076ce:	606b      	str	r3, [r5, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1d8      	bne.n	8007686 <randombytes_regen+0x36>
      if (!++in[2]) {
 80076d4:	68ab      	ldr	r3, [r5, #8]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60ab      	str	r3, [r5, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1d3      	bne.n	8007686 <randombytes_regen+0x36>
        ++in[3];
 80076de:	68eb      	ldr	r3, [r5, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60eb      	str	r3, [r5, #12]
 80076e4:	e7cf      	b.n	8007686 <randombytes_regen+0x36>
      if (!++in[2]) {
 80076e6:	68ab      	ldr	r3, [r5, #8]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60ab      	str	r3, [r5, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1bb      	bne.n	8007668 <randombytes_regen+0x18>
        ++in[3];
 80076f0:	68eb      	ldr	r3, [r5, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60eb      	str	r3, [r5, #12]
 80076f6:	e7b7      	b.n	8007668 <randombytes_regen+0x18>
 80076f8:	20000af0 	.word	0x20000af0
 80076fc:	20000ab0 	.word	0x20000ab0
 8007700:	20000aac 	.word	0x20000aac
 8007704:	20000ad0 	.word	0x20000ad0

08007708 <PQCLEAN_randombytes>:

void randombytes(uint8_t* buf, size_t xlen)
{
  while (xlen > 0) {
 8007708:	b191      	cbz	r1, 8007730 <PQCLEAN_randombytes+0x28>
{
 800770a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!outleft) {
 800770c:	4e09      	ldr	r6, [pc, #36]	@ (8007734 <PQCLEAN_randombytes+0x2c>)
 800770e:	4f0a      	ldr	r7, [pc, #40]	@ (8007738 <PQCLEAN_randombytes+0x30>)
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	4604      	mov	r4, r0
 8007714:	1845      	adds	r5, r0, r1
 8007716:	b13b      	cbz	r3, 8007728 <PQCLEAN_randombytes+0x20>
      randombytes_regen();
    }
    *buf = out_buf[--outleft];
 8007718:	3b01      	subs	r3, #1
 800771a:	6033      	str	r3, [r6, #0]
 800771c:	5cfa      	ldrb	r2, [r7, r3]
 800771e:	f804 2b01 	strb.w	r2, [r4], #1
  while (xlen > 0) {
 8007722:	42ac      	cmp	r4, r5
 8007724:	d1f7      	bne.n	8007716 <PQCLEAN_randombytes+0xe>
  return;

	/*for (int i = 0; i < xlen; i++) {
		buf[i] = i;
	}*/
}
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      randombytes_regen();
 8007728:	f7ff ff92 	bl	8007650 <randombytes_regen>
    *buf = out_buf[--outleft];
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	e7f3      	b.n	8007718 <PQCLEAN_randombytes+0x10>
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20000aac 	.word	0x20000aac
 8007738:	20000ab0 	.word	0x20000ab0

0800773c <crypto_sign_keypair>:
#include "matrix.h"
#include "atf.h"
#include "vec_sizes.h"

int crypto_sign_keypair(uint8_t  *pk, uint8_t  *sk)
{
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	f5ad 5d67 	sub.w	sp, sp, #14784	@ 0x39c0
 8007744:	b08a      	sub	sp, #40	@ 0x28
 8007746:	460c      	mov	r4, r1

  uint8_t  seeds[((MAT_SK_SEED_SIZE * C) + PK_SEED_SIZE)];
  uint32_t atfC[LEN * NB32_VEC_C];
  uint32_t cols[N*N * NB32_VEC_C];

  memset(pk, 0x00, CRYPTO_PUBLICKEYBYTES);
 8007748:	f641 7268 	movw	r2, #8040	@ 0x1f68
 800774c:	2100      	movs	r1, #0
{
 800774e:	4682      	mov	sl, r0
  memset(pk, 0x00, CRYPTO_PUBLICKEYBYTES);
 8007750:	f004 fe92 	bl	800c478 <memset>
  memset(sk, 0x00, CRYPTO_SECRETKEYBYTES);
 8007754:	2220      	movs	r2, #32
 8007756:	2100      	movs	r1, #0
 8007758:	4620      	mov	r0, r4
 800775a:	f004 fe8d 	bl	800c478 <memset>

  randomSeed(sk, SK_SEED_SIZE);
 800775e:	4620      	mov	r0, r4
 8007760:	2120      	movs	r1, #32
 8007762:	f7fc fed5 	bl	8004510 <randomSeed>

  /* Expanding Secret Key */
  /* Because MAT_SK_SEED_SIZE and PK_SEED_SIZE might differ, I prefer to consider one single large expansion */
  expandSeeds(seeds, sk, 1, SK_SEED_SIZE, ((MAT_SK_SEED_SIZE * C) + PK_SEED_SIZE));
 8007766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4621      	mov	r1, r4
 800776e:	2320      	movs	r3, #32
 8007770:	2201      	movs	r2, #1
 8007772:	a802      	add	r0, sp, #8
 8007774:	f7fc fece 	bl	8004514 <expandSeeds>

  /* Generating N Columns Matrices such that acting on ATF_i with columns matrices i return atf_C */
  for (r = 0; r < C; r++)
 8007778:	f50d 5725 	add.w	r7, sp, #10560	@ 0x2940
  expandSeeds(seeds, sk, 1, SK_SEED_SIZE, ((MAT_SK_SEED_SIZE * C) + PK_SEED_SIZE));
 800777c:	f50d 54b1 	add.w	r4, sp, #5664	@ 0x1620
 8007780:	ad02      	add	r5, sp, #8
 8007782:	3728      	adds	r7, #40	@ 0x28
 8007784:	3408      	adds	r4, #8
      expandColumns(atfC + r * NB32_VEC_NN, seeds + r * MAT_SK_SEED_SIZE, MAT_SK_SEED_SIZE);
 8007786:	4629      	mov	r1, r5
 8007788:	4620      	mov	r0, r4
 800778a:	2220      	movs	r2, #32
  for (r = 0; r < C; r++)
 800778c:	f504 7430 	add.w	r4, r4, #704	@ 0x2c0
      expandColumns(atfC + r * NB32_VEC_NN, seeds + r * MAT_SK_SEED_SIZE, MAT_SK_SEED_SIZE);
 8007790:	f7fd f836 	bl	8004800 <expandColumns>
  for (r = 0; r < C; r++)
 8007794:	42a7      	cmp	r7, r4
 8007796:	f105 0520 	add.w	r5, r5, #32
 800779a:	d1f4      	bne.n	8007786 <crypto_sign_keypair+0x4a>
 800779c:	f50d 53b1 	add.w	r3, sp, #5664	@ 0x1620
 80077a0:	3308      	adds	r3, #8
 80077a2:	f50d 50b1 	add.w	r0, sp, #5664	@ 0x1620
 80077a6:	f503 5183 	add.w	r1, r3, #4192	@ 0x1060
 80077aa:	3008      	adds	r0, #8
 80077ac:	1f1a      	subs	r2, r3, #4
 80077ae:	311c      	adds	r1, #28
 80077b0:	ab42      	add	r3, sp, #264	@ 0x108
 80077b2:	f500 7928 	add.w	r9, r0, #672	@ 0x2a0
    for(i=0;i<N*N;i++)
      for(r=0; r<NB32_VEC_C; r++)
        cols[i*NB32_VEC_C + r]=atfC[r*NB32_VEC_NN+i];
 80077b6:	f852 8f04 	ldr.w	r8, [r2, #4]!
 80077ba:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80077be:	f8d2 e2c0 	ldr.w	lr, [r2, #704]	@ 0x2c0
 80077c2:	f8d2 6580 	ldr.w	r6, [r2, #1408]	@ 0x580
 80077c6:	f8d2 7840 	ldr.w	r7, [r2, #2112]	@ 0x840
 80077ca:	f8d2 5b00 	ldr.w	r5, [r2, #2816]	@ 0xb00
 80077ce:	f8d2 4dc0 	ldr.w	r4, [r2, #3520]	@ 0xdc0
 80077d2:	f8d1 02c0 	ldr.w	r0, [r1, #704]	@ 0x2c0
 80077d6:	61d8      	str	r0, [r3, #28]
    for(i=0;i<N*N;i++)
 80077d8:	3320      	adds	r3, #32
 80077da:	454a      	cmp	r2, r9
        cols[i*NB32_VEC_C + r]=atfC[r*NB32_VEC_NN+i];
 80077dc:	e943 8e08 	strd	r8, lr, [r3, #-32]
 80077e0:	e943 6706 	strd	r6, r7, [r3, #-24]
 80077e4:	e943 5404 	strd	r5, r4, [r3, #-16]
 80077e8:	f843 cc08 	str.w	ip, [r3, #-8]
    for(i=0;i<N*N;i++)
 80077ec:	d1e3      	bne.n	80077b6 <crypto_sign_keypair+0x7a>

  /* Expanding ATF_C */
  expandATF_vec_copy(atfC, seeds+C*MAT_SK_SEED_SIZE, NB32_VEC_C, NB32_VEC_C, PK_SEED_SIZE);
 80077ee:	2320      	movs	r3, #32
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	f50d 50b1 	add.w	r0, sp, #5664	@ 0x1620
 80077f6:	2308      	movs	r3, #8
 80077f8:	461a      	mov	r2, r3
 80077fa:	a93a      	add	r1, sp, #232	@ 0xe8
 80077fc:	3008      	adds	r0, #8
 80077fe:	f7fc ffa9 	bl	8004754 <expandATF_vec_copy>
  invertingOnATF((uint32_t*)(pk), atfC, cols);
 8007802:	f50d 51b1 	add.w	r1, sp, #5664	@ 0x1620
 8007806:	aa42      	add	r2, sp, #264	@ 0x108
 8007808:	4650      	mov	r0, sl
 800780a:	3108      	adds	r1, #8

  /* Keeping Seed for ATF_C in both key (appended at the tail) */
  memcpy(pk+C*ALT_SIZE, seeds+C*MAT_SK_SEED_SIZE, PK_SEED_SIZE);
 800780c:	ac3a      	add	r4, sp, #232	@ 0xe8
  invertingOnATF((uint32_t*)(pk), atfC, cols);
 800780e:	f7fa fc83 	bl	8002118 <invertingOnATF>
  memcpy(pk+C*ALT_SIZE, seeds+C*MAT_SK_SEED_SIZE, PK_SEED_SIZE);
 8007812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007814:	f641 7748 	movw	r7, #8008	@ 0x1f48
 8007818:	eb0a 0507 	add.w	r5, sl, r7
 800781c:	f84a 0007 	str.w	r0, [sl, r7]
 8007820:	6069      	str	r1, [r5, #4]
 8007822:	60aa      	str	r2, [r5, #8]
 8007824:	60eb      	str	r3, [r5, #12]
 8007826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007828:	6128      	str	r0, [r5, #16]

  /* free */


  return 0;
}
 800782a:	2000      	movs	r0, #0
  memcpy(pk+C*ALT_SIZE, seeds+C*MAT_SK_SEED_SIZE, PK_SEED_SIZE);
 800782c:	6169      	str	r1, [r5, #20]
 800782e:	61aa      	str	r2, [r5, #24]
 8007830:	61eb      	str	r3, [r5, #28]
}
 8007832:	f50d 5d67 	add.w	sp, sp, #14784	@ 0x39c0
 8007836:	b00a      	add	sp, #40	@ 0x28
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	0000      	movs	r0, r0
	...

08007840 <crypto_sign>:
__attribute__((section(".sdram"))) uint32_t atfC_insign[LEN * NB32_VEC_ROUND];
__attribute__((section(".sdram"))) uint8_t  seeds_insign[EXPCOL_SIG_SEED_SIZE * ROUND];
__attribute__((section(".sdram"))) uint32_t cols_rnd_insign[NB32_VEC_NN * NB32_VEC_ROUND];
__attribute__((section(".sdram"))) uint32_t cols_insign[N * N * NB32_VEC_K];
int crypto_sign(uint8_t  *sm, uint64_t *smlen, const uint8_t  *m, uint64_t mlen, const uint8_t  *sk)
{
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	ed2d 8b02 	vpush	{d8}
 8007848:	f5ad 7d77 	sub.w	sp, sp, #988	@ 0x3dc
 800784c:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8007850:	f8dd 7408 	ldr.w	r7, [sp, #1032]	@ 0x408
 8007854:	f8dd 840c 	ldr.w	r8, [sp, #1036]	@ 0x40c
  int success;


  int i, r;

  if (!mlen){
 8007858:	ea57 0308 	orrs.w	r3, r7, r8
 800785c:	f000 8173 	beq.w	8007b46 <crypto_sign+0x306>
 8007860:	4606      	mov	r6, r0
 8007862:	4614      	mov	r4, r2
  /* this hold the most space by far, and is often unusued: it is good as a temporary buffer */
  tmp_ptr = (uint32_t *)(hash_insign + MSG_HASH_SIZE);

  //memset(hash_insign, 0x00, ALT_SIZE * ROUND + MSG_HASH_SIZE);
  for(int i = 0; i < ALT_SIZE * ROUND + MSG_HASH_SIZE; i++) {
	  hash_insign[i] = 0;
 8007864:	2100      	movs	r1, #0
 8007866:	4abc      	ldr	r2, [pc, #752]	@ (8007b58 <crypto_sign+0x318>)
 8007868:	48bc      	ldr	r0, [pc, #752]	@ (8007b5c <crypto_sign+0x31c>)
 800786a:	f8df a318 	ldr.w	sl, [pc, #792]	@ 8007b84 <crypto_sign+0x344>
 800786e:	f8df b318 	ldr.w	fp, [pc, #792]	@ 8007b88 <crypto_sign+0x348>
 8007872:	f004 fe01 	bl	800c478 <memset>
  }
  //memset(sm, 0x00, CRYPTO_BYTES);
  for(int i = 0; i < CRYPTO_BYTES; i++) {
	  sm[i] = 0;
 8007876:	f643 6238 	movw	r2, #15928	@ 0x3e38
 800787a:	2100      	movs	r1, #0
 800787c:	4630      	mov	r0, r6
 800787e:	f004 fdfb 	bl	800c478 <memset>
  }

  /* Expanding Secret Key  */
  /* Because MAT_SK_SEED_SIZE and PK_SEED_SIZE might differ, I prefer to consider one single large expansion */
  expandSeeds(seeds_sk_insign, sk, 1, SK_SEED_SIZE, ((MAT_SK_SEED_SIZE * C) + PK_SEED_SIZE));
 8007882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007886:	48b6      	ldr	r0, [pc, #728]	@ (8007b60 <crypto_sign+0x320>)
 8007888:	f8dd 1410 	ldr.w	r1, [sp, #1040]	@ 0x410
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	2201      	movs	r2, #1
 8007890:	2320      	movs	r3, #32
 8007892:	f7fc fe3f 	bl	8004514 <expandSeeds>

  expandATF_vec_copy(atfC_insign, seeds_sk_insign+C*MAT_SK_SEED_SIZE, NB32_VEC_ROUND, NB32_VEC_ROUND, PK_SEED_SIZE);
 8007896:	2358      	movs	r3, #88	@ 0x58
 8007898:	2220      	movs	r2, #32
 800789a:	49b2      	ldr	r1, [pc, #712]	@ (8007b64 <crypto_sign+0x324>)
 800789c:	48b2      	ldr	r0, [pc, #712]	@ (8007b68 <crypto_sign+0x328>)
 800789e:	9200      	str	r2, [sp, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	f7fc ff57 	bl	8004754 <expandATF_vec_copy>

  hashArray(hash_insign, MSG_HASH_SIZE, m, mlen);
 80078a6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80078aa:	48ac      	ldr	r0, [pc, #688]	@ (8007b5c <crypto_sign+0x31c>)
 80078ac:	9400      	str	r4, [sp, #0]
 80078ae:	2220      	movs	r2, #32
 80078b0:	2300      	movs	r3, #0
 80078b2:	f7fc fe17 	bl	80044e4 <hashArray>
    /* Acting independently on ATFC ROUND time */
    actingOnATFS(tmp_ptr, atfC_insign, tmp_ptr); /* careful tmp_ptr also contains hash */
    //printf("1\r\n");

    /* Creating Challenge from hash */
    hashArray(sm, CHLG_SIZE, hash_insign, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 80078b6:	ed9f 8ba6 	vldr	d8, [pc, #664]	@ 8007b50 <crypto_sign+0x310>
 80078ba:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
 80078be:	f10d 0950 	add.w	r9, sp, #80	@ 0x50
 80078c2:	9605      	str	r6, [sp, #20]
    randomSeed(char_ptr, SIG_SEED_SIZE);
 80078c4:	48a9      	ldr	r0, [pc, #676]	@ (8007b6c <crypto_sign+0x32c>)
 80078c6:	4da9      	ldr	r5, [pc, #676]	@ (8007b6c <crypto_sign+0x32c>)
    char_ptr = seeds_insign;
 80078c8:	4ca9      	ldr	r4, [pc, #676]	@ (8007b70 <crypto_sign+0x330>)
    randomSeed(char_ptr, SIG_SEED_SIZE);
 80078ca:	2110      	movs	r1, #16
 80078cc:	f7fc fe20 	bl	8004510 <randomSeed>
    expandSeeds(char_ptr, char_ptr, ROUND, SIG_SEED_SIZE, SIG_SEED_SIZE);
 80078d0:	48a6      	ldr	r0, [pc, #664]	@ (8007b6c <crypto_sign+0x32c>)
 80078d2:	2310      	movs	r3, #16
 80078d4:	4601      	mov	r1, r0
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	2254      	movs	r2, #84	@ 0x54
 80078da:	f7fc fe1b 	bl	8004514 <expandSeeds>
    randomSeed(salt_value, SALT_SIZE);
 80078de:	2120      	movs	r1, #32
 80078e0:	a80c      	add	r0, sp, #48	@ 0x30
 80078e2:	9506      	str	r5, [sp, #24]
 80078e4:	f7fc fe14 	bl	8004510 <randomSeed>
 80078e8:	46ae      	mov	lr, r5
    for (r = 0; r < ROUND; r++){
 80078ea:	f04f 0c00 	mov.w	ip, #0
      memset(char_ptr, (char)r, 1);
 80078ee:	f884 c030 	strb.w	ip, [r4, #48]	@ 0x30
      memcpy(char_ptr, ((uint8_t*)tmp_ptr) + r*SIG_SEED_SIZE, SIG_SEED_SIZE);
 80078f2:	4676      	mov	r6, lr
 80078f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
      memcpy(char_ptr, salt_value, SALT_SIZE);
 80078f6:	ad0c      	add	r5, sp, #48	@ 0x30
      memcpy(char_ptr, ((uint8_t*)tmp_ptr) + r*SIG_SEED_SIZE, SIG_SEED_SIZE);
 80078f8:	6020      	str	r0, [r4, #0]
 80078fa:	6061      	str	r1, [r4, #4]
 80078fc:	60a2      	str	r2, [r4, #8]
 80078fe:	60e3      	str	r3, [r4, #12]
      memcpy(char_ptr, salt_value, SALT_SIZE);
 8007900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007902:	6120      	str	r0, [r4, #16]
 8007904:	6161      	str	r1, [r4, #20]
 8007906:	61a2      	str	r2, [r4, #24]
 8007908:	61e3      	str	r3, [r4, #28]
 800790a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
      char_ptr += 1;
 800790c:	3431      	adds	r4, #49	@ 0x31
    for (r = 0; r < ROUND; r++){
 800790e:	4554      	cmp	r4, sl
 8007910:	f10c 0c01 	add.w	ip, ip, #1
 8007914:	f10e 0e10 	add.w	lr, lr, #16
      memcpy(char_ptr, salt_value, SALT_SIZE);
 8007918:	f844 0c11 	str.w	r0, [r4, #-17]
 800791c:	f844 1c0d 	str.w	r1, [r4, #-13]
 8007920:	f844 2c09 	str.w	r2, [r4, #-9]
 8007924:	f844 3c05 	str.w	r3, [r4, #-5]
    for (r = 0; r < ROUND; r++){
 8007928:	d1e1      	bne.n	80078ee <crypto_sign+0xae>
 800792a:	4c92      	ldr	r4, [pc, #584]	@ (8007b74 <crypto_sign+0x334>)
 800792c:	4f90      	ldr	r7, [pc, #576]	@ (8007b70 <crypto_sign+0x330>)
 800792e:	4625      	mov	r5, r4
      expandColumns(cols_rnd_insign + r * NB32_VEC_NN, seeds_insign + r * EXPCOL_SIG_SEED_SIZE, EXPCOL_SIG_SEED_SIZE);
 8007930:	4639      	mov	r1, r7
 8007932:	4628      	mov	r0, r5
 8007934:	2231      	movs	r2, #49	@ 0x31
    for (r = 0; r < ROUND; r++)
 8007936:	f505 7530 	add.w	r5, r5, #704	@ 0x2c0
      expandColumns(cols_rnd_insign + r * NB32_VEC_NN, seeds_insign + r * EXPCOL_SIG_SEED_SIZE, EXPCOL_SIG_SEED_SIZE);
 800793a:	f7fc ff61 	bl	8004800 <expandColumns>
    for (r = 0; r < ROUND; r++)
 800793e:	455d      	cmp	r5, fp
 8007940:	f107 0731 	add.w	r7, r7, #49	@ 0x31
 8007944:	d1f4      	bne.n	8007930 <crypto_sign+0xf0>
 8007946:	4d8c      	ldr	r5, [pc, #560]	@ (8007b78 <crypto_sign+0x338>)
 8007948:	498a      	ldr	r1, [pc, #552]	@ (8007b74 <crypto_sign+0x334>)
 800794a:	462f      	mov	r7, r5
 800794c:	2000      	movs	r0, #0
    for (i = 0; i < N * N; i++)
 800794e:	f643 2c18 	movw	ip, #14872	@ 0x3a18
    for (r = 0; r < ROUND; r++){
 8007952:	463a      	mov	r2, r7
 8007954:	2300      	movs	r3, #0
        tmp_ptr[i * NB32_VEC_ROUND + r] = cols_rnd_insign[r * NB32_VEC_NN + i];
 8007956:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 800795a:	f842 6f04 	str.w	r6, [r2, #4]!
      for (r = 0; r < NB32_VEC_ROUND; r++)
 800795e:	33b0      	adds	r3, #176	@ 0xb0
 8007960:	f5b3 5f72 	cmp.w	r3, #15488	@ 0x3c80
 8007964:	d1f7      	bne.n	8007956 <crypto_sign+0x116>
    for (i = 0; i < N * N; i++)
 8007966:	3058      	adds	r0, #88	@ 0x58
 8007968:	4560      	cmp	r0, ip
 800796a:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800796e:	f101 0104 	add.w	r1, r1, #4
 8007972:	d1ee      	bne.n	8007952 <crypto_sign+0x112>
    actingOnATFS(tmp_ptr, atfC_insign, tmp_ptr); /* careful tmp_ptr also contains hash */
 8007974:	487d      	ldr	r0, [pc, #500]	@ (8007b6c <crypto_sign+0x32c>)
 8007976:	497c      	ldr	r1, [pc, #496]	@ (8007b68 <crypto_sign+0x328>)
 8007978:	4602      	mov	r2, r0
 800797a:	f7fb fdf3 	bl	8003564 <actingOnATFS>
    hashArray(sm, CHLG_SIZE, hash_insign, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 800797e:	4b77      	ldr	r3, [pc, #476]	@ (8007b5c <crypto_sign+0x31c>)
 8007980:	9805      	ldr	r0, [sp, #20]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	2220      	movs	r2, #32
 8007986:	ed8d 8b02 	vstr	d8, [sp, #8]
    //printf("2\r\n");

    expandChallenge(chg_c, chg_nc, chg_val, sm, CHLG_SIZE);
 800798a:	f103 0820 	add.w	r8, r3, #32
    hashArray(sm, CHLG_SIZE, hash_insign, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 800798e:	2300      	movs	r3, #0
 8007990:	f7fc fda8 	bl	80044e4 <hashArray>
    expandChallenge(chg_c, chg_nc, chg_val, sm, CHLG_SIZE);
 8007994:	2320      	movs	r3, #32
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	aa4e      	add	r2, sp, #312	@ 0x138
 800799a:	9b05      	ldr	r3, [sp, #20]
 800799c:	a922      	add	r1, sp, #136	@ 0x88
 800799e:	a87a      	add	r0, sp, #488	@ 0x1e8
 80079a0:	af20      	add	r7, sp, #128	@ 0x80
    //printf("3\r\n");

    /* overwrite cols_rnd to align properly necessary matrices for the rest of the program, and vectorize it */
    for (r = 0; r < K; r++)
      memcpy(tmp_ptr + NB32_VEC_NN * r, cols_rnd_insign + NB32_VEC_NN * chg_nc[r], sizeof(uint32_t) * NB32_VEC_NN);
 80079a2:	f44f 7630 	mov.w	r6, #704	@ 0x2c0
    expandChallenge(chg_c, chg_nc, chg_val, sm, CHLG_SIZE);
 80079a6:	f7fc fdc3 	bl	8004530 <expandChallenge>
      memcpy(tmp_ptr + NB32_VEC_NN * r, cols_rnd_insign + NB32_VEC_NN * chg_nc[r], sizeof(uint32_t) * NB32_VEC_NN);
 80079aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80079ae:	4b71      	ldr	r3, [pc, #452]	@ (8007b74 <crypto_sign+0x334>)
 80079b0:	4640      	mov	r0, r8
 80079b2:	fb06 3101 	mla	r1, r6, r1, r3
 80079b6:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 80079ba:	f004 fde8 	bl	800c58e <memcpy>
    for (r = 0; r < K; r++)
 80079be:	ab4c      	add	r3, sp, #304	@ 0x130
 80079c0:	42bb      	cmp	r3, r7
 80079c2:	f508 7830 	add.w	r8, r8, #704	@ 0x2c0
 80079c6:	d1f0      	bne.n	80079aa <crypto_sign+0x16a>
 80079c8:	4e6b      	ldr	r6, [pc, #428]	@ (8007b78 <crypto_sign+0x338>)
 80079ca:	2700      	movs	r7, #0
    /* vectorize the result */
    for (i = 0; i < N * N; i++)
      for (r = 0; r < K; r++)
 80079cc:	f640 70d8 	movw	r0, #4056	@ 0xfd8
    expandChallenge(chg_c, chg_nc, chg_val, sm, CHLG_SIZE);
 80079d0:	4632      	mov	r2, r6
 80079d2:	2300      	movs	r3, #0
        cols_rnd_insign[i * NB32_VEC_K + r] = tmp_ptr[r * NB32_VEC_NN + i];
 80079d4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80079d8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
      for (r = 0; r < K; r++)
 80079dc:	3318      	adds	r3, #24
 80079de:	4283      	cmp	r3, r0
 80079e0:	d1f8      	bne.n	80079d4 <crypto_sign+0x194>
    for (i = 0; i < N * N; i++)
 80079e2:	37b0      	adds	r7, #176	@ 0xb0
 80079e4:	f5b7 6f72 	cmp.w	r7, #3872	@ 0xf20
 80079e8:	f506 7630 	add.w	r6, r6, #704	@ 0x2c0
 80079ec:	f104 0404 	add.w	r4, r4, #4
 80079f0:	d1ee      	bne.n	80079d0 <crypto_sign+0x190>

    /* Expanding KxN Columns matrices from the CxN from Secret Key: assume duplicates for vectorization */
#if C < K /* many collisions */
    memset(cols_exp, -1, C * 8); /* basically an unreachable value that will be changed */
 80079f2:	2238      	movs	r2, #56	@ 0x38
 80079f4:	f04f 31ff 	mov.w	r1, #4294967295
 80079f8:	4648      	mov	r0, r9
 80079fa:	2400      	movs	r4, #0
 80079fc:	f004 fd3c 	bl	800c478 <memset>
 8007a00:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8007b6c <crypto_sign+0x32c>
        expandColumns(tmp_ptr + NB32_VEC_NN * r, seeds_sk_insign + chg_val[r] * MAT_SK_SEED_SIZE, MAT_SK_SEED_SIZE);
        cols_exp[chg_val[r]] = r; /* store the position in which it has already been generated */
      }
      else /* already expanded somewhere, position stored in cols_exp[chg_val[r]] */
      {
        memcpy(tmp_ptr + NB32_VEC_NN * r, tmp_ptr + NB32_VEC_NN * cols_exp[chg_val[r]], sizeof(uint32_t) * NB32_VEC_NN);
 8007a04:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007a06:	af4c      	add	r7, sp, #304	@ 0x130
    memset(cols_exp, -1, C * 8); /* basically an unreachable value that will be changed */
 8007a08:	4626      	mov	r6, r4
 8007a0a:	e009      	b.n	8007a20 <crypto_sign+0x1e0>
        memcpy(tmp_ptr + NB32_VEC_NN * r, tmp_ptr + NB32_VEC_NN * cols_exp[chg_val[r]], sizeof(uint32_t) * NB32_VEC_NN);
 8007a0c:	f004 fdbf 	bl	800c58e <memcpy>
    for (r = 0; r < K; r++)
 8007a10:	3401      	adds	r4, #1
 8007a12:	ab78      	add	r3, sp, #480	@ 0x1e0
 8007a14:	f146 0600 	adc.w	r6, r6, #0
 8007a18:	42bb      	cmp	r3, r7
 8007a1a:	f508 7830 	add.w	r8, r8, #704	@ 0x2c0
 8007a1e:	d020      	beq.n	8007a62 <crypto_sign+0x222>
      if (cols_exp[chg_val[r]] == -1)
 8007a20:	f857 3f08 	ldr.w	r3, [r7, #8]!
        memcpy(tmp_ptr + NB32_VEC_NN * r, tmp_ptr + NB32_VEC_NN * cols_exp[chg_val[r]], sizeof(uint32_t) * NB32_VEC_NN);
 8007a24:	4d51      	ldr	r5, [pc, #324]	@ (8007b6c <crypto_sign+0x32c>)
      if (cols_exp[chg_val[r]] == -1)
 8007a26:	f859 1033 	ldr.w	r1, [r9, r3, lsl #3]
 8007a2a:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
        memcpy(tmp_ptr + NB32_VEC_NN * r, tmp_ptr + NB32_VEC_NN * cols_exp[chg_val[r]], sizeof(uint32_t) * NB32_VEC_NN);
 8007a2e:	4640      	mov	r0, r8
      if (cols_exp[chg_val[r]] == -1)
 8007a30:	f8d2 c004 	ldr.w	ip, [r2, #4]
        memcpy(tmp_ptr + NB32_VEC_NN * r, tmp_ptr + NB32_VEC_NN * cols_exp[chg_val[r]], sizeof(uint32_t) * NB32_VEC_NN);
 8007a34:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
      if (cols_exp[chg_val[r]] == -1)
 8007a38:	f1bc 3fff 	cmp.w	ip, #4294967295
 8007a3c:	bf08      	it	eq
 8007a3e:	f1b1 3fff 	cmpeq.w	r1, #4294967295
        memcpy(tmp_ptr + NB32_VEC_NN * r, tmp_ptr + NB32_VEC_NN * cols_exp[chg_val[r]], sizeof(uint32_t) * NB32_VEC_NN);
 8007a42:	fb02 5101 	mla	r1, r2, r1, r5
      if (cols_exp[chg_val[r]] == -1)
 8007a46:	d1e1      	bne.n	8007a0c <crypto_sign+0x1cc>
        expandColumns(tmp_ptr + NB32_VEC_NN * r, seeds_sk_insign + chg_val[r] * MAT_SK_SEED_SIZE, MAT_SK_SEED_SIZE);
 8007a48:	4945      	ldr	r1, [pc, #276]	@ (8007b60 <crypto_sign+0x320>)
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8007a50:	f7fc fed6 	bl	8004800 <expandColumns>
        cols_exp[chg_val[r]] = r; /* store the position in which it has already been generated */
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
 8007a5a:	f849 4033 	str.w	r4, [r9, r3, lsl #3]
 8007a5e:	6056      	str	r6, [r2, #4]
 8007a60:	e7d6      	b.n	8007a10 <crypto_sign+0x1d0>
 8007a62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a64:	4845      	ldr	r0, [pc, #276]	@ (8007b7c <crypto_sign+0x33c>)
    for (r = 0; r < K; r++)
 8007a66:	2700      	movs	r7, #0
    for (r = 0; r < K; r++)
      expandColumns(tmp_ptr + NB32_VEC_NN * r, seeds_sk_insign + chg_val[r] * MAT_SK_SEED_SIZE, MAT_SK_SEED_SIZE);
#endif /*C<K or K>C */
    /* vectorize the result */
    for (i = 0; i < N * N; i++)
      for (r = 0; r < K; r++)
 8007a68:	f640 74d8 	movw	r4, #4056	@ 0xfd8
    memset(cols_exp, -1, C * 8); /* basically an unreachable value that will be changed */
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	2300      	movs	r3, #0
        cols_insign[i * NB32_VEC_K + r] = tmp_ptr[r * NB32_VEC_NN + i];
 8007a70:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8007a74:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
      for (r = 0; r < K; r++)
 8007a78:	3318      	adds	r3, #24
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	d1f8      	bne.n	8007a70 <crypto_sign+0x230>
    for (i = 0; i < N * N; i++)
 8007a7e:	37b0      	adds	r7, #176	@ 0xb0
 8007a80:	f5b7 6f72 	cmp.w	r7, #3872	@ 0xf20
 8007a84:	f505 7530 	add.w	r5, r5, #704	@ 0x2c0
 8007a88:	f100 0004 	add.w	r0, r0, #4
 8007a8c:	d1ee      	bne.n	8007a6c <crypto_sign+0x22c>
    //printf("4\r\n");

    /* Construct K Matrices corresponding to challenge !=C */
    columnsMatrix(tmp_ptr, cols_rnd_insign, cols_insign, NB32_VEC_K);
 8007a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8007b7c <crypto_sign+0x33c>)
 8007a90:	4938      	ldr	r1, [pc, #224]	@ (8007b74 <crypto_sign+0x334>)
 8007a92:	4836      	ldr	r0, [pc, #216]	@ (8007b6c <crypto_sign+0x32c>)
 8007a94:	2318      	movs	r3, #24
 8007a96:	f7ff f9b9 	bl	8006e0c <columnsMatrix>
    success = columnsDecomposition(tmp_ptr, NB32_VEC_K, K);
 8007a9a:	4834      	ldr	r0, [pc, #208]	@ (8007b6c <crypto_sign+0x32c>)
 8007a9c:	2216      	movs	r2, #22
 8007a9e:	2118      	movs	r1, #24
 8007aa0:	f7ff faf8 	bl	8007094 <columnsDecomposition>
  } while (!success);
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	f43f af0d 	beq.w	80078c4 <crypto_sign+0x84>
  /* Finally write the content of the signature */
  char_ptr = sm + CHLG_SIZE;

  #if USE_SALT == 1
  /* write the salt */
  memcpy(char_ptr, salt_value, SALT_SIZE);
 8007aaa:	ac0c      	add	r4, sp, #48	@ 0x30
 8007aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aae:	9e05      	ldr	r6, [sp, #20]
 8007ab0:	6230      	str	r0, [r6, #32]
 8007ab2:	6271      	str	r1, [r6, #36]	@ 0x24
 8007ab4:	62b2      	str	r2, [r6, #40]	@ 0x28
 8007ab6:	62f3      	str	r3, [r6, #44]	@ 0x2c
 8007ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aba:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	@ 0x24
 8007abe:	ad78      	add	r5, sp, #480	@ 0x1e0
 8007ac0:	f106 0c40 	add.w	ip, r6, #64	@ 0x40
 8007ac4:	f50d 7e74 	add.w	lr, sp, #976	@ 0x3d0
 8007ac8:	6330      	str	r0, [r6, #48]	@ 0x30
 8007aca:	6371      	str	r1, [r6, #52]	@ 0x34
 8007acc:	63b2      	str	r2, [r6, #56]	@ 0x38
 8007ace:	63f3      	str	r3, [r6, #60]	@ 0x3c
  #endif
  //printf("5\r\n");

  /* Write the ROUND - K seeds_insign corresponding to challenge =C */
  for (r = 0; r < ROUND - K; r++)
    memcpy(char_ptr + r * SIG_SEED_SIZE, seeds_insign + chg_c[r] * EXPCOL_SIG_SEED_SIZE, sizeof(uint8_t) * SIG_SEED_SIZE);
 8007ad0:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8007ad4:	4926      	ldr	r1, [pc, #152]	@ (8007b70 <crypto_sign+0x330>)
 8007ad6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ada:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ade:	18ca      	adds	r2, r1, r3
 8007ae0:	58c8      	ldr	r0, [r1, r3]
 8007ae2:	6851      	ldr	r1, [r2, #4]
 8007ae4:	6893      	ldr	r3, [r2, #8]
 8007ae6:	68d2      	ldr	r2, [r2, #12]
 8007ae8:	f8cc 200c 	str.w	r2, [ip, #12]
  for (r = 0; r < ROUND - K; r++)
 8007aec:	4575      	cmp	r5, lr
    memcpy(char_ptr + r * SIG_SEED_SIZE, seeds_insign + chg_c[r] * EXPCOL_SIG_SEED_SIZE, sizeof(uint8_t) * SIG_SEED_SIZE);
 8007aee:	f8cc 0000 	str.w	r0, [ip]
 8007af2:	f8cc 1004 	str.w	r1, [ip, #4]
 8007af6:	f8cc 3008 	str.w	r3, [ip, #8]
  for (r = 0; r < ROUND - K; r++)
 8007afa:	f10c 0c10 	add.w	ip, ip, #16
 8007afe:	d1e7      	bne.n	8007ad0 <crypto_sign+0x290>
 8007b00:	4c1f      	ldr	r4, [pc, #124]	@ (8007b80 <crypto_sign+0x340>)
 8007b02:	9d06      	ldr	r5, [sp, #24]
 8007b04:	f506 6384 	add.w	r3, r6, #1056	@ 0x420

  /* this output is vectorized! Do not load useless elements when NB32_VEC_K > K */
  char_ptr += ((ROUND - K) * SIG_SEED_SIZE);
  for (r = 0; r < N * N; r++)
    memcpy(((uint32_t *)char_ptr) + r * K, tmp_ptr + r * NB32_VEC_K, sizeof(uint32_t) * K);
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	2258      	movs	r2, #88	@ 0x58
 8007b0e:	f004 fd3e 	bl	800c58e <memcpy>
  for (r = 0; r < N * N; r++)
 8007b12:	3560      	adds	r5, #96	@ 0x60
    memcpy(((uint32_t *)char_ptr) + r * K, tmp_ptr + r * NB32_VEC_K, sizeof(uint32_t) * K);
 8007b14:	4603      	mov	r3, r0
  for (r = 0; r < N * N; r++)
 8007b16:	42a5      	cmp	r5, r4
 8007b18:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8007b1c:	d1f4      	bne.n	8007b08 <crypto_sign+0x2c8>

  *smlen = CRYPTO_BYTES;
  *smlen += mlen;
 8007b1e:	9a07      	ldr	r2, [sp, #28]
  memcpy(sm + CRYPTO_BYTES, m, mlen);
 8007b20:	9908      	ldr	r1, [sp, #32]
  *smlen += mlen;
 8007b22:	f643 6338 	movw	r3, #15928	@ 0x3e38
  memcpy(sm + CRYPTO_BYTES, m, mlen);
 8007b26:	18f0      	adds	r0, r6, r3
  *smlen += mlen;
 8007b28:	18fb      	adds	r3, r7, r3
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	f148 0300 	adc.w	r3, r8, #0
 8007b30:	6053      	str	r3, [r2, #4]
  memcpy(sm + CRYPTO_BYTES, m, mlen);
 8007b32:	463a      	mov	r2, r7
 8007b34:	f004 fd2b 	bl	800c58e <memcpy>

  /* free */


  return 0;
 8007b38:	2000      	movs	r0, #0
}
 8007b3a:	f50d 7d77 	add.w	sp, sp, #988	@ 0x3dc
 8007b3e:	ecbd 8b02 	vpop	{d8}
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;}
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4a:	e7f6      	b.n	8007b3a <crypto_sign+0x2fa>
 8007b4c:	f3af 8000 	nop.w
 8007b50:	00017780 	.word	0x00017780
 8007b54:	00000000 	.word	0x00000000
 8007b58:	00017780 	.word	0x00017780
 8007b5c:	c0145274 	.word	0xc0145274
 8007b60:	c0145174 	.word	0xc0145174
 8007b64:	c0145254 	.word	0xc0145254
 8007b68:	c012c834 	.word	0xc012c834
 8007b6c:	c0145294 	.word	0xc0145294
 8007b70:	c012b820 	.word	0xc012b820
 8007b74:	c011c620 	.word	0xc011c620
 8007b78:	c0145290 	.word	0xc0145290
 8007b7c:	c01186c0 	.word	0xc01186c0
 8007b80:	c01491f4 	.word	0xc01491f4
 8007b84:	c012c834 	.word	0xc012c834
 8007b88:	c012ad20 	.word	0xc012ad20

08007b8c <crypto_sign_open>:

__attribute__((section(".sdram")))  uint8_t  hash_inopen[(ALT_SIZE * ROUND + MSG_HASH_SIZE)];
__attribute__((section(".sdram")))  uint32_t cols_inopen[N * N * NB32_VEC_ROUND];
__attribute__((section(".sdram")))  uint32_t atfs_inopen[LEN * NB32_VEC_ROUND];
int crypto_sign_open(uint8_t  *m, uint64_t *mlen, const uint8_t  *sm, uint64_t smlen, const uint8_t  *pk)
{
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	f6ad 7d94 	subw	sp, sp, #3988	@ 0xf94

  uint8_t* char_ptr;
  uint8_t* char_ptr_out;


  memset(chk, 0x00, CHLG_SIZE);
 8007b94:	2720      	movs	r7, #32
{
 8007b96:	4692      	mov	sl, r2
 8007b98:	4689      	mov	r9, r1
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	9205      	str	r2, [sp, #20]
 8007b9e:	9107      	str	r1, [sp, #28]
  memset(chk, 0x00, CHLG_SIZE);
 8007ba0:	463a      	mov	r2, r7
{
 8007ba2:	9006      	str	r0, [sp, #24]
  memset(chk, 0x00, CHLG_SIZE);
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	eb0d 0007 	add.w	r0, sp, r7
{
 8007baa:	f8dd 4fb8 	ldr.w	r4, [sp, #4024]	@ 0xfb8
 8007bae:	f8dd 5fbc 	ldr.w	r5, [sp, #4028]	@ 0xfbc
 8007bb2:	f8dd 6fc0 	ldr.w	r6, [sp, #4032]	@ 0xfc0
  memset(chk, 0x00, CHLG_SIZE);
 8007bb6:	f004 fc5f 	bl	800c478 <memset>
  memset(hash_inopen, 0x00, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 8007bba:	4a97      	ldr	r2, [pc, #604]	@ (8007e18 <crypto_sign_open+0x28c>)
 8007bbc:	4897      	ldr	r0, [pc, #604]	@ (8007e1c <crypto_sign_open+0x290>)
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	f004 fc5a 	bl	800c478 <memset>

  *mlen = smlen - CRYPTO_BYTES;
 8007bc4:	4a96      	ldr	r2, [pc, #600]	@ (8007e20 <crypto_sign_open+0x294>)
 8007bc6:	18a2      	adds	r2, r4, r2
 8007bc8:	f165 0500 	sbc.w	r5, r5, #0
  memcpy(m, sm + CRYPTO_BYTES, *mlen);
 8007bcc:	f50a 5178 	add.w	r1, sl, #15872	@ 0x3e00
 8007bd0:	4654      	mov	r4, sl
  *mlen = smlen - CRYPTO_BYTES;
 8007bd2:	e9c9 2500 	strd	r2, r5, [r9]
  memcpy(m, sm + CRYPTO_BYTES, *mlen);
 8007bd6:	3138      	adds	r1, #56	@ 0x38
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f004 fcd8 	bl	800c58e <memcpy>

  /* Expanding Challenge */
  expandChallenge(chg_c, chg_nc, chg_val, sm, CHLG_SIZE);
 8007bde:	4653      	mov	r3, sl
 8007be0:	9700      	str	r7, [sp, #0]
 8007be2:	aa44      	add	r2, sp, #272	@ 0x110
 8007be4:	a918      	add	r1, sp, #96	@ 0x60
 8007be6:	a870      	add	r0, sp, #448	@ 0x1c0
 8007be8:	f7fc fca2 	bl	8004530 <expandChallenge>

  #if USE_SALT == 1
  /* recover the salt appended to the end of the signature */
  char_ptr = ((uint8_t*)sm) + CHLG_SIZE;
  memcpy(salt_value, char_ptr, SALT_SIZE);
 8007bec:	f10d 0a40 	add.w	sl, sp, #64	@ 0x40
 8007bf0:	6a20      	ldr	r0, [r4, #32]
 8007bf2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007bf4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007bf6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007bf8:	4627      	mov	r7, r4
 8007bfa:	4654      	mov	r4, sl
 8007bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c06:	ad6e      	add	r5, sp, #440	@ 0x1b8
 8007c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  char_ptr += SALT_SIZE;
 8007c0a:	f107 0c40 	add.w	ip, r7, #64	@ 0x40
  char_ptr_out = seeds_sig;
  /* set the seeds that have to be expanded for signature column matrices */
  for (r = 0; r < ROUND - K; r++){
 8007c0e:	46a8      	mov	r8, r5
  char_ptr += SALT_SIZE;
 8007c10:	46ae      	mov	lr, r5
  char_ptr_out = seeds_sig;
 8007c12:	acec      	add	r4, sp, #944	@ 0x3b0
 8007c14:	f60d 798e 	addw	r9, sp, #3982	@ 0xf8e
    memcpy(char_ptr_out, char_ptr, SIG_SEED_SIZE);
 8007c18:	f8dc 3000 	ldr.w	r3, [ip]
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007c22:	6063      	str	r3, [r4, #4]
 8007c24:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007c28:	60a3      	str	r3, [r4, #8]
 8007c2a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007c2e:	60e3      	str	r3, [r4, #12]
    char_ptr += SIG_SEED_SIZE;
    char_ptr_out += SIG_SEED_SIZE;
    /* position for the SALT */
    memcpy(char_ptr_out, salt_value, SALT_SIZE);
 8007c30:	4657      	mov	r7, sl
 8007c32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007c34:	6120      	str	r0, [r4, #16]
 8007c36:	6161      	str	r1, [r4, #20]
 8007c38:	61a2      	str	r2, [r4, #24]
 8007c3a:	61e3      	str	r3, [r4, #28]
 8007c3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    char_ptr_out += SALT_SIZE;
    /* position for the octet id */
    memset(char_ptr_out, chg_c[r], 1);
    char_ptr_out += 1;
 8007c3e:	3431      	adds	r4, #49	@ 0x31
    memcpy(char_ptr_out, salt_value, SALT_SIZE);
 8007c40:	f844 0c11 	str.w	r0, [r4, #-17]
 8007c44:	f844 1c0d 	str.w	r1, [r4, #-13]
 8007c48:	f844 2c09 	str.w	r2, [r4, #-9]
 8007c4c:	f844 3c05 	str.w	r3, [r4, #-5]
    memset(char_ptr_out, chg_c[r], 1);
 8007c50:	f85e 3f08 	ldr.w	r3, [lr, #8]!
 8007c54:	f804 3c01 	strb.w	r3, [r4, #-1]
  for (r = 0; r < ROUND - K; r++){
 8007c58:	454c      	cmp	r4, r9
    char_ptr += SIG_SEED_SIZE;
 8007c5a:	f10c 0c10 	add.w	ip, ip, #16
  for (r = 0; r < ROUND - K; r++){
 8007c5e:	d1db      	bne.n	8007c18 <crypto_sign_open+0x8c>
 8007c60:	4f70      	ldr	r7, [pc, #448]	@ (8007e24 <crypto_sign_open+0x298>)
 8007c62:	4c71      	ldr	r4, [pc, #452]	@ (8007e28 <crypto_sign_open+0x29c>)
 8007c64:	f50d 796c 	add.w	r9, sp, #944	@ 0x3b0
 8007c68:	46bb      	mov	fp, r7
  #endif

  /* Expanding ROUND-K  N Columns Matrices correponding to challenge =C  */
  /* use atfs as a temporary buffer */
  for (r = 0; r < ROUND - K; r++)
    expandColumns(atfs_inopen + r * NB32_VEC_NN, seeds_sig + (r * EXPCOL_SIG_SEED_SIZE), EXPCOL_SIG_SEED_SIZE);
 8007c6a:	2231      	movs	r2, #49	@ 0x31
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	4658      	mov	r0, fp
  for (r = 0; r < ROUND - K; r++)
 8007c70:	f50b 7b30 	add.w	fp, fp, #704	@ 0x2c0
 8007c74:	4491      	add	r9, r2
    expandColumns(atfs_inopen + r * NB32_VEC_NN, seeds_sig + (r * EXPCOL_SIG_SEED_SIZE), EXPCOL_SIG_SEED_SIZE);
 8007c76:	f7fc fdc3 	bl	8004800 <expandColumns>
  for (r = 0; r < ROUND - K; r++)
 8007c7a:	45a3      	cmp	fp, r4
 8007c7c:	d1f5      	bne.n	8007c6a <crypto_sign_open+0xde>
 8007c7e:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8007e38 <crypto_sign_open+0x2ac>
 8007c82:	4968      	ldr	r1, [pc, #416]	@ (8007e24 <crypto_sign_open+0x298>)
 8007c84:	2400      	movs	r4, #0
  /* pre-vectorize data before loading the vectorized data after */
  for (i = 0; i < N * N; i++)
    for (r = 0; r < ROUND - K; r++)
 8007c86:	f642 20a0 	movw	r0, #10912	@ 0x2aa0
  for (i = 0; i < N * N; i++)
 8007c8a:	f643 2e18 	movw	lr, #14872	@ 0x3a18
  for (r = 0; r < ROUND - K; r++){
 8007c8e:	4662      	mov	r2, ip
 8007c90:	2300      	movs	r3, #0
 8007c92:	46a1      	mov	r9, r4
      cols_inopen[i * NB32_VEC_ROUND + r] = atfs_inopen[r * NB32_VEC_NN + i];
 8007c94:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8007c98:	f842 4f04 	str.w	r4, [r2, #4]!
    for (r = 0; r < ROUND - K; r++)
 8007c9c:	33b0      	adds	r3, #176	@ 0xb0
 8007c9e:	4283      	cmp	r3, r0
 8007ca0:	d1f8      	bne.n	8007c94 <crypto_sign_open+0x108>
  for (i = 0; i < N * N; i++)
 8007ca2:	464c      	mov	r4, r9
 8007ca4:	3458      	adds	r4, #88	@ 0x58
 8007ca6:	4574      	cmp	r4, lr
 8007ca8:	f50c 7cb0 	add.w	ip, ip, #352	@ 0x160
 8007cac:	f101 0104 	add.w	r1, r1, #4
 8007cb0:	d1ed      	bne.n	8007c8e <crypto_sign_open+0x102>
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	4c5d      	ldr	r4, [pc, #372]	@ (8007e2c <crypto_sign_open+0x2a0>)
 8007cb6:	f8df b184 	ldr.w	fp, [pc, #388]	@ 8007e3c <crypto_sign_open+0x2b0>
 8007cba:	f503 6984 	add.w	r9, r3, #1056	@ 0x420

  /* Extract matrix for challenge <C*/
  /* load vectorized data, packs of K elements */
  char_ptr = (uint8_t*)(sm + CHLG_SIZE + SALT_SIZE + ((ROUND - K) * SIG_SEED_SIZE));
  for (i = 0; i < N * N; i++)
    memcpy(cols_inopen + (i * NB32_VEC_ROUND) + ROUND - K, (uint32_t *)(char_ptr) + i * K, K * sizeof(uint32_t));
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	2258      	movs	r2, #88	@ 0x58
  for (i = 0; i < N * N; i++)
 8007cc4:	f504 74b0 	add.w	r4, r4, #352	@ 0x160
    memcpy(cols_inopen + (i * NB32_VEC_ROUND) + ROUND - K, (uint32_t *)(char_ptr) + i * K, K * sizeof(uint32_t));
 8007cc8:	f004 fc61 	bl	800c58e <memcpy>
  for (i = 0; i < N * N; i++)
 8007ccc:	45a3      	cmp	fp, r4
 8007cce:	f109 0958 	add.w	r9, r9, #88	@ 0x58
 8007cd2:	d1f4      	bne.n	8007cbe <crypto_sign_open+0x132>
 8007cd4:	4b56      	ldr	r3, [pc, #344]	@ (8007e30 <crypto_sign_open+0x2a4>)
 8007cd6:	f503 70a6 	add.w	r0, r3, #332	@ 0x14c
 8007cda:	f503 4969 	add.w	r9, r3, #59648	@ 0xe900
 8007cde:	f109 09ac 	add.w	r9, r9, #172	@ 0xac
 8007ce2:	4601      	mov	r1, r0
  int correct=0;
 8007ce4:	2400      	movs	r4, #0

  /* check values are all within [0, PRIME [: avoid signature forgeries by just adding values */
  for (i = 0; i < N * N ; i++)
    for (r = ROUND - K; r < ROUND; r++)
 8007ce6:	f1a1 0258 	sub.w	r2, r1, #88	@ 0x58
      correct |= (cols_inopen[i * NB32_VEC_ROUND + r] >= PRIME);
 8007cea:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007cee:	f113 0f06 	cmn.w	r3, #6
 8007cf2:	bf94      	ite	ls
 8007cf4:	2300      	movls	r3, #0
 8007cf6:	2301      	movhi	r3, #1
    for (r = ROUND - K; r < ROUND; r++)
 8007cf8:	4291      	cmp	r1, r2
      correct |= (cols_inopen[i * NB32_VEC_ROUND + r] >= PRIME);
 8007cfa:	ea44 0403 	orr.w	r4, r4, r3
    for (r = ROUND - K; r < ROUND; r++)
 8007cfe:	d1f4      	bne.n	8007cea <crypto_sign_open+0x15e>
  for (i = 0; i < N * N ; i++)
 8007d00:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8007d04:	4589      	cmp	r9, r1
 8007d06:	d1ee      	bne.n	8007ce6 <crypto_sign_open+0x15a>
 8007d08:	2100      	movs	r1, #0
  /* check diagonal values are non-zero */
  for (i = 0; i < N; i++)
 8007d0a:	f643 6c90 	movw	ip, #16016	@ 0x3e90
    for (r = ROUND - K; r < ROUND; r++)
 8007d0e:	f1a0 0358 	sub.w	r3, r0, #88	@ 0x58
      correct |= (cols_inopen[(i * (N + 1)) * NB32_VEC_ROUND + r] == 0);
 8007d12:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	bf08      	it	eq
 8007d1a:	f044 0401 	orreq.w	r4, r4, #1
    for (r = ROUND - K; r < ROUND; r++)
 8007d1e:	4283      	cmp	r3, r0
 8007d20:	d1f7      	bne.n	8007d12 <crypto_sign_open+0x186>
  for (i = 0; i < N; i++)
 8007d22:	f501 619a 	add.w	r1, r1, #1232	@ 0x4d0
 8007d26:	4561      	cmp	r1, ip
 8007d28:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8007d2c:	d1ef      	bne.n	8007d0e <crypto_sign_open+0x182>

  /* expanding and copy-pasting of the ATF (ROUND-K copies) need to vectorize properly (use vectorized ATFS) */
  expandATF_vec_copy(atfs_inopen, pk + C * ALT_SIZE, NB32_VEC_ROUNDmK, NB32_VEC_ROUND, PK_SEED_SIZE);
 8007d2e:	2320      	movs	r3, #32
 8007d30:	f506 51fa 	add.w	r1, r6, #8000	@ 0x1f40
 8007d34:	483b      	ldr	r0, [pc, #236]	@ (8007e24 <crypto_sign_open+0x298>)
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	3108      	adds	r1, #8
 8007d3a:	2358      	movs	r3, #88	@ 0x58
 8007d3c:	2240      	movs	r2, #64	@ 0x40
 8007d3e:	f7fc fd09 	bl	8004754 <expandATF_vec_copy>
  /* Extract and vectorize corresponding ATF for challenge <C*/
  for (i = 0; i < LEN; i++)
 8007d42:	f8df e0fc 	ldr.w	lr, [pc, #252]	@ 8007e40 <crypto_sign_open+0x2b4>
 8007d46:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
 8007d4a:	2000      	movs	r0, #0
    for (r = 0; r < K; r++)
      atfs_inopen[i * NB32_VEC_ROUND + r + ROUND - K] = ((uint32_t *)(pk + (ALT_SIZE * chg_val[r])))[i];
 8007d4c:	f44f 7c8f 	mov.w	ip, #286	@ 0x11e
    for (r = 0; r < K; r++)
 8007d50:	464a      	mov	r2, r9
 8007d52:	4671      	mov	r1, lr
      atfs_inopen[i * NB32_VEC_ROUND + r + ROUND - K] = ((uint32_t *)(pk + (ALT_SIZE * chg_val[r])))[i];
 8007d54:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8007d58:	fb0c 0303 	mla	r3, ip, r3, r0
    for (r = 0; r < K; r++)
 8007d5c:	42aa      	cmp	r2, r5
      atfs_inopen[i * NB32_VEC_ROUND + r + ROUND - K] = ((uint32_t *)(pk + (ALT_SIZE * chg_val[r])))[i];
 8007d5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8007d62:	f841 3f04 	str.w	r3, [r1, #4]!
    for (r = 0; r < K; r++)
 8007d66:	d1f5      	bne.n	8007d54 <crypto_sign_open+0x1c8>
  for (i = 0; i < LEN; i++)
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f5b0 7f8f 	cmp.w	r0, #286	@ 0x11e
 8007d6e:	f50e 7eb0 	add.w	lr, lr, #352	@ 0x160
 8007d72:	d1ed      	bne.n	8007d50 <crypto_sign_open+0x1c4>

  actingOnATFS(atfs_inopen, atfs_inopen, cols_inopen);
 8007d74:	492b      	ldr	r1, [pc, #172]	@ (8007e24 <crypto_sign_open+0x298>)
 8007d76:	4a2e      	ldr	r2, [pc, #184]	@ (8007e30 <crypto_sign_open+0x2a4>)
 8007d78:	4d2e      	ldr	r5, [pc, #184]	@ (8007e34 <crypto_sign_open+0x2a8>)
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	f7fb fbf2 	bl	8003564 <actingOnATFS>

  /* Preparing Hashing of ROUND-K ATF */
  char_ptr = hash_inopen + MSG_HASH_SIZE;
  for (r = 0; r < ROUND - K; r++)
 8007d80:	f50d 7b6a 	add.w	fp, sp, #936	@ 0x3a8
    memcpy(char_ptr + chg_c[r] * ALT_SIZE, atfs_inopen + r * LEN, sizeof(uint32_t) * LEN);
 8007d84:	f44f 668f 	mov.w	r6, #1144	@ 0x478
 8007d88:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	fb06 5000 	mla	r0, r6, r0, r5
 8007d92:	f44f 628f 	mov.w	r2, #1144	@ 0x478
 8007d96:	f004 fbfa 	bl	800c58e <memcpy>
  for (r = 0; r < ROUND - K; r++)
 8007d9a:	45d8      	cmp	r8, fp
 8007d9c:	f507 678f 	add.w	r7, r7, #1144	@ 0x478
 8007da0:	d1f2      	bne.n	8007d88 <crypto_sign_open+0x1fc>
 8007da2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8007e44 <crypto_sign_open+0x2b8>
 8007da6:	af16      	add	r7, sp, #88	@ 0x58

  /* Preparing Hashing with the K last ATF */
  for (r = ROUND - K; r < ROUND; r++)
    memcpy(char_ptr + chg_nc[r - ROUND + K] * ALT_SIZE, atfs_inopen + r * LEN, sizeof(uint32_t) * LEN);
 8007da8:	f44f 668f 	mov.w	r6, #1144	@ 0x478
 8007dac:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007db0:	4641      	mov	r1, r8
 8007db2:	f44f 628f 	mov.w	r2, #1144	@ 0x478
 8007db6:	fb06 5000 	mla	r0, r6, r0, r5
 8007dba:	f004 fbe8 	bl	800c58e <memcpy>
  for (r = ROUND - K; r < ROUND; r++)
 8007dbe:	454f      	cmp	r7, r9
 8007dc0:	f508 688f 	add.w	r8, r8, #1144	@ 0x478
 8007dc4:	d1f2      	bne.n	8007dac <crypto_sign_open+0x220>

  hashArray(hash_inopen, MSG_HASH_SIZE, m, *mlen);
 8007dc6:	9b06      	ldr	r3, [sp, #24]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	9b07      	ldr	r3, [sp, #28]
 8007dcc:	4d13      	ldr	r5, [pc, #76]	@ (8007e1c <crypto_sign_open+0x290>)
  hashArray(chk, CHLG_SIZE, hash_inopen, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 8007dce:	4e12      	ldr	r6, [pc, #72]	@ (8007e18 <crypto_sign_open+0x28c>)
  hashArray(hash_inopen, MSG_HASH_SIZE, m, *mlen);
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  hashArray(chk, CHLG_SIZE, hash_inopen, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 8007dda:	2700      	movs	r7, #0
  hashArray(hash_inopen, MSG_HASH_SIZE, m, *mlen);
 8007ddc:	2220      	movs	r2, #32
 8007dde:	2300      	movs	r3, #0
 8007de0:	f7fc fb80 	bl	80044e4 <hashArray>
  hashArray(chk, CHLG_SIZE, hash_inopen, ALT_SIZE * ROUND + MSG_HASH_SIZE);
 8007de4:	2220      	movs	r2, #32
 8007de6:	2300      	movs	r3, #0
 8007de8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007dec:	9500      	str	r5, [sp, #0]
 8007dee:	a808      	add	r0, sp, #32
 8007df0:	f7fc fb78 	bl	80044e4 <hashArray>

  /* Verfication */
  for (i = 0; i < CHLG_SIZE; i++)
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	aa08      	add	r2, sp, #32
 8007df8:	3b01      	subs	r3, #1
    correct |= (sm[i] != chk[i]);
 8007dfa:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007dfe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8007e02:	4288      	cmp	r0, r1
 8007e04:	bf18      	it	ne
 8007e06:	f044 0401 	orrne.w	r4, r4, #1
  for (i = 0; i < CHLG_SIZE; i++)
 8007e0a:	4552      	cmp	r2, sl
 8007e0c:	d1f5      	bne.n	8007dfa <crypto_sign_open+0x26e>
  #if USE_SALT == 1
  //_mm_free(seeds_sig);
  #endif

  return correct;
}
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f60d 7d94 	addw	sp, sp, #3988	@ 0xf94
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	00017780 	.word	0x00017780
 8007e1c:	c0100f40 	.word	0xc0100f40
 8007e20:	ffffc1c8 	.word	0xffffc1c8
 8007e24:	c00d9da0 	.word	0xc00d9da0
 8007e28:	c00e4820 	.word	0xc00e4820
 8007e2c:	c00f27d8 	.word	0xc00f27d8
 8007e30:	c00f26e0 	.word	0xc00f26e0
 8007e34:	c0100f60 	.word	0xc0100f60
 8007e38:	c00f26dc 	.word	0xc00f26dc
 8007e3c:	c0101038 	.word	0xc0101038
 8007e40:	c00d9e94 	.word	0xc00d9e94
 8007e44:	c00eb2b0 	.word	0xc00eb2b0

08007e48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007e48:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8007e4a:	4b31      	ldr	r3, [pc, #196]	@ (8007f10 <HAL_FMC_MspInit+0xc8>)
static void HAL_FMC_MspInit(void){
 8007e4c:	b089      	sub	sp, #36	@ 0x24
  if (FMC_Initialized) {
 8007e4e:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8007e50:	2200      	movs	r2, #0
 8007e52:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
 8007e54:	2c00      	cmp	r4, #0
 8007e56:	d159      	bne.n	8007f0c <HAL_FMC_MspInit+0xc4>
    return;
  }
  FMC_Initialized = 1;

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007e58:	4a2e      	ldr	r2, [pc, #184]	@ (8007f14 <HAL_FMC_MspInit+0xcc>)
 8007e5a:	9401      	str	r4, [sp, #4]
  FMC_Initialized = 1;
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6019      	str	r1, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8007e60:	6b93      	ldr	r3, [r2, #56]	@ 0x38
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e62:	482d      	ldr	r0, [pc, #180]	@ (8007f18 <HAL_FMC_MspInit+0xd0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007e64:	430b      	orrs	r3, r1
 8007e66:	6393      	str	r3, [r2, #56]	@ 0x38
 8007e68:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e6e:	2603      	movs	r6, #3
 8007e70:	250c      	movs	r5, #12
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8007e72:	f64f 7283 	movw	r2, #65411	@ 0xff83
  __HAL_RCC_FMC_CLK_ENABLE();
 8007e76:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e78:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin|D2_Pin|FMC_NWE_Pin
                          |D3_Pin|FMC_NOE_Pin|D1_Pin|D15_Pin
                          |D0_Pin|D14_Pin|D13_Pin|A17_Pin
                          |A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e80:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e82:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e86:	f001 fc07 	bl	8009698 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e8a:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e8e:	4823      	ldr	r0, [pc, #140]	@ (8007f1c <HAL_FMC_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007e90:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e92:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e94:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e98:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e9c:	f001 fbfc 	bl	8009698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ea0:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea2:	481f      	ldr	r0, [pc, #124]	@ (8007f20 <HAL_FMC_MspInit+0xd8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ea4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea8:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007eac:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eb0:	f001 fbf2 	bl	8009698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|FMC_NE2_Pin|SDCLK_Pin|A11_Pin
 8007eb4:	f248 333f 	movw	r3, #33599	@ 0x833f
                          |A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007eb8:	481a      	ldr	r0, [pc, #104]	@ (8007f24 <HAL_FMC_MspInit+0xdc>)
  GPIO_InitStruct.Pin = SDNCAS_Pin|FMC_NE2_Pin|SDCLK_Pin|A11_Pin
 8007eba:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ebc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebe:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007ec2:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ec6:	f001 fbe7 	bl	8009698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8007eca:	f240 63ff 	movw	r3, #1791	@ 0x6ff
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007ece:	4816      	ldr	r0, [pc, #88]	@ (8007f28 <HAL_FMC_MspInit+0xe0>)
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8007ed0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007ed2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007ed8:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007edc:	f001 fbdc 	bl	8009698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8007ee0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ee4:	4811      	ldr	r0, [pc, #68]	@ (8007f2c <HAL_FMC_MspInit+0xe4>)
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8007ee6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ee8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eea:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007eee:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ef2:	f001 fbd1 	bl	8009698 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8007ef6:	f64f 732c 	movw	r3, #65324	@ 0xff2c
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007efa:	480d      	ldr	r0, [pc, #52]	@ (8007f30 <HAL_FMC_MspInit+0xe8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efc:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007efe:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f00:	e9cd 4604 	strd	r4, r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007f04:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8007f06:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007f08:	f001 fbc6 	bl	8009698 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007f0c:	b009      	add	sp, #36	@ 0x24
 8007f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f10:	20000b24 	.word	0x20000b24
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	40020c00 	.word	0x40020c00
 8007f20:	40020400 	.word	0x40020400
 8007f24:	40021800 	.word	0x40021800
 8007f28:	40022000 	.word	0x40022000
 8007f2c:	40021400 	.word	0x40021400
 8007f30:	40021c00 	.word	0x40021c00

08007f34 <HAL_MspInit>:
{
 8007f34:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <HAL_MspInit+0x38>)
 8007f38:	2100      	movs	r1, #0
 8007f3a:	9100      	str	r1, [sp, #0]
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f42:	645a      	str	r2, [r3, #68]	@ 0x44
 8007f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f46:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007f4a:	9200      	str	r2, [sp, #0]
 8007f4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f4e:	9101      	str	r1, [sp, #4]
 8007f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007f56:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007f62:	2007      	movs	r0, #7
}
 8007f64:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007f66:	f001 b9dd 	b.w	8009324 <HAL_NVIC_SetPriorityGrouping>
 8007f6a:	bf00      	nop
 8007f6c:	40023800 	.word	0x40023800

08007f70 <HAL_ADC_MspInit>:
{
 8007f70:	b500      	push	{lr}
  if(hadc->Instance==ADC3)
 8007f72:	4a19      	ldr	r2, [pc, #100]	@ (8007fd8 <HAL_ADC_MspInit+0x68>)
 8007f74:	6801      	ldr	r1, [r0, #0]
{
 8007f76:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f78:	2300      	movs	r3, #0
  if(hadc->Instance==ADC3)
 8007f7a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f80:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007f84:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC3)
 8007f86:	d002      	beq.n	8007f8e <HAL_ADC_MspInit+0x1e>
}
 8007f88:	b009      	add	sp, #36	@ 0x24
 8007f8a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007f8e:	f502 328b 	add.w	r2, r2, #71168	@ 0x11600
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8007f96:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8007f9a:	6450      	str	r0, [r2, #68]	@ 0x44
 8007f9c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8007f9e:	f400 6080 	and.w	r0, r0, #1024	@ 0x400
 8007fa2:	9000      	str	r0, [sp, #0]
 8007fa4:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8007faa:	480c      	ldr	r0, [pc, #48]	@ (8007fdc <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007fac:	f043 0320 	orr.w	r3, r3, #32
 8007fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fb2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8007fb4:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8007fd0 <HAL_ADC_MspInit+0x60>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8007fbe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8007fc0:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007fc4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8007fc6:	f001 fb67 	bl	8009698 <HAL_GPIO_Init>
}
 8007fca:	b009      	add	sp, #36	@ 0x24
 8007fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fd0:	00000400 	.word	0x00000400
 8007fd4:	00000003 	.word	0x00000003
 8007fd8:	40012200 	.word	0x40012200
 8007fdc:	40021400 	.word	0x40021400

08007fe0 <HAL_ETH_MspInit>:
{
 8007fe0:	b570      	push	{r4, r5, r6, lr}
  if(heth->Instance==ETH)
 8007fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8008110 <HAL_ETH_MspInit+0x130>)
 8007fe4:	6802      	ldr	r2, [r0, #0]
{
 8007fe6:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe8:	2400      	movs	r4, #0
  if(heth->Instance==ETH)
 8007fea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fec:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8007ff0:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8007ff4:	940c      	str	r4, [sp, #48]	@ 0x30
  if(heth->Instance==ETH)
 8007ff6:	d001      	beq.n	8007ffc <HAL_ETH_MspInit+0x1c>
}
 8007ff8:	b00e      	add	sp, #56	@ 0x38
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8007ffc:	f5a3 4390 	sub.w	r3, r3, #18432	@ 0x4800
 8008000:	9400      	str	r4, [sp, #0]
 8008002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008004:	4843      	ldr	r0, [pc, #268]	@ (8008114 <HAL_ETH_MspInit+0x134>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8008006:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800800a:	631a      	str	r2, [r3, #48]	@ 0x30
 800800c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800800e:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8008012:	9200      	str	r2, [sp, #0]
 8008014:	9a00      	ldr	r2, [sp, #0]
 8008016:	9401      	str	r4, [sp, #4]
 8008018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800801a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800801e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008022:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8008026:	9201      	str	r2, [sp, #4]
 8008028:	9a01      	ldr	r2, [sp, #4]
 800802a:	9402      	str	r4, [sp, #8]
 800802c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800802e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008032:	631a      	str	r2, [r3, #48]	@ 0x30
 8008034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008036:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800803a:	9202      	str	r2, [sp, #8]
 800803c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800803e:	9403      	str	r4, [sp, #12]
 8008040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008042:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008046:	631a      	str	r2, [r3, #48]	@ 0x30
 8008048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800804a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800804e:	9203      	str	r2, [sp, #12]
 8008050:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008052:	9404      	str	r4, [sp, #16]
 8008054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008056:	f042 0202 	orr.w	r2, r2, #2
 800805a:	631a      	str	r2, [r3, #48]	@ 0x30
 800805c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800805e:	f002 0202 	and.w	r2, r2, #2
 8008062:	9204      	str	r2, [sp, #16]
 8008064:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008066:	9405      	str	r4, [sp, #20]
 8008068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800806a:	f042 0204 	orr.w	r2, r2, #4
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008072:	f002 0204 	and.w	r2, r2, #4
 8008076:	9205      	str	r2, [sp, #20]
 8008078:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800807a:	9406      	str	r4, [sp, #24]
 800807c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	631a      	str	r2, [r3, #48]	@ 0x30
 8008084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008086:	f002 0201 	and.w	r2, r2, #1
 800808a:	9206      	str	r2, [sp, #24]
 800808c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800808e:	9407      	str	r4, [sp, #28]
 8008090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008092:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
 8008098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 800809e:	f44f 42d0 	mov.w	r2, #26624	@ 0x6800
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080a2:	250b      	movs	r5, #11
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80080a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080a6:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 80080a8:	2302      	movs	r3, #2
 80080aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ae:	2602      	movs	r6, #2
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80080b0:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080b2:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080b4:	f001 faf0 	bl	8009698 <HAL_GPIO_Init>
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80080b8:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80080ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80080be:	4816      	ldr	r0, [pc, #88]	@ (8008118 <HAL_ETH_MspInit+0x138>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080c0:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c2:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c6:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80080ca:	f001 fae5 	bl	8009698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_MDC_Pin|MII_TXD2_Pin|MII_RXD0_Pin
 80080ce:	233e      	movs	r3, #62	@ 0x3e
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080d0:	a908      	add	r1, sp, #32
 80080d2:	4812      	ldr	r0, [pc, #72]	@ (800811c <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_MDC_Pin|MII_TXD2_Pin|MII_RXD0_Pin
 80080d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d6:	e9cd 6409 	strd	r6, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080da:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080de:	f001 fadb 	bl	8009698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_MDIO_Pin|MII_RX_DV_Pin;
 80080e2:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e4:	a908      	add	r1, sp, #32
 80080e6:	480e      	ldr	r0, [pc, #56]	@ (8008120 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_MDIO_Pin|MII_RX_DV_Pin;
 80080e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ea:	e9cd 6409 	strd	r6, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080ee:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f2:	f001 fad1 	bl	8009698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 80080f6:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80080f8:	480a      	ldr	r0, [pc, #40]	@ (8008124 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 80080fa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80080fc:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fe:	e9cd 6409 	strd	r6, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008102:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008106:	f001 fac7 	bl	8009698 <HAL_GPIO_Init>
}
 800810a:	b00e      	add	sp, #56	@ 0x38
 800810c:	bd70      	pop	{r4, r5, r6, pc}
 800810e:	bf00      	nop
 8008110:	40028000 	.word	0x40028000
 8008114:	40021800 	.word	0x40021800
 8008118:	40020400 	.word	0x40020400
 800811c:	40020800 	.word	0x40020800
 8008120:	40020000 	.word	0x40020000
 8008124:	40021c00 	.word	0x40021c00

08008128 <HAL_I2C_MspInit>:
{
 8008128:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 800812a:	4b18      	ldr	r3, [pc, #96]	@ (800818c <HAL_I2C_MspInit+0x64>)
 800812c:	6802      	ldr	r2, [r0, #0]
{
 800812e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008130:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8008132:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008134:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8008138:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800813c:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 800813e:	d001      	beq.n	8008144 <HAL_I2C_MspInit+0x1c>
}
 8008140:	b009      	add	sp, #36	@ 0x24
 8008142:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008144:	4d12      	ldr	r5, [pc, #72]	@ (8008190 <HAL_I2C_MspInit+0x68>)
 8008146:	9400      	str	r4, [sp, #0]
 8008148:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800814a:	4812      	ldr	r0, [pc, #72]	@ (8008194 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800814c:	f043 0302 	orr.w	r3, r3, #2
 8008150:	632b      	str	r3, [r5, #48]	@ 0x30
 8008152:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 800815a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800815e:	2312      	movs	r3, #18
 8008160:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008164:	2301      	movs	r3, #1
 8008166:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008168:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800816a:	2304      	movs	r3, #4
 800816c:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800816e:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008170:	f001 fa92 	bl	8009698 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008174:	9401      	str	r4, [sp, #4]
 8008176:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8008178:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800817c:	642b      	str	r3, [r5, #64]	@ 0x40
 800817e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8008180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	9b01      	ldr	r3, [sp, #4]
}
 8008188:	b009      	add	sp, #36	@ 0x24
 800818a:	bd30      	pop	{r4, r5, pc}
 800818c:	40005400 	.word	0x40005400
 8008190:	40023800 	.word	0x40023800
 8008194:	40020400 	.word	0x40020400

08008198 <HAL_LTDC_MspInit>:
{
 8008198:	b5d0      	push	{r4, r6, r7, lr}
 800819a:	4604      	mov	r4, r0
 800819c:	b096      	sub	sp, #88	@ 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800819e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081a0:	2230      	movs	r2, #48	@ 0x30
 80081a2:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80081a8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80081ac:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081ae:	f004 f963 	bl	800c478 <memset>
  if(hltdc->Instance==LTDC)
 80081b2:	4b33      	ldr	r3, [pc, #204]	@ (8008280 <HAL_LTDC_MspInit+0xe8>)
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d001      	beq.n	80081be <HAL_LTDC_MspInit+0x26>
}
 80081ba:	b016      	add	sp, #88	@ 0x58
 80081bc:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80081be:	2108      	movs	r1, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 260;
 80081c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80081c4:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081c6:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80081c8:	910a      	str	r1, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 260;
 80081ca:	920e      	str	r2, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80081cc:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081ce:	f002 feaf 	bl	800af30 <HAL_RCCEx_PeriphCLKConfig>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d151      	bne.n	800827a <HAL_LTDC_MspInit+0xe2>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80081d6:	4b2b      	ldr	r3, [pc, #172]	@ (8008284 <HAL_LTDC_MspInit+0xec>)
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80081d8:	482b      	ldr	r0, [pc, #172]	@ (8008288 <HAL_LTDC_MspInit+0xf0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80081da:	2200      	movs	r2, #0
 80081dc:	9200      	str	r2, [sp, #0]
 80081de:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80081e0:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80081e4:	6459      	str	r1, [r3, #68]	@ 0x44
 80081e6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80081e8:	f001 6180 	and.w	r1, r1, #67108864	@ 0x4000000
 80081ec:	9100      	str	r1, [sp, #0]
 80081ee:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80081f0:	9201      	str	r2, [sp, #4]
 80081f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80081f4:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80081f8:	6319      	str	r1, [r3, #48]	@ 0x30
 80081fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80081fc:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8008200:	9101      	str	r1, [sp, #4]
 8008202:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8008204:	9202      	str	r2, [sp, #8]
 8008206:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008208:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 800820c:	6319      	str	r1, [r3, #48]	@ 0x30
 800820e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008210:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
 8008214:	9102      	str	r1, [sp, #8]
 8008216:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800821c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008220:	631a      	str	r2, [r3, #48]	@ 0x30
 8008222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008228:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800822a:	240e      	movs	r4, #14
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B0_Pin|LCD_B2_Pin|LCD_B3_Pin
 800822c:	2600      	movs	r6, #0
 800822e:	2700      	movs	r7, #0
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8008230:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008232:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008234:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B0_Pin|LCD_B2_Pin|LCD_B3_Pin
 8008236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800823a:	2302      	movs	r3, #2
 800823c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008240:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008244:	f001 fa28 	bl	8009698 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8008248:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = LCD_ENB_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800824a:	22ff      	movs	r2, #255	@ 0xff
 800824c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800824e:	480f      	ldr	r0, [pc, #60]	@ (800828c <HAL_LTDC_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008250:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = LCD_ENB_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8008252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008256:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800825a:	f001 fa1d 	bl	8009698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800825e:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8008262:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008264:	480a      	ldr	r0, [pc, #40]	@ (8008290 <HAL_LTDC_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008266:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008268:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800826a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800826e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008272:	f001 fa11 	bl	8009698 <HAL_GPIO_Init>
}
 8008276:	b016      	add	sp, #88	@ 0x58
 8008278:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800827a:	f7fe fd2d 	bl	8006cd8 <Error_Handler>
 800827e:	e7aa      	b.n	80081d6 <HAL_LTDC_MspInit+0x3e>
 8008280:	40016800 	.word	0x40016800
 8008284:	40023800 	.word	0x40023800
 8008288:	40022400 	.word	0x40022400
 800828c:	40022800 	.word	0x40022800
 8008290:	40022000 	.word	0x40022000
 8008294:	00000000 	.word	0x00000000

08008298 <HAL_UART_MspInit>:
{
 8008298:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800829a:	4a1b      	ldr	r2, [pc, #108]	@ (8008308 <HAL_UART_MspInit+0x70>)
 800829c:	6801      	ldr	r1, [r0, #0]
{
 800829e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80082a2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80082ac:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80082ae:	d002      	beq.n	80082b6 <HAL_UART_MspInit+0x1e>
}
 80082b0:	b009      	add	sp, #36	@ 0x24
 80082b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80082b6:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 80082be:	f040 0010 	orr.w	r0, r0, #16
 80082c2:	6450      	str	r0, [r2, #68]	@ 0x44
 80082c4:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 80082c6:	f000 0010 	and.w	r0, r0, #16
 80082ca:	9000      	str	r0, [sp, #0]
 80082cc:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d2:	480e      	ldr	r0, [pc, #56]	@ (800830c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80082da:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS232_IrDA_TX_Pin;
 80082dc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8008300 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80082e8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS232_IrDA_TX_Pin;
 80082ea:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ee:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80082f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f2:	f001 f9d1 	bl	8009698 <HAL_GPIO_Init>
}
 80082f6:	b009      	add	sp, #36	@ 0x24
 80082f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80082fc:	f3af 8000 	nop.w
 8008300:	00000600 	.word	0x00000600
 8008304:	00000002 	.word	0x00000002
 8008308:	40011000 	.word	0x40011000
 800830c:	40020000 	.word	0x40020000

08008310 <HAL_HCD_MspInit>:
{
 8008310:	b530      	push	{r4, r5, lr}
  if(hhcd->Instance==USB_OTG_FS)
 8008312:	6803      	ldr	r3, [r0, #0]
{
 8008314:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008316:	2400      	movs	r4, #0
  if(hhcd->Instance==USB_OTG_FS)
 8008318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800831c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8008320:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8008324:	9406      	str	r4, [sp, #24]
  if(hhcd->Instance==USB_OTG_FS)
 8008326:	d001      	beq.n	800832c <HAL_HCD_MspInit+0x1c>
}
 8008328:	b009      	add	sp, #36	@ 0x24
 800832a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800832c:	4d16      	ldr	r5, [pc, #88]	@ (8008388 <HAL_HCD_MspInit+0x78>)
 800832e:	9400      	str	r4, [sp, #0]
 8008330:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008332:	4816      	ldr	r0, [pc, #88]	@ (800838c <HAL_HCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	632b      	str	r3, [r5, #48]	@ 0x30
 800833a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8008342:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008346:	2302      	movs	r3, #2
 8008348:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800834c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800834e:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008350:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008352:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008354:	f001 f9a0 	bl	8009698 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008358:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835e:	636b      	str	r3, [r5, #52]	@ 0x34
 8008360:	9401      	str	r4, [sp, #4]
 8008362:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8008364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008368:	646b      	str	r3, [r5, #68]	@ 0x44
 800836a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800836c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008370:	4622      	mov	r2, r4
 8008372:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008374:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008376:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008378:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800837a:	f000 ffe5 	bl	8009348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800837e:	2043      	movs	r0, #67	@ 0x43
 8008380:	f001 f81e 	bl	80093c0 <HAL_NVIC_EnableIRQ>
}
 8008384:	b009      	add	sp, #36	@ 0x24
 8008386:	bd30      	pop	{r4, r5, pc}
 8008388:	40023800 	.word	0x40023800
 800838c:	40020000 	.word	0x40020000

08008390 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8008390:	f7ff bd5a 	b.w	8007e48 <HAL_FMC_MspInit>

08008394 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008394:	f7ff bd58 	b.w	8007e48 <HAL_FMC_MspInit>

08008398 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008398:	f7ff bd56 	b.w	8007e48 <HAL_FMC_MspInit>
 800839c:	0000      	movs	r0, r0
	...

080083a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80083a0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80083a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008450 <HAL_SAI_MspInit+0xb0>)
 80083a4:	6803      	ldr	r3, [r0, #0]
 80083a6:	4293      	cmp	r3, r2
{
 80083a8:	b088      	sub	sp, #32
    if(hsai->Instance==SAI1_Block_A)
 80083aa:	d004      	beq.n	80083b6 <HAL_SAI_MspInit+0x16>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI1_Block_B)
 80083ac:	4a29      	ldr	r2, [pc, #164]	@ (8008454 <HAL_SAI_MspInit+0xb4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d024      	beq.n	80083fc <HAL_SAI_MspInit+0x5c>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

    }
}
 80083b2:	b008      	add	sp, #32
 80083b4:	bd10      	pop	{r4, pc}
    if (SAI1_client == 0)
 80083b6:	4b28      	ldr	r3, [pc, #160]	@ (8008458 <HAL_SAI_MspInit+0xb8>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4604      	mov	r4, r0
 80083bc:	b952      	cbnz	r2, 80083d4 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80083be:	4927      	ldr	r1, [pc, #156]	@ (800845c <HAL_SAI_MspInit+0xbc>)
 80083c0:	9200      	str	r2, [sp, #0]
 80083c2:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 80083c4:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80083c8:	6448      	str	r0, [r1, #68]	@ 0x44
 80083ca:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80083cc:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 80083d0:	9100      	str	r1, [sp, #0]
 80083d2:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 80083d4:	4822      	ldr	r0, [pc, #136]	@ (8008460 <HAL_SAI_MspInit+0xc0>)
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 80083d6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8008440 <HAL_SAI_MspInit+0xa0>
 80083da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083de:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8008448 <HAL_SAI_MspInit+0xa8>
    SAI1_client ++;
 80083e2:	3201      	adds	r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 80083e6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80083e8:	2306      	movs	r3, #6
 80083ea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 80083ec:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 80083f0:	f001 f952 	bl	8009698 <HAL_GPIO_Init>
    if(hsai->Instance==SAI1_Block_B)
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	4a17      	ldr	r2, [pc, #92]	@ (8008454 <HAL_SAI_MspInit+0xb4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d1da      	bne.n	80083b2 <HAL_SAI_MspInit+0x12>
      if (SAI1_client == 0)
 80083fc:	4b16      	ldr	r3, [pc, #88]	@ (8008458 <HAL_SAI_MspInit+0xb8>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	b952      	cbnz	r2, 8008418 <HAL_SAI_MspInit+0x78>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008402:	4916      	ldr	r1, [pc, #88]	@ (800845c <HAL_SAI_MspInit+0xbc>)
 8008404:	9201      	str	r2, [sp, #4]
 8008406:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 8008408:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 800840c:	6448      	str	r0, [r1, #68]	@ 0x44
 800840e:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008410:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 8008414:	9101      	str	r1, [sp, #4]
 8008416:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = SAI1_MCLKB_Pin|SAI1_SDB_Pin|SAI1_FSB_Pin|SAI1_SCKB_Pin;
 8008418:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 800841c:	2102      	movs	r1, #2
 800841e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008422:	2000      	movs	r0, #0
 8008424:	2100      	movs	r1, #0
 8008426:	e9cd 0104 	strd	r0, r1, [sp, #16]
    SAI1_client ++;
 800842a:	3201      	adds	r2, #1
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800842c:	480d      	ldr	r0, [pc, #52]	@ (8008464 <HAL_SAI_MspInit+0xc4>)
    SAI1_client ++;
 800842e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008430:	2406      	movs	r4, #6
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008432:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008434:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008436:	f001 f92f 	bl	8009698 <HAL_GPIO_Init>
}
 800843a:	b008      	add	sp, #32
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	00000040 	.word	0x00000040
 8008444:	00000002 	.word	0x00000002
	...
 8008450:	40015804 	.word	0x40015804
 8008454:	40015824 	.word	0x40015824
 8008458:	20000b20 	.word	0x20000b20
 800845c:	40023800 	.word	0x40023800
 8008460:	40021000 	.word	0x40021000
 8008464:	40021400 	.word	0x40021400

08008468 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008468:	e7fe      	b.n	8008468 <NMI_Handler>
 800846a:	bf00      	nop

0800846c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800846c:	e7fe      	b.n	800846c <HardFault_Handler>
 800846e:	bf00      	nop

08008470 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008470:	e7fe      	b.n	8008470 <MemManage_Handler>
 8008472:	bf00      	nop

08008474 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008474:	e7fe      	b.n	8008474 <BusFault_Handler>
 8008476:	bf00      	nop

08008478 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008478:	e7fe      	b.n	8008478 <UsageFault_Handler>
 800847a:	bf00      	nop

0800847c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop

08008484 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop

08008488 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008488:	f000 bdc6 	b.w	8009018 <HAL_IncTick>

0800848c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800848c:	4801      	ldr	r0, [pc, #4]	@ (8008494 <OTG_FS_IRQHandler+0x8>)
 800848e:	f001 ba8f 	b.w	80099b0 <HAL_HCD_IRQHandler>
 8008492:	bf00      	nop
 8008494:	20000208 	.word	0x20000208

08008498 <_exit>:
  errno = EINVAL;
  return -1;
}

void _exit (int status)
{
 8008498:	b508      	push	{r3, lr}
  errno = EINVAL;
 800849a:	f004 f84b 	bl	800c534 <__errno>
 800849e:	2316      	movs	r3, #22
 80084a0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80084a2:	e7fe      	b.n	80084a2 <_exit+0xa>

080084a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084a4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084a6:	1e16      	subs	r6, r2, #0
 80084a8:	dd07      	ble.n	80084ba <_read+0x16>
 80084aa:	460c      	mov	r4, r1
 80084ac:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80084ae:	f3af 8000 	nop.w
 80084b2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084b6:	42a5      	cmp	r5, r4
 80084b8:	d1f9      	bne.n	80084ae <_read+0xa>
  }

  return len;
}
 80084ba:	4630      	mov	r0, r6
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	bf00      	nop

080084c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80084c0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084c2:	1e16      	subs	r6, r2, #0
 80084c4:	dd07      	ble.n	80084d6 <_write+0x16>
 80084c6:	460c      	mov	r4, r1
 80084c8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80084ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80084ce:	f7fd fee1 	bl	8006294 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084d2:	42ac      	cmp	r4, r5
 80084d4:	d1f9      	bne.n	80084ca <_write+0xa>
  }
  return len;
}
 80084d6:	4630      	mov	r0, r6
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	bf00      	nop

080084dc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop

080084e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80084e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084e8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80084ea:	2000      	movs	r0, #0
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop

080084f0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80084f0:	2001      	movs	r0, #1
 80084f2:	4770      	bx	lr

080084f4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80084f4:	2000      	movs	r0, #0
 80084f6:	4770      	bx	lr

080084f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80084f8:	490c      	ldr	r1, [pc, #48]	@ (800852c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80084fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008530 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80084fc:	680b      	ldr	r3, [r1, #0]
{
 80084fe:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008500:	4c0c      	ldr	r4, [pc, #48]	@ (8008534 <_sbrk+0x3c>)
 8008502:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8008504:	b12b      	cbz	r3, 8008512 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008506:	4418      	add	r0, r3
 8008508:	4290      	cmp	r0, r2
 800850a:	d807      	bhi.n	800851c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800850c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800850e:	4618      	mov	r0, r3
 8008510:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <_sbrk+0x40>)
 8008514:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8008516:	4418      	add	r0, r3
 8008518:	4290      	cmp	r0, r2
 800851a:	d9f7      	bls.n	800850c <_sbrk+0x14>
    errno = ENOMEM;
 800851c:	f004 f80a 	bl	800c534 <__errno>
 8008520:	230c      	movs	r3, #12
 8008522:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008528:	4618      	mov	r0, r3
 800852a:	bd10      	pop	{r4, pc}
 800852c:	20000b28 	.word	0x20000b28
 8008530:	20030000 	.word	0x20030000
 8008534:	00000400 	.word	0x00000400
 8008538:	20000c80 	.word	0x20000c80

0800853c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800853c:	4a03      	ldr	r2, [pc, #12]	@ (800854c <SystemInit+0x10>)
 800853e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8008542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008546:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800854a:	4770      	bx	lr
 800854c:	e000ed00 	.word	0xe000ed00

08008550 <KeccakF1600_StatePermute>:

/**
 * Function that computes the Keccak-f[1600] permutation on the given state.
 */
void KeccakF1600_StatePermute(void *state)
{
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	4603      	mov	r3, r0
 8008556:	b093      	sub	sp, #76	@ 0x4c
    unsigned int round, x, y, j, t;
    UINT8 LFSRstate = 0x01;
 8008558:	f04f 0e01 	mov.w	lr, #1
 800855c:	3328      	adds	r3, #40	@ 0x28
 800855e:	e9cd e306 	strd	lr, r3, [sp, #24]
        }

        {   /* === ρ and π steps (see [Keccak Reference, Sections 2.3.3 and 2.3.4]) === */
            tKeccakLane current, temp;
            /* Start at coordinates (1 0) */
            x = 1; y = 0;
 8008562:	f04f 0a18 	mov.w	sl, #24
 8008566:	f100 02c8 	add.w	r2, r0, #200	@ 0xc8
{
 800856a:	9004      	str	r0, [sp, #16]
 800856c:	9203      	str	r2, [sp, #12]
 800856e:	f8cd a014 	str.w	sl, [sp, #20]
            for(x=0; x<5; x++)
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	f10d 0a20 	add.w	sl, sp, #32
        u |= x[i];
 800857e:	79d8      	ldrb	r0, [r3, #7]
 8008580:	7999      	ldrb	r1, [r3, #6]
 8008582:	795a      	ldrb	r2, [r3, #5]
 8008584:	791c      	ldrb	r4, [r3, #4]
 8008586:	f893 6056 	ldrb.w	r6, [r3, #86]	@ 0x56
 800858a:	f893 e003 	ldrb.w	lr, [r3, #3]
 800858e:	f893 707f 	ldrb.w	r7, [r3, #127]	@ 0x7f
 8008592:	f893 9002 	ldrb.w	r9, [r3, #2]
 8008596:	f893 80a6 	ldrb.w	r8, [r3, #166]	@ 0xa6
 800859a:	f893 c053 	ldrb.w	ip, [r3, #83]	@ 0x53
 800859e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80085a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80085a6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80085aa:	f893 102e 	ldrb.w	r1, [r3, #46]	@ 0x2e
 80085ae:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
        u <<= 8;
 80085b2:	f3c2 4507 	ubfx	r5, r2, #16, #8
        u |= x[i];
 80085b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80085ba:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80085be:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80085c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80085c6:	f893 1057 	ldrb.w	r1, [r3, #87]	@ 0x57
 80085ca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
        u <<= 8;
 80085ce:	f3c2 4207 	ubfx	r2, r2, #16, #8
        u |= x[i];
 80085d2:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
        u <<= 8;
 80085d6:	0211      	lsls	r1, r2, #8
        u |= x[i];
 80085d8:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80085dc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80085e0:	f893 607e 	ldrb.w	r6, [r3, #126]	@ 0x7e
 80085e4:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 80085e8:	f893 407d 	ldrb.w	r4, [r3, #125]	@ 0x7d
 80085ec:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80085f0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80085f4:	f893 702b 	ldrb.w	r7, [r3, #43]	@ 0x2b
 80085f8:	f893 60a7 	ldrb.w	r6, [r3, #167]	@ 0xa7
        u <<= 8;
 80085fc:	022d      	lsls	r5, r5, #8
        u |= x[i];
 80085fe:	ea49 290e 	orr.w	r9, r9, lr, lsl #8
        u <<= 8;
 8008602:	ea45 651e 	orr.w	r5, r5, lr, lsr #24
        u |= x[i];
 8008606:	f893 e02a 	ldrb.w	lr, [r3, #42]	@ 0x2a
 800860a:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
 800860e:	ea48 2806 	orr.w	r8, r8, r6, lsl #8
 8008612:	f893 607c 	ldrb.w	r6, [r3, #124]	@ 0x7c
 8008616:	f893 0054 	ldrb.w	r0, [r3, #84]	@ 0x54
 800861a:	ea4e 2e07 	orr.w	lr, lr, r7, lsl #8
        u <<= 8;
 800861e:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
        u |= x[i];
 8008622:	f893 707b 	ldrb.w	r7, [r3, #123]	@ 0x7b
 8008626:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
 800862a:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 800862e:	785e      	ldrb	r6, [r3, #1]
        u <<= 8;
 8008630:	022d      	lsls	r5, r5, #8
        u |= x[i];
 8008632:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
        u <<= 8;
 8008636:	ea45 6519 	orr.w	r5, r5, r9, lsr #24
 800863a:	0209      	lsls	r1, r1, #8
        u |= x[i];
 800863c:	f893 9029 	ldrb.w	r9, [r3, #41]	@ 0x29
        u <<= 8;
 8008640:	ea41 611e 	orr.w	r1, r1, lr, lsr #24
        u |= x[i];
 8008644:	ea49 290e 	orr.w	r9, r9, lr, lsl #8
        u <<= 8;
 8008648:	022d      	lsls	r5, r5, #8
 800864a:	0209      	lsls	r1, r1, #8
        u |= x[i];
 800864c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
        u <<= 8;
 8008650:	ea45 6516 	orr.w	r5, r5, r6, lsr #24
 8008654:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8008658:	ea41 6119 	orr.w	r1, r1, r9, lsr #24
        u |= x[i];
 800865c:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 8008660:	4069      	eors	r1, r5
        u <<= 8;
 8008662:	0212      	lsls	r2, r2, #8
        u |= x[i];
 8008664:	f893 5052 	ldrb.w	r5, [r3, #82]	@ 0x52
 8008668:	f893 00a5 	ldrb.w	r0, [r3, #165]	@ 0xa5
        u <<= 8;
 800866c:	ea42 621c 	orr.w	r2, r2, ip, lsr #24
        u |= x[i];
 8008670:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
        u <<= 8;
 8008674:	0212      	lsls	r2, r2, #8
        u |= x[i];
 8008676:	f893 c051 	ldrb.w	ip, [r3, #81]	@ 0x51
        u <<= 8;
 800867a:	ea42 6215 	orr.w	r2, r2, r5, lsr #24
        u |= x[i];
 800867e:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        u <<= 8;
 8008682:	0212      	lsls	r2, r2, #8
 8008684:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8008688:	ea42 621c 	orr.w	r2, r2, ip, lsr #24
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 800868c:	404a      	eors	r2, r1
        u <<= 8;
 800868e:	0224      	lsls	r4, r4, #8
        u |= x[i];
 8008690:	f893 107a 	ldrb.w	r1, [r3, #122]	@ 0x7a
 8008694:	f893 5079 	ldrb.w	r5, [r3, #121]	@ 0x79
        u <<= 8;
 8008698:	ea44 6417 	orr.w	r4, r4, r7, lsr #24
        u |= x[i];
 800869c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
        u <<= 8;
 80086a0:	0224      	lsls	r4, r4, #8
 80086a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
        u |= x[i];
 80086a6:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
        u <<= 8;
 80086aa:	0224      	lsls	r4, r4, #8
        u |= x[i];
 80086ac:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
        u <<= 8;
 80086b0:	ea44 6415 	orr.w	r4, r4, r5, lsr #24
        u |= x[i];
 80086b4:	f893 80a4 	ldrb.w	r8, [r3, #164]	@ 0xa4
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 80086b8:	ea82 0104 	eor.w	r1, r2, r4
        u |= x[i];
 80086bc:	f893 20a3 	ldrb.w	r2, [r3, #163]	@ 0xa3
 80086c0:	f893 40a2 	ldrb.w	r4, [r3, #162]	@ 0xa2
 80086c4:	781f      	ldrb	r7, [r3, #0]
 80086c6:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
        u <<= 8;
 80086ca:	f3c0 4007 	ubfx	r0, r0, #16, #8
        u |= x[i];
 80086ce:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
        u <<= 8;
 80086d2:	0200      	lsls	r0, r0, #8
        u |= x[i];
 80086d4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
        u <<= 8;
 80086d8:	ea40 6012 	orr.w	r0, r0, r2, lsr #24
        u |= x[i];
 80086dc:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80086e0:	ea47 2606 	orr.w	r6, r7, r6, lsl #8
 80086e4:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 80086e8:	4072      	eors	r2, r6
        u |= x[i];
 80086ea:	f893 6050 	ldrb.w	r6, [r3, #80]	@ 0x50
 80086ee:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 80086f2:	4072      	eors	r2, r6
        u <<= 8;
 80086f4:	0200      	lsls	r0, r0, #8
        u |= x[i];
 80086f6:	f893 60a1 	ldrb.w	r6, [r3, #161]	@ 0xa1
        u <<= 8;
 80086fa:	ea40 6014 	orr.w	r0, r0, r4, lsr #24
 80086fe:	0200      	lsls	r0, r0, #8
        u |= x[i];
 8008700:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
        u <<= 8;
 8008704:	ea40 6014 	orr.w	r0, r0, r4, lsr #24
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 8008708:	4041      	eors	r1, r0
 800870a:	f8ca 1004 	str.w	r1, [sl, #4]
        u |= x[i];
 800870e:	f893 1078 	ldrb.w	r1, [r3, #120]	@ 0x78
 8008712:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 8008716:	404a      	eors	r2, r1
        u |= x[i];
 8008718:	f893 10a0 	ldrb.w	r1, [r3, #160]	@ 0xa0
            for(x=0; x<5; x++)
 800871c:	3308      	adds	r3, #8
        u |= x[i];
 800871e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 8008722:	404a      	eors	r2, r1
            for(x=0; x<5; x++)
 8008724:	455b      	cmp	r3, fp
                C[x] = readLane(x, 0) ^ readLane(x, 1) ^ readLane(x, 2) ^ readLane(x, 3) ^ readLane(x, 4);
 8008726:	f8ca 2000 	str.w	r2, [sl]
 800872a:	f10a 0a08 	add.w	sl, sl, #8
            for(x=0; x<5; x++)
 800872e:	f47f af26 	bne.w	800857e <KeccakF1600_StatePermute+0x2e>
 8008732:	9f04      	ldr	r7, [sp, #16]
            for(x=0; x<5; x++) {
 8008734:	f04f 0e00 	mov.w	lr, #0
                D = C[(x+4)%5] ^ ROL64(C[(x+1)%5], 1);
 8008738:	4cc8      	ldr	r4, [pc, #800]	@ (8008a5c <KeccakF1600_StatePermute+0x50c>)
        x[i] ^= u;
 800873a:	f897 a028 	ldrb.w	sl, [r7, #40]	@ 0x28
 800873e:	f897 8029 	ldrb.w	r8, [r7, #41]	@ 0x29
 8008742:	f897 602a 	ldrb.w	r6, [r7, #42]	@ 0x2a
 8008746:	793d      	ldrb	r5, [r7, #4]
 8008748:	f897 b000 	ldrb.w	fp, [r7]
 800874c:	f897 9001 	ldrb.w	r9, [r7, #1]
 8008750:	f897 c002 	ldrb.w	ip, [r7, #2]
                D = C[(x+4)%5] ^ ROL64(C[(x+1)%5], 1);
 8008754:	f10e 0304 	add.w	r3, lr, #4
 8008758:	fba4 2103 	umull	r2, r1, r4, r3
 800875c:	f021 0203 	bic.w	r2, r1, #3
 8008760:	eb02 0291 	add.w	r2, r2, r1, lsr #2
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	aa12      	add	r2, sp, #72	@ 0x48
 8008768:	f10e 0e01 	add.w	lr, lr, #1
 800876c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008770:	e953 010a 	ldrd	r0, r1, [r3, #-40]	@ 0x28
 8008774:	fba4 320e 	umull	r3, r2, r4, lr
 8008778:	f022 0303 	bic.w	r3, r2, #3
 800877c:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 8008780:	ebae 0303 	sub.w	r3, lr, r3
 8008784:	aa12      	add	r2, sp, #72	@ 0x48
 8008786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800878a:	e953 430a 	ldrd	r4, r3, [r3, #-40]	@ 0x28
 800878e:	0062      	lsls	r2, r4, #1
 8008790:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
 800879a:	404b      	eors	r3, r1
        x[i] ^= u;
 800879c:	78f9      	ldrb	r1, [r7, #3]
 800879e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
                D = C[(x+4)%5] ^ ROL64(C[(x+1)%5], 1);
 80087a2:	4042      	eors	r2, r0
        x[i] ^= u;
 80087a4:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 80087a8:	70f9      	strb	r1, [r7, #3]
 80087aa:	7979      	ldrb	r1, [r7, #5]
 80087ac:	9100      	str	r1, [sp, #0]
 80087ae:	79f9      	ldrb	r1, [r7, #7]
 80087b0:	79b8      	ldrb	r0, [r7, #6]
 80087b2:	9001      	str	r0, [sp, #4]
 80087b4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 80087b8:	71f9      	strb	r1, [r7, #7]
 80087ba:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80087be:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 80087c2:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 80087c6:	f887 102b 	strb.w	r1, [r7, #43]	@ 0x2b
 80087ca:	b2d1      	uxtb	r1, r2
 80087cc:	ea81 0a0a 	eor.w	sl, r1, sl
 80087d0:	f887 a028 	strb.w	sl, [r7, #40]	@ 0x28
 80087d4:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 80087d8:	ea8a 0808 	eor.w	r8, sl, r8
 80087dc:	f887 8029 	strb.w	r8, [r7, #41]	@ 0x29
 80087e0:	f3c2 4807 	ubfx	r8, r2, #16, #8
 80087e4:	ea88 0606 	eor.w	r6, r8, r6
 80087e8:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 80087ec:	b2de      	uxtb	r6, r3
 80087ee:	4075      	eors	r5, r6
 80087f0:	713d      	strb	r5, [r7, #4]
 80087f2:	4074      	eors	r4, r6
 80087f4:	9d00      	ldr	r5, [sp, #0]
 80087f6:	f887 402c 	strb.w	r4, [r7, #44]	@ 0x2c
 80087fa:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80087fe:	4065      	eors	r5, r4
 8008800:	ea81 0b0b 	eor.w	fp, r1, fp
 8008804:	ea8a 0909 	eor.w	r9, sl, r9
 8008808:	ea88 0c0c 	eor.w	ip, r8, ip
 800880c:	4060      	eors	r0, r4
 800880e:	f887 b000 	strb.w	fp, [r7]
 8008812:	f887 9001 	strb.w	r9, [r7, #1]
 8008816:	f887 c002 	strb.w	ip, [r7, #2]
 800881a:	717d      	strb	r5, [r7, #5]
 800881c:	9d01      	ldr	r5, [sp, #4]
 800881e:	f887 002d 	strb.w	r0, [r7, #45]	@ 0x2d
 8008822:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008826:	4045      	eors	r5, r0
 8008828:	71bd      	strb	r5, [r7, #6]
 800882a:	f897 502e 	ldrb.w	r5, [r7, #46]	@ 0x2e
 800882e:	4045      	eors	r5, r0
 8008830:	f887 502e 	strb.w	r5, [r7, #46]	@ 0x2e
 8008834:	f897 502f 	ldrb.w	r5, [r7, #47]	@ 0x2f
 8008838:	ea85 6513 	eor.w	r5, r5, r3, lsr #24
 800883c:	f887 502f 	strb.w	r5, [r7, #47]	@ 0x2f
 8008840:	f897 5050 	ldrb.w	r5, [r7, #80]	@ 0x50
 8008844:	404d      	eors	r5, r1
 8008846:	f887 5050 	strb.w	r5, [r7, #80]	@ 0x50
 800884a:	f897 5051 	ldrb.w	r5, [r7, #81]	@ 0x51
 800884e:	ea8a 0505 	eor.w	r5, sl, r5
 8008852:	f887 5051 	strb.w	r5, [r7, #81]	@ 0x51
 8008856:	f897 5052 	ldrb.w	r5, [r7, #82]	@ 0x52
 800885a:	ea88 0505 	eor.w	r5, r8, r5
 800885e:	f887 5052 	strb.w	r5, [r7, #82]	@ 0x52
 8008862:	f897 5053 	ldrb.w	r5, [r7, #83]	@ 0x53
 8008866:	ea85 6512 	eor.w	r5, r5, r2, lsr #24
 800886a:	f887 5053 	strb.w	r5, [r7, #83]	@ 0x53
 800886e:	f897 5054 	ldrb.w	r5, [r7, #84]	@ 0x54
 8008872:	4075      	eors	r5, r6
 8008874:	f887 5054 	strb.w	r5, [r7, #84]	@ 0x54
 8008878:	f897 5055 	ldrb.w	r5, [r7, #85]	@ 0x55
 800887c:	4065      	eors	r5, r4
 800887e:	f887 5055 	strb.w	r5, [r7, #85]	@ 0x55
 8008882:	f897 5056 	ldrb.w	r5, [r7, #86]	@ 0x56
 8008886:	4045      	eors	r5, r0
 8008888:	f887 5056 	strb.w	r5, [r7, #86]	@ 0x56
 800888c:	f897 5057 	ldrb.w	r5, [r7, #87]	@ 0x57
 8008890:	ea85 6513 	eor.w	r5, r5, r3, lsr #24
 8008894:	f887 5057 	strb.w	r5, [r7, #87]	@ 0x57
 8008898:	f897 5078 	ldrb.w	r5, [r7, #120]	@ 0x78
 800889c:	404d      	eors	r5, r1
 800889e:	f887 5078 	strb.w	r5, [r7, #120]	@ 0x78
 80088a2:	f897 5079 	ldrb.w	r5, [r7, #121]	@ 0x79
 80088a6:	ea8a 0505 	eor.w	r5, sl, r5
 80088aa:	f887 5079 	strb.w	r5, [r7, #121]	@ 0x79
 80088ae:	f897 507a 	ldrb.w	r5, [r7, #122]	@ 0x7a
 80088b2:	ea88 0505 	eor.w	r5, r8, r5
 80088b6:	f887 507a 	strb.w	r5, [r7, #122]	@ 0x7a
 80088ba:	f897 507b 	ldrb.w	r5, [r7, #123]	@ 0x7b
 80088be:	ea85 6512 	eor.w	r5, r5, r2, lsr #24
 80088c2:	f887 507b 	strb.w	r5, [r7, #123]	@ 0x7b
 80088c6:	f897 507c 	ldrb.w	r5, [r7, #124]	@ 0x7c
 80088ca:	4075      	eors	r5, r6
 80088cc:	f887 507c 	strb.w	r5, [r7, #124]	@ 0x7c
 80088d0:	f897 507d 	ldrb.w	r5, [r7, #125]	@ 0x7d
 80088d4:	4065      	eors	r5, r4
 80088d6:	f887 507d 	strb.w	r5, [r7, #125]	@ 0x7d
 80088da:	f897 507e 	ldrb.w	r5, [r7, #126]	@ 0x7e
 80088de:	4045      	eors	r5, r0
 80088e0:	f887 507e 	strb.w	r5, [r7, #126]	@ 0x7e
 80088e4:	f897 507f 	ldrb.w	r5, [r7, #127]	@ 0x7f
 80088e8:	ea85 6513 	eor.w	r5, r5, r3, lsr #24
 80088ec:	f887 507f 	strb.w	r5, [r7, #127]	@ 0x7f
 80088f0:	f897 50a0 	ldrb.w	r5, [r7, #160]	@ 0xa0
 80088f4:	4069      	eors	r1, r5
 80088f6:	f887 10a0 	strb.w	r1, [r7, #160]	@ 0xa0
 80088fa:	f897 10a1 	ldrb.w	r1, [r7, #161]	@ 0xa1
 80088fe:	ea8a 0a01 	eor.w	sl, sl, r1
 8008902:	f897 10a2 	ldrb.w	r1, [r7, #162]	@ 0xa2
 8008906:	f887 a0a1 	strb.w	sl, [r7, #161]	@ 0xa1
 800890a:	ea88 0801 	eor.w	r8, r8, r1
 800890e:	f897 10a3 	ldrb.w	r1, [r7, #163]	@ 0xa3
 8008912:	f887 80a2 	strb.w	r8, [r7, #162]	@ 0xa2
 8008916:	ea81 6212 	eor.w	r2, r1, r2, lsr #24
 800891a:	f887 20a3 	strb.w	r2, [r7, #163]	@ 0xa3
 800891e:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 8008922:	4056      	eors	r6, r2
 8008924:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 8008928:	f887 60a4 	strb.w	r6, [r7, #164]	@ 0xa4
 800892c:	4054      	eors	r4, r2
 800892e:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8008932:	f887 40a5 	strb.w	r4, [r7, #165]	@ 0xa5
 8008936:	4050      	eors	r0, r2
 8008938:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800893c:	f887 00a6 	strb.w	r0, [r7, #166]	@ 0xa6
 8008940:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
            for(x=0; x<5; x++) {
 8008944:	f1be 0f05 	cmp.w	lr, #5
        x[i] ^= u;
 8008948:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
            for(x=0; x<5; x++) {
 800894c:	f107 0708 	add.w	r7, r7, #8
 8008950:	f47f aef2 	bne.w	8008738 <KeccakF1600_StatePermute+0x1e8>
        u |= x[i];
 8008954:	9904      	ldr	r1, [sp, #16]
            current = readLane(x, y);
            /* Iterate over ((0 1)(2 3))^t * (1 0) for 0 ≤ t ≤ 23 */
            for(t=0; t<24; t++) {
 8008956:	f04f 0c00 	mov.w	ip, #0
        u |= x[i];
 800895a:	688a      	ldr	r2, [r1, #8]
 800895c:	68cb      	ldr	r3, [r1, #12]
            x = 1; y = 0;
 800895e:	4666      	mov	r6, ip
 8008960:	f04f 0e01 	mov.w	lr, #1
 8008964:	4688      	mov	r8, r1
                /* Compute the rotation constant r = (t+1)(t+2)/2 */
                unsigned int r = ((t+1)*(t+2)/2)%64;
 8008966:	4699      	mov	r9, r3
                /* Compute ((0 1)(2 3)) * (x y) */
                unsigned int Y = (2*x+3*y)%5; x = y; y = Y;
 8008968:	493c      	ldr	r1, [pc, #240]	@ (8008a5c <KeccakF1600_StatePermute+0x50c>)
 800896a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800896e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
 8008972:	fba1 1003 	umull	r1, r0, r1, r3
 8008976:	f020 0103 	bic.w	r1, r0, #3
 800897a:	eb01 0190 	add.w	r1, r1, r0, lsr #2
 800897e:	46b6      	mov	lr, r6
 8008980:	1a5e      	subs	r6, r3, r1
                /* Swap current and state(x,y), and rotate */
                temp = readLane(x, y);
 8008982:	eb06 0486 	add.w	r4, r6, r6, lsl #2
 8008986:	4474      	add	r4, lr
        u |= x[i];
 8008988:	eb08 05c4 	add.w	r5, r8, r4, lsl #3
 800898c:	4661      	mov	r1, ip
                temp = readLane(x, y);
 800898e:	00e3      	lsls	r3, r4, #3
        u |= x[i];
 8008990:	79a8      	ldrb	r0, [r5, #6]
 8008992:	1d1f      	adds	r7, r3, #4
                unsigned int r = ((t+1)*(t+2)/2)%64;
 8008994:	f10c 0c01 	add.w	ip, ip, #1
        u |= x[i];
 8008998:	79eb      	ldrb	r3, [r5, #7]
 800899a:	f818 a007 	ldrb.w	sl, [r8, r7]
 800899e:	9700      	str	r7, [sp, #0]
                unsigned int r = ((t+1)*(t+2)/2)%64;
 80089a0:	3102      	adds	r1, #2
 80089a2:	fb0c f101 	mul.w	r1, ip, r1
 80089a6:	f3c1 0145 	ubfx	r1, r1, #1, #6
        u |= x[i];
 80089aa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80089ae:	796b      	ldrb	r3, [r5, #5]
                writeLane(x, y, ROL64(current, r));
 80089b0:	f1a1 0b20 	sub.w	fp, r1, #32
        u |= x[i];
 80089b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                writeLane(x, y, ROL64(current, r));
 80089b8:	fa02 fb0b 	lsl.w	fp, r2, fp
 80089bc:	f1c1 0020 	rsb	r0, r1, #32
 80089c0:	fa09 f701 	lsl.w	r7, r9, r1
 80089c4:	fa22 f000 	lsr.w	r0, r2, r0
 80089c8:	ea47 070b 	orr.w	r7, r7, fp
 80089cc:	4307      	orrs	r7, r0
        u |= x[i];
 80089ce:	f895 b003 	ldrb.w	fp, [r5, #3]
                writeLane(x, y, ROL64(current, r));
 80089d2:	4248      	negs	r0, r1
 80089d4:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
        u |= x[i];
 80089d8:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
 80089dc:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
                writeLane(x, y, ROL64(current, r));
 80089e0:	fa29 fb00 	lsr.w	fp, r9, r0
 80089e4:	ea47 070b 	orr.w	r7, r7, fp
        u <<= 8;
 80089e8:	f3c3 4307 	ubfx	r3, r3, #16, #8
        u |= x[i];
 80089ec:	f895 b002 	ldrb.w	fp, [r5, #2]
 80089f0:	786d      	ldrb	r5, [r5, #1]
        u <<= 8;
 80089f2:	021b      	lsls	r3, r3, #8
        u |= x[i];
 80089f4:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
        u <<= 8;
 80089f8:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
                writeLane(x, y, ROL64(current, r));
 80089fc:	f1c0 0a20 	rsb	sl, r0, #32
 8008a00:	fa02 f101 	lsl.w	r1, r2, r1
 8008a04:	fa09 fa0a 	lsl.w	sl, r9, sl
 8008a08:	40c2      	lsrs	r2, r0
 8008a0a:	3820      	subs	r0, #32
 8008a0c:	fa29 f000 	lsr.w	r0, r9, r0
 8008a10:	ea42 020a 	orr.w	r2, r2, sl
 8008a14:	4302      	orrs	r2, r0
        x[i] = u;
 8008a16:	2000      	movs	r0, #0
                writeLane(x, y, ROL64(current, r));
 8008a18:	4311      	orrs	r1, r2
        x[i] = u;
 8008a1a:	f367 0007 	bfi	r0, r7, #0, #8
        u >>= 8;
 8008a1e:	0a3a      	lsrs	r2, r7, #8
        x[i] = u;
 8008a20:	f362 200f 	bfi	r0, r2, #8, #8
        u >>= 8;
 8008a24:	0c3a      	lsrs	r2, r7, #16
        x[i] = u;
 8008a26:	f362 4017 	bfi	r0, r2, #16, #8
        u >>= 8;
 8008a2a:	0e3f      	lsrs	r7, r7, #24
        u <<= 8;
 8008a2c:	021b      	lsls	r3, r3, #8
        u |= x[i];
 8008a2e:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
        x[i] = u;
 8008a32:	f848 1034 	str.w	r1, [r8, r4, lsl #3]
 8008a36:	f367 601f 	bfi	r0, r7, #24, #8
        u <<= 8;
 8008a3a:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
        x[i] = u;
 8008a3e:	9f00      	ldr	r7, [sp, #0]
        u |= x[i];
 8008a40:	ea45 250b 	orr.w	r5, r5, fp, lsl #8
        u <<= 8;
 8008a44:	021b      	lsls	r3, r3, #8
            for(t=0; t<24; t++) {
 8008a46:	f1bc 0f18 	cmp.w	ip, #24
        x[i] = u;
 8008a4a:	f848 0007 	str.w	r0, [r8, r7]
        u |= x[i];
 8008a4e:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 8008a52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            for(t=0; t<24; t++) {
 8008a56:	d186      	bne.n	8008966 <KeccakF1600_StatePermute+0x416>
 8008a58:	9b02      	ldr	r3, [sp, #8]
 8008a5a:	e001      	b.n	8008a60 <KeccakF1600_StatePermute+0x510>
 8008a5c:	cccccccd 	.word	0xcccccccd
        u |= x[i];
 8008a60:	79d8      	ldrb	r0, [r3, #7]
 8008a62:	7999      	ldrb	r1, [r3, #6]
 8008a64:	795a      	ldrb	r2, [r3, #5]
 8008a66:	791d      	ldrb	r5, [r3, #4]
 8008a68:	78dc      	ldrb	r4, [r3, #3]
 8008a6a:	f893 e015 	ldrb.w	lr, [r3, #21]
 8008a6e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008a72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a76:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
        u <<= 8;
 8008a7a:	f3c2 4207 	ubfx	r2, r2, #16, #8
        u |= x[i];
 8008a7e:	7898      	ldrb	r0, [r3, #2]
 8008a80:	7859      	ldrb	r1, [r3, #1]
 8008a82:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
        u <<= 8;
 8008a86:	0212      	lsls	r2, r2, #8
 8008a88:	ea42 6214 	orr.w	r2, r2, r4, lsr #24
        u |= x[i];
 8008a8c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        u <<= 8;
 8008a90:	0212      	lsls	r2, r2, #8
        u |= x[i];
 8008a92:	781d      	ldrb	r5, [r3, #0]
 8008a94:	7bdc      	ldrb	r4, [r3, #15]
        u <<= 8;
 8008a96:	ea42 6210 	orr.w	r2, r2, r0, lsr #24
        u |= x[i];
 8008a9a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        u <<= 8;
 8008a9e:	0212      	lsls	r2, r2, #8
        u |= x[i];
 8008aa0:	7b98      	ldrb	r0, [r3, #14]
        u <<= 8;
 8008aa2:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
        u |= x[i];
 8008aa6:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
 8008aaa:	9100      	str	r1, [sp, #0]
 8008aac:	7b59      	ldrb	r1, [r3, #13]
 8008aae:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8008ab2:	7b1c      	ldrb	r4, [r3, #12]
 8008ab4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008ab8:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
        u <<= 8;
 8008abc:	f3c1 4007 	ubfx	r0, r1, #16, #8
        u |= x[i];
 8008ac0:	7ad9      	ldrb	r1, [r3, #11]
 8008ac2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8008ac6:	7a9c      	ldrb	r4, [r3, #10]
        u <<= 8;
 8008ac8:	0200      	lsls	r0, r0, #8
        u |= x[i];
 8008aca:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
        u <<= 8;
 8008ace:	ea40 6011 	orr.w	r0, r0, r1, lsr #24
        u |= x[i];
 8008ad2:	7a59      	ldrb	r1, [r3, #9]
        u <<= 8;
 8008ad4:	0200      	lsls	r0, r0, #8
        u |= x[i];
 8008ad6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
        u <<= 8;
 8008ada:	ea40 6014 	orr.w	r0, r0, r4, lsr #24
        u |= x[i];
 8008ade:	7a1c      	ldrb	r4, [r3, #8]
        u <<= 8;
 8008ae0:	0200      	lsls	r0, r0, #8
        u |= x[i];
 8008ae2:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
        u <<= 8;
 8008ae6:	ea40 6011 	orr.w	r0, r0, r1, lsr #24
        u |= x[i];
 8008aea:	9401      	str	r4, [sp, #4]
 8008aec:	7d99      	ldrb	r1, [r3, #22]
 8008aee:	7ddc      	ldrb	r4, [r3, #23]
 8008af0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8008af4:	7d1c      	ldrb	r4, [r3, #20]
 8008af6:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
 8008afa:	7cd9      	ldrb	r1, [r3, #19]
 8008afc:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
 8008b00:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
        u <<= 8;
 8008b04:	f3ce 4e07 	ubfx	lr, lr, #16, #8
        u |= x[i];
 8008b08:	7c9c      	ldrb	r4, [r3, #18]
        u <<= 8;
 8008b0a:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
        u |= x[i];
 8008b0e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
        u <<= 8;
 8008b12:	ea4e 6e11 	orr.w	lr, lr, r1, lsr #24
        u |= x[i];
 8008b16:	7c59      	ldrb	r1, [r3, #17]
        u <<= 8;
 8008b18:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
        u |= x[i];
 8008b1c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
        u <<= 8;
 8008b20:	ea4e 6e14 	orr.w	lr, lr, r4, lsr #24
        u |= x[i];
 8008b24:	7c1c      	ldrb	r4, [r3, #16]
        u <<= 8;
 8008b26:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8008b2a:	ea4e 6e11 	orr.w	lr, lr, r1, lsr #24
        u |= x[i];
 8008b2e:	ea44 2501 	orr.w	r5, r4, r1, lsl #8
 8008b32:	7fd9      	ldrb	r1, [r3, #31]
 8008b34:	7f9c      	ldrb	r4, [r3, #30]
 8008b36:	9502      	str	r5, [sp, #8]
 8008b38:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8008b3c:	7f59      	ldrb	r1, [r3, #29]
 8008b3e:	7edd      	ldrb	r5, [r3, #27]
 8008b40:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8008b44:	7f1c      	ldrb	r4, [r3, #28]
 8008b46:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8008b4a:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
        u <<= 8;
 8008b4e:	f3c1 4107 	ubfx	r1, r1, #16, #8
        u |= x[i];
 8008b52:	7e9c      	ldrb	r4, [r3, #26]
 8008b54:	f893 6027 	ldrb.w	r6, [r3, #39]	@ 0x27
 8008b58:	f893 7025 	ldrb.w	r7, [r3, #37]	@ 0x25
 8008b5c:	f893 c021 	ldrb.w	ip, [r3, #33]	@ 0x21
        u <<= 8;
 8008b60:	0209      	lsls	r1, r1, #8
        u |= x[i];
 8008b62:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
        u <<= 8;
 8008b66:	ea41 6115 	orr.w	r1, r1, r5, lsr #24
        u |= x[i];
 8008b6a:	7e5d      	ldrb	r5, [r3, #25]
        u <<= 8;
 8008b6c:	0209      	lsls	r1, r1, #8
        u |= x[i];
 8008b6e:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
        u <<= 8;
 8008b72:	ea41 6114 	orr.w	r1, r1, r4, lsr #24
        u |= x[i];
 8008b76:	7e1c      	ldrb	r4, [r3, #24]
        u <<= 8;
 8008b78:	0209      	lsls	r1, r1, #8
 8008b7a:	ea41 6115 	orr.w	r1, r1, r5, lsr #24
        u |= x[i];
 8008b7e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8008b82:	f893 5026 	ldrb.w	r5, [r3, #38]	@ 0x26
 8008b86:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8008b8a:	ea47 2705 	orr.w	r7, r7, r5, lsl #8
 8008b8e:	f893 5024 	ldrb.w	r5, [r3, #36]	@ 0x24
 8008b92:	f893 6023 	ldrb.w	r6, [r3, #35]	@ 0x23
 8008b96:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
        u <<= 8;
 8008b9a:	f3c7 4707 	ubfx	r7, r7, #16, #8
        u |= x[i];
 8008b9e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
        u <<= 8;
 8008ba2:	023f      	lsls	r7, r7, #8
        u |= x[i];
 8008ba4:	f893 5022 	ldrb.w	r5, [r3, #34]	@ 0x22
        u <<= 8;
 8008ba8:	ea47 6716 	orr.w	r7, r7, r6, lsr #24
        u |= x[i];
 8008bac:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
        u <<= 8;
 8008bb0:	023f      	lsls	r7, r7, #8
 8008bb2:	ea47 6715 	orr.w	r7, r7, r5, lsr #24
        u |= x[i];
 8008bb6:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        u <<= 8;
 8008bba:	023f      	lsls	r7, r7, #8
 8008bbc:	ea47 671c 	orr.w	r7, r7, ip, lsr #24
                /* Take a copy of the plane */
                for(x=0; x<5; x++)
                    temp[x] = readLane(x, y);
                /* Compute χ on the plane */
                for(x=0; x<5; x++)
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008bc0:	ea2e 0600 	bic.w	r6, lr, r0
 8008bc4:	ea21 050e 	bic.w	r5, r1, lr
 8008bc8:	4056      	eors	r6, r2
 8008bca:	4045      	eors	r5, r0
        x[i] = u;
 8008bcc:	f04f 0a00 	mov.w	sl, #0
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008bd0:	ea20 0002 	bic.w	r0, r0, r2
 8008bd4:	ea22 0207 	bic.w	r2, r2, r7
 8008bd8:	404a      	eors	r2, r1
        u >>= 8;
 8008bda:	ea4f 2b16 	mov.w	fp, r6, lsr #8
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008bde:	ea27 0101 	bic.w	r1, r7, r1
        x[i] = u;
 8008be2:	f366 0a07 	bfi	sl, r6, #0, #8
 8008be6:	f04f 0900 	mov.w	r9, #0
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008bea:	ea81 010e 	eor.w	r1, r1, lr
 8008bee:	4078      	eors	r0, r7
        x[i] = u;
 8008bf0:	f365 0907 	bfi	r9, r5, #0, #8
        u |= x[i];
 8008bf4:	f893 7020 	ldrb.w	r7, [r3, #32]
        x[i] = u;
 8008bf8:	f36b 2a0f 	bfi	sl, fp, #8, #8
 8008bfc:	f04f 0800 	mov.w	r8, #0
        u >>= 8;
 8008c00:	ea4f 2b15 	mov.w	fp, r5, lsr #8
        x[i] = u;
 8008c04:	f361 0807 	bfi	r8, r1, #0, #8
 8008c08:	f36b 290f 	bfi	r9, fp, #8, #8
 8008c0c:	f04f 0e00 	mov.w	lr, #0
        u >>= 8;
 8008c10:	ea4f 2b11 	mov.w	fp, r1, lsr #8
        u |= x[i];
 8008c14:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
        x[i] = u;
 8008c18:	f362 0e07 	bfi	lr, r2, #0, #8
 8008c1c:	f36b 280f 	bfi	r8, fp, #8, #8
 8008c20:	f04f 0c00 	mov.w	ip, #0
        u >>= 8;
 8008c24:	ea4f 2b12 	mov.w	fp, r2, lsr #8
        x[i] = u;
 8008c28:	f360 0c07 	bfi	ip, r0, #0, #8
 8008c2c:	f36b 2e0f 	bfi	lr, fp, #8, #8
        u >>= 8;
 8008c30:	ea4f 2b10 	mov.w	fp, r0, lsr #8
        x[i] = u;
 8008c34:	f36b 2c0f 	bfi	ip, fp, #8, #8
        u >>= 8;
 8008c38:	ea4f 4b16 	mov.w	fp, r6, lsr #16
        x[i] = u;
 8008c3c:	f36b 4a17 	bfi	sl, fp, #16, #8
        u >>= 8;
 8008c40:	0e36      	lsrs	r6, r6, #24
        x[i] = u;
 8008c42:	f366 6a1f 	bfi	sl, r6, #24, #8
        u >>= 8;
 8008c46:	0c2e      	lsrs	r6, r5, #16
        x[i] = u;
 8008c48:	f366 4917 	bfi	r9, r6, #16, #8
        u >>= 8;
 8008c4c:	0e2d      	lsrs	r5, r5, #24
        x[i] = u;
 8008c4e:	f365 691f 	bfi	r9, r5, #24, #8
        u >>= 8;
 8008c52:	0c0d      	lsrs	r5, r1, #16
        x[i] = u;
 8008c54:	f365 4817 	bfi	r8, r5, #16, #8
        u >>= 8;
 8008c58:	0e09      	lsrs	r1, r1, #24
        x[i] = u;
 8008c5a:	f361 681f 	bfi	r8, r1, #24, #8
        u >>= 8;
 8008c5e:	0c11      	lsrs	r1, r2, #16
        x[i] = u;
 8008c60:	f361 4e17 	bfi	lr, r1, #16, #8
        u >>= 8;
 8008c64:	0e12      	lsrs	r2, r2, #24
        x[i] = u;
 8008c66:	f362 6e1f 	bfi	lr, r2, #24, #8
        u >>= 8;
 8008c6a:	0c02      	lsrs	r2, r0, #16
        x[i] = u;
 8008c6c:	f362 4c17 	bfi	ip, r2, #16, #8
        u >>= 8;
 8008c70:	0e00      	lsrs	r0, r0, #24
        x[i] = u;
 8008c72:	f360 6c1f 	bfi	ip, r0, #24, #8
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008c76:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8008c7a:	9900      	ldr	r1, [sp, #0]
        x[i] = u;
 8008c7c:	f8c3 a004 	str.w	sl, [r3, #4]
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008c80:	ea25 0200 	bic.w	r2, r5, r0
 8008c84:	404a      	eors	r2, r1
        x[i] = u;
 8008c86:	601a      	str	r2, [r3, #0]
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008c88:	ea24 0205 	bic.w	r2, r4, r5
 8008c8c:	4042      	eors	r2, r0
        x[i] = u;
 8008c8e:	609a      	str	r2, [r3, #8]
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008c90:	ea20 0201 	bic.w	r2, r0, r1
 8008c94:	ea21 0107 	bic.w	r1, r1, r7
 8008c98:	4061      	eors	r1, r4
 8008c9a:	407a      	eors	r2, r7
 8008c9c:	ea27 0404 	bic.w	r4, r7, r4
        x[i] = u;
 8008ca0:	621a      	str	r2, [r3, #32]
                    writeLane(x, y, temp[x] ^((~temp[(x+1)%5]) & temp[(x+2)%5]));
 8008ca2:	406c      	eors	r4, r5
            for(y=0; y<5; y++) {
 8008ca4:	9a03      	ldr	r2, [sp, #12]
        x[i] = u;
 8008ca6:	f8c3 900c 	str.w	r9, [r3, #12]
 8008caa:	f8c3 8014 	str.w	r8, [r3, #20]
 8008cae:	f8c3 e01c 	str.w	lr, [r3, #28]
 8008cb2:	f8c3 c024 	str.w	ip, [r3, #36]	@ 0x24
 8008cb6:	6199      	str	r1, [r3, #24]
 8008cb8:	611c      	str	r4, [r3, #16]
            for(y=0; y<5; y++) {
 8008cba:	3328      	adds	r3, #40	@ 0x28
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	f47f aecf 	bne.w	8008a60 <KeccakF1600_StatePermute+0x510>
    int result = ((*LFSR) & 0x01) != 0;
 8008cc2:	9b06      	ldr	r3, [sp, #24]
    if (((*LFSR) & 0x80) != 0)
 8008cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cc8:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cd0:	bf18      	it	ne
 8008cd2:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
 8008cd6:	b2db      	uxtb	r3, r3
        }

        {   /* === ι step (see [Keccak Reference, Section 2.3.5]) === */
            for(j=0; j<7; j++) {
                unsigned int bitPosition = (1<<j)-1; /* 2^j-1 */
                if (LFSR86540(&LFSRstate))
 8008cd8:	2a00      	cmp	r2, #0
 8008cda:	d171      	bne.n	8008dc0 <KeccakF1600_StatePermute+0x870>
    if (((*LFSR) & 0x80) != 0)
 8008cdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ce0:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008ce4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ce8:	bf18      	it	ne
 8008cea:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
 8008cee:	b2db      	uxtb	r3, r3
                if (LFSR86540(&LFSRstate))
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d15f      	bne.n	8008db4 <KeccakF1600_StatePermute+0x864>
    if (((*LFSR) & 0x80) != 0)
 8008cf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cf8:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d00:	bf18      	it	ne
 8008d02:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
 8008d06:	b2db      	uxtb	r3, r3
                if (LFSR86540(&LFSRstate))
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	d14d      	bne.n	8008da8 <KeccakF1600_StatePermute+0x858>
    if (((*LFSR) & 0x80) != 0)
 8008d0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d10:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008d14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d18:	bf18      	it	ne
 8008d1a:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
 8008d1e:	b2db      	uxtb	r3, r3
                if (LFSR86540(&LFSRstate))
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	d13b      	bne.n	8008d9c <KeccakF1600_StatePermute+0x84c>
    if (((*LFSR) & 0x80) != 0)
 8008d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d28:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d30:	bf18      	it	ne
 8008d32:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
 8008d36:	b2db      	uxtb	r3, r3
                if (LFSR86540(&LFSRstate))
 8008d38:	bb52      	cbnz	r2, 8008d90 <KeccakF1600_StatePermute+0x840>
    if (((*LFSR) & 0x80) != 0)
 8008d3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d3e:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008d42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d46:	bf18      	it	ne
 8008d48:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
 8008d4c:	b2db      	uxtb	r3, r3
                if (LFSR86540(&LFSRstate))
 8008d4e:	b9ca      	cbnz	r2, 8008d84 <KeccakF1600_StatePermute+0x834>
    if (((*LFSR) & 0x80) != 0)
 8008d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d54:	f003 0201 	and.w	r2, r3, #1
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
 8008d58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d5c:	bf18      	it	ne
 8008d5e:	f083 0371 	eorne.w	r3, r3, #113	@ 0x71
        (*LFSR) <<= 1;
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	9306      	str	r3, [sp, #24]
                if (LFSR86540(&LFSRstate))
 8008d66:	b93a      	cbnz	r2, 8008d78 <KeccakF1600_StatePermute+0x828>
    for(round=0; round<24; round++) {
 8008d68:	9b05      	ldr	r3, [sp, #20]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	9305      	str	r3, [sp, #20]
 8008d6e:	f47f ac00 	bne.w	8008572 <KeccakF1600_StatePermute+0x22>
                    XORLane(0, 0, (tKeccakLane)1<<bitPosition);
            }
        }
    }
}
 8008d72:	b013      	add	sp, #76	@ 0x4c
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        x[i] ^= u;
 8008d78:	9a04      	ldr	r2, [sp, #16]
 8008d7a:	79d3      	ldrb	r3, [r2, #7]
 8008d7c:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8008d80:	71d3      	strb	r3, [r2, #7]
    for(i=0; i<8; ++i) {
 8008d82:	e7f1      	b.n	8008d68 <KeccakF1600_StatePermute+0x818>
        x[i] ^= u;
 8008d84:	9904      	ldr	r1, [sp, #16]
 8008d86:	78ca      	ldrb	r2, [r1, #3]
 8008d88:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8008d8c:	70ca      	strb	r2, [r1, #3]
    for(i=0; i<8; ++i) {
 8008d8e:	e7df      	b.n	8008d50 <KeccakF1600_StatePermute+0x800>
        x[i] ^= u;
 8008d90:	9904      	ldr	r1, [sp, #16]
 8008d92:	784a      	ldrb	r2, [r1, #1]
 8008d94:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8008d98:	704a      	strb	r2, [r1, #1]
    for(i=0; i<8; ++i) {
 8008d9a:	e7ce      	b.n	8008d3a <KeccakF1600_StatePermute+0x7ea>
        x[i] ^= u;
 8008d9c:	9904      	ldr	r1, [sp, #16]
 8008d9e:	780a      	ldrb	r2, [r1, #0]
 8008da0:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8008da4:	700a      	strb	r2, [r1, #0]
    for(i=0; i<8; ++i) {
 8008da6:	e7bd      	b.n	8008d24 <KeccakF1600_StatePermute+0x7d4>
        x[i] ^= u;
 8008da8:	9904      	ldr	r1, [sp, #16]
 8008daa:	780a      	ldrb	r2, [r1, #0]
 8008dac:	f082 0208 	eor.w	r2, r2, #8
 8008db0:	700a      	strb	r2, [r1, #0]
    for(i=0; i<8; ++i) {
 8008db2:	e7ab      	b.n	8008d0c <KeccakF1600_StatePermute+0x7bc>
        x[i] ^= u;
 8008db4:	9904      	ldr	r1, [sp, #16]
 8008db6:	780a      	ldrb	r2, [r1, #0]
 8008db8:	f082 0202 	eor.w	r2, r2, #2
 8008dbc:	700a      	strb	r2, [r1, #0]
    for(i=0; i<8; ++i) {
 8008dbe:	e799      	b.n	8008cf4 <KeccakF1600_StatePermute+0x7a4>
        x[i] ^= u;
 8008dc0:	9904      	ldr	r1, [sp, #16]
 8008dc2:	780a      	ldrb	r2, [r1, #0]
 8008dc4:	f082 0201 	eor.w	r2, r2, #1
 8008dc8:	700a      	strb	r2, [r1, #0]
    for(i=0; i<8; ++i) {
 8008dca:	e787      	b.n	8008cdc <KeccakF1600_StatePermute+0x78c>

08008dcc <Keccak>:

#include <string.h>
#define MIN(a, b) ((a) < (b) ? (a) : (b))

void Keccak(unsigned int rate, unsigned int capacity, const uint8_t *input, UINT64 inputByteLen, uint8_t delimitedSuffix, uint8_t *output, UINT64 outputByteLen)
{
 8008dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd0:	b0b5      	sub	sp, #212	@ 0xd4
    UINT8 state[200];
    unsigned int rateInBytes = rate/8;
    unsigned int blockSize = 0;
    unsigned int i;

    if (((rate + capacity) != 1600) || ((rate % 8) != 0))
 8008dd2:	4401      	add	r1, r0
{
 8008dd4:	f89d 3100 	ldrb.w	r3, [sp, #256]	@ 0x100
 8008dd8:	f8dd 810c 	ldr.w	r8, [sp, #268]	@ 0x10c
 8008ddc:	9301      	str	r3, [sp, #4]
    if (((rate + capacity) != 1600) || ((rate % 8) != 0))
 8008dde:	f5b1 6fc8 	cmp.w	r1, #1600	@ 0x640
{
 8008de2:	e9dd 5a3e 	ldrd	r5, sl, [sp, #248]	@ 0xf8
 8008de6:	e9dd 9441 	ldrd	r9, r4, [sp, #260]	@ 0x104
    if (((rate + capacity) != 1600) || ((rate % 8) != 0))
 8008dea:	f040 8097 	bne.w	8008f1c <Keccak+0x150>
 8008dee:	f010 0107 	ands.w	r1, r0, #7
 8008df2:	f040 8093 	bne.w	8008f1c <Keccak+0x150>
 8008df6:	4617      	mov	r7, r2
    unsigned int rateInBytes = rate/8;
 8008df8:	08c6      	lsrs	r6, r0, #3
        return;

    /* === Initialize the state === */
    //memset(state, 0, sizeof(state));
    for(int i = 0; i < sizeof(state); i++) {
    	state[i] = 0;
 8008dfa:	22c8      	movs	r2, #200	@ 0xc8
 8008dfc:	a802      	add	r0, sp, #8
 8008dfe:	f003 fb3b 	bl	800c478 <memset>
    }

    /* === Absorb all the input blocks === */
    while(inputByteLen > 0) {
 8008e02:	ea55 030a 	orrs.w	r3, r5, sl
 8008e06:	f000 8093 	beq.w	8008f30 <Keccak+0x164>
        blockSize = MIN(inputByteLen, rateInBytes);
 8008e0a:	42b5      	cmp	r5, r6
 8008e0c:	f17a 0200 	sbcs.w	r2, sl, #0
 8008e10:	4633      	mov	r3, r6
 8008e12:	bf38      	it	cc
 8008e14:	462b      	movcc	r3, r5
 8008e16:	f04f 0e00 	mov.w	lr, #0
 8008e1a:	469b      	mov	fp, r3
 8008e1c:	bf38      	it	cc
 8008e1e:	46d6      	movcc	lr, sl
        for(i=0; i<blockSize; i++)
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d03a      	beq.n	8008e9a <Keccak+0xce>
 8008e24:	1e5a      	subs	r2, r3, #1
 8008e26:	2a02      	cmp	r2, #2
 8008e28:	f240 8085 	bls.w	8008f36 <Keccak+0x16a>
 8008e2c:	f023 0c03 	bic.w	ip, r3, #3
 8008e30:	44bc      	add	ip, r7
 8008e32:	4639      	mov	r1, r7
 8008e34:	aa02      	add	r2, sp, #8
 8008e36:	9300      	str	r3, [sp, #0]
            state[i] ^= input[i];
 8008e38:	f851 0b04 	ldr.w	r0, [r1], #4
 8008e3c:	6813      	ldr	r3, [r2, #0]
 8008e3e:	4561      	cmp	r1, ip
 8008e40:	ea80 0003 	eor.w	r0, r0, r3
 8008e44:	f842 0b04 	str.w	r0, [r2], #4
        for(i=0; i<blockSize; i++)
 8008e48:	d1f6      	bne.n	8008e38 <Keccak+0x6c>
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	0799      	lsls	r1, r3, #30
 8008e4e:	f023 0203 	bic.w	r2, r3, #3
 8008e52:	d022      	beq.n	8008e9a <Keccak+0xce>
            state[i] ^= input[i];
 8008e54:	f102 01d0 	add.w	r1, r2, #208	@ 0xd0
 8008e58:	4469      	add	r1, sp
 8008e5a:	5cb8      	ldrb	r0, [r7, r2]
 8008e5c:	f811 ccc8 	ldrb.w	ip, [r1, #-200]
 8008e60:	ea80 000c 	eor.w	r0, r0, ip
 8008e64:	f801 0cc8 	strb.w	r0, [r1, #-200]
        for(i=0; i<blockSize; i++)
 8008e68:	1c51      	adds	r1, r2, #1
 8008e6a:	428b      	cmp	r3, r1
 8008e6c:	d915      	bls.n	8008e9a <Keccak+0xce>
            state[i] ^= input[i];
 8008e6e:	f101 00d0 	add.w	r0, r1, #208	@ 0xd0
 8008e72:	4468      	add	r0, sp
 8008e74:	5c79      	ldrb	r1, [r7, r1]
 8008e76:	f810 ccc8 	ldrb.w	ip, [r0, #-200]
        for(i=0; i<blockSize; i++)
 8008e7a:	3202      	adds	r2, #2
            state[i] ^= input[i];
 8008e7c:	ea81 010c 	eor.w	r1, r1, ip
        for(i=0; i<blockSize; i++)
 8008e80:	429a      	cmp	r2, r3
            state[i] ^= input[i];
 8008e82:	f800 1cc8 	strb.w	r1, [r0, #-200]
        for(i=0; i<blockSize; i++)
 8008e86:	d208      	bcs.n	8008e9a <Keccak+0xce>
            state[i] ^= input[i];
 8008e88:	f102 01d0 	add.w	r1, r2, #208	@ 0xd0
 8008e8c:	4469      	add	r1, sp
 8008e8e:	5cba      	ldrb	r2, [r7, r2]
 8008e90:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
 8008e94:	4042      	eors	r2, r0
 8008e96:	f801 2cc8 	strb.w	r2, [r1, #-200]
        input += blockSize;
        inputByteLen -= blockSize;
 8008e9a:	1aed      	subs	r5, r5, r3
 8008e9c:	eb6a 0a0e 	sbc.w	sl, sl, lr

        if (blockSize == rateInBytes) {
 8008ea0:	429e      	cmp	r6, r3
        input += blockSize;
 8008ea2:	441f      	add	r7, r3
        if (blockSize == rateInBytes) {
 8008ea4:	d03d      	beq.n	8008f22 <Keccak+0x156>
    while(inputByteLen > 0) {
 8008ea6:	ea55 030a 	orrs.w	r3, r5, sl
 8008eaa:	d1ae      	bne.n	8008e0a <Keccak+0x3e>
        }
    }

    /* === Do the padding and switch to the squeezing phase === */
    /* Absorb the last few bits and add the first bit of padding (which coincides with the delimiter in delimitedSuffix) */
    state[blockSize] ^= delimitedSuffix;
 8008eac:	f10b 03d0 	add.w	r3, fp, #208	@ 0xd0
 8008eb0:	446b      	add	r3, sp
 8008eb2:	9901      	ldr	r1, [sp, #4]
 8008eb4:	f813 2cc8 	ldrb.w	r2, [r3, #-200]
 8008eb8:	404a      	eors	r2, r1
 8008eba:	f803 2cc8 	strb.w	r2, [r3, #-200]
    /* If the first bit of padding is at position rate-1, we need a whole new block for the second bit of padding */
    if (((delimitedSuffix & 0x80) != 0) && (blockSize == (rateInBytes-1)))
 8008ebe:	060b      	lsls	r3, r1, #24
 8008ec0:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ec4:	d439      	bmi.n	8008f3a <Keccak+0x16e>
        KeccakF1600_StatePermute(state);
    /* Add the second bit of padding */
    state[rateInBytes-1] ^= 0x80;
 8008ec6:	f105 03d0 	add.w	r3, r5, #208	@ 0xd0
 8008eca:	446b      	add	r3, sp
    /* Switch to the squeezing phase */
    KeccakF1600_StatePermute(state);
 8008ecc:	a802      	add	r0, sp, #8
    state[rateInBytes-1] ^= 0x80;
 8008ece:	f813 2cc8 	ldrb.w	r2, [r3, #-200]
 8008ed2:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8008ed6:	f803 2cc8 	strb.w	r2, [r3, #-200]
    KeccakF1600_StatePermute(state);
 8008eda:	f7ff fb39 	bl	8008550 <KeccakF1600_StatePermute>

    /* === Squeeze out all the output blocks === */
    while(outputByteLen > 0) {
 8008ede:	ea54 0308 	orrs.w	r3, r4, r8
 8008ee2:	d103      	bne.n	8008eec <Keccak+0x120>
 8008ee4:	e01a      	b.n	8008f1c <Keccak+0x150>
        }
        output += blockSize;
        outputByteLen -= blockSize;

        if (outputByteLen > 0)
            KeccakF1600_StatePermute(state);
 8008ee6:	a802      	add	r0, sp, #8
 8008ee8:	f7ff fb32 	bl	8008550 <KeccakF1600_StatePermute>
        blockSize = MIN(outputByteLen, rateInBytes);
 8008eec:	42b4      	cmp	r4, r6
 8008eee:	f178 0300 	sbcs.w	r3, r8, #0
 8008ef2:	4635      	mov	r5, r6
 8008ef4:	bf38      	it	cc
 8008ef6:	4625      	movcc	r5, r4
 8008ef8:	f04f 0700 	mov.w	r7, #0
        	output[i] = state[i];
 8008efc:	a902      	add	r1, sp, #8
 8008efe:	4648      	mov	r0, r9
        blockSize = MIN(outputByteLen, rateInBytes);
 8008f00:	bf38      	it	cc
 8008f02:	4647      	movcc	r7, r8
        	output[i] = state[i];
 8008f04:	462a      	mov	r2, r5
        for(int i = 0; i < blockSize; i++) {
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	d0ed      	beq.n	8008ee6 <Keccak+0x11a>
        	output[i] = state[i];
 8008f0a:	f003 fb40 	bl	800c58e <memcpy>
        outputByteLen -= blockSize;
 8008f0e:	1b64      	subs	r4, r4, r5
 8008f10:	eb68 0807 	sbc.w	r8, r8, r7
        if (outputByteLen > 0)
 8008f14:	ea54 0308 	orrs.w	r3, r4, r8
        output += blockSize;
 8008f18:	44a9      	add	r9, r5
        if (outputByteLen > 0)
 8008f1a:	d1e4      	bne.n	8008ee6 <Keccak+0x11a>
    }
}
 8008f1c:	b035      	add	sp, #212	@ 0xd4
 8008f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            KeccakF1600_StatePermute(state);
 8008f22:	a802      	add	r0, sp, #8
 8008f24:	f7ff fb14 	bl	8008550 <KeccakF1600_StatePermute>
    while(inputByteLen > 0) {
 8008f28:	ea55 030a 	orrs.w	r3, r5, sl
 8008f2c:	f47f af6d 	bne.w	8008e0a <Keccak+0x3e>
    unsigned int blockSize = 0;
 8008f30:	f04f 0b00 	mov.w	fp, #0
 8008f34:	e7ba      	b.n	8008eac <Keccak+0xe0>
        for(i=0; i<blockSize; i++)
 8008f36:	2200      	movs	r2, #0
 8008f38:	e78c      	b.n	8008e54 <Keccak+0x88>
    if (((delimitedSuffix & 0x80) != 0) && (blockSize == (rateInBytes-1)))
 8008f3a:	45ab      	cmp	fp, r5
 8008f3c:	d1c3      	bne.n	8008ec6 <Keccak+0xfa>
        KeccakF1600_StatePermute(state);
 8008f3e:	a802      	add	r0, sp, #8
 8008f40:	f7ff fb06 	bl	8008550 <KeccakF1600_StatePermute>
 8008f44:	e7bf      	b.n	8008ec6 <Keccak+0xfa>
 8008f46:	bf00      	nop

08008f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008f80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008f4c:	f7ff faf6 	bl	800853c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008f50:	480c      	ldr	r0, [pc, #48]	@ (8008f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f52:	490d      	ldr	r1, [pc, #52]	@ (8008f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f54:	4a0d      	ldr	r2, [pc, #52]	@ (8008f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f58:	e002      	b.n	8008f60 <LoopCopyDataInit>

08008f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f5e:	3304      	adds	r3, #4

08008f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f64:	d3f9      	bcc.n	8008f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f66:	4a0a      	ldr	r2, [pc, #40]	@ (8008f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f68:	4c0a      	ldr	r4, [pc, #40]	@ (8008f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f6c:	e001      	b.n	8008f72 <LoopFillZerobss>

08008f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f70:	3204      	adds	r2, #4

08008f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f74:	d3fb      	bcc.n	8008f6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008f76:	f003 fae3 	bl	800c540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f7a:	f7fd fa21 	bl	80063c0 <main>
  bx  lr    
 8008f7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008f80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008f8c:	0800d06c 	.word	0x0800d06c
  ldr r2, =_sbss
 8008f90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008f94:	20000c80 	.word	0x20000c80

08008f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f98:	e7fe      	b.n	8008f98 <ADC_IRQHandler>
	...

08008f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8008fd8 <HAL_InitTick+0x3c>)
 8008fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8008fdc <HAL_InitTick+0x40>)
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
{
 8008fa6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008fac:	fbb0 f0f2 	udiv	r0, r0, r2
 8008fb0:	fbb3 f0f0 	udiv	r0, r3, r0
 8008fb4:	f000 fa12 	bl	80093dc <HAL_SYSTICK_Config>
 8008fb8:	b908      	cbnz	r0, 8008fbe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fba:	2d0f      	cmp	r5, #15
 8008fbc:	d901      	bls.n	8008fc2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8008fbe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	f000 f9bc 	bl	8009348 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008fd0:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <HAL_InitTick+0x44>)
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	601d      	str	r5, [r3, #0]
}
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	20000004 	.word	0x20000004
 8008fdc:	20000000 	.word	0x20000000
 8008fe0:	20000008 	.word	0x20000008

08008fe4 <HAL_Init>:
{
 8008fe4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8009014 <HAL_Init+0x30>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ff6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ffe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009000:	2003      	movs	r0, #3
 8009002:	f000 f98f 	bl	8009324 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8009006:	2000      	movs	r0, #0
 8009008:	f7ff ffc8 	bl	8008f9c <HAL_InitTick>
  HAL_MspInit();
 800900c:	f7fe ff92 	bl	8007f34 <HAL_MspInit>
}
 8009010:	2000      	movs	r0, #0
 8009012:	bd08      	pop	{r3, pc}
 8009014:	40023c00 	.word	0x40023c00

08009018 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009018:	4a03      	ldr	r2, [pc, #12]	@ (8009028 <HAL_IncTick+0x10>)
 800901a:	4b04      	ldr	r3, [pc, #16]	@ (800902c <HAL_IncTick+0x14>)
 800901c:	6811      	ldr	r1, [r2, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	440b      	add	r3, r1
 8009022:	6013      	str	r3, [r2, #0]
}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20000b2c 	.word	0x20000b2c
 800902c:	20000004 	.word	0x20000004

08009030 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009030:	4b01      	ldr	r3, [pc, #4]	@ (8009038 <HAL_GetTick+0x8>)
 8009032:	6818      	ldr	r0, [r3, #0]
}
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	20000b2c 	.word	0x20000b2c

0800903c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009040:	f7ff fff6 	bl	8009030 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009044:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8009046:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8009048:	d002      	beq.n	8009050 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800904a:	4b04      	ldr	r3, [pc, #16]	@ (800905c <HAL_Delay+0x20>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009050:	f7ff ffee 	bl	8009030 <HAL_GetTick>
 8009054:	1b40      	subs	r0, r0, r5
 8009056:	42a0      	cmp	r0, r4
 8009058:	d3fa      	bcc.n	8009050 <HAL_Delay+0x14>
  {
  }
}
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000004 	.word	0x20000004

08009060 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8009060:	2800      	cmp	r0, #0
 8009062:	f000 809e 	beq.w	80091a2 <HAL_ADC_Init+0x142>
{
 8009066:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8009068:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800906a:	4604      	mov	r4, r0
 800906c:	b13d      	cbz	r5, 800907e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800906e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009070:	06db      	lsls	r3, r3, #27
 8009072:	d50c      	bpl.n	800908e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009074:	2300      	movs	r3, #0
 8009076:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 800907a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800907c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800907e:	f7fe ff77 	bl	8007f70 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8009082:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8009086:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800908a:	06db      	lsls	r3, r3, #27
 800908c:	d4f2      	bmi.n	8009074 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800908e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009090:	4a47      	ldr	r2, [pc, #284]	@ (80091b0 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8009092:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009096:	f023 0302 	bic.w	r3, r3, #2
 800909a:	f043 0302 	orr.w	r3, r3, #2
 800909e:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80090a0:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80090a2:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80090a4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80090a8:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80090aa:	6851      	ldr	r1, [r2, #4]
 80090ac:	6860      	ldr	r0, [r4, #4]
 80090ae:	4301      	orrs	r1, r0
 80090b0:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80090b2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80090b4:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80090b6:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80090b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80090bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80090c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80090c6:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80090c8:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80090ca:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80090ce:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80090d6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80090d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80090da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	4302      	orrs	r2, r0
 80090e4:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80090e6:	4a33      	ldr	r2, [pc, #204]	@ (80091b4 <HAL_ADC_Init+0x154>)
 80090e8:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80090ea:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80090ec:	d051      	beq.n	8009192 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80090ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80090f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80090f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	4311      	orrs	r1, r2
 80090fa:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	4302      	orrs	r2, r0
 8009108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	f022 0202 	bic.w	r2, r2, #2
 8009110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	7e21      	ldrb	r1, [r4, #24]
 8009116:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800911a:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800911c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8009120:	2a00      	cmp	r2, #0
 8009122:	d040      	beq.n	80091a6 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009124:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009126:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800912c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8009134:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	3901      	subs	r1, #1
 800913a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800913e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009142:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009144:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009148:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800914a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800914c:	3901      	subs	r1, #1
 800914e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009154:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009156:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009158:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800915c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8009164:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8009168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009172:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8009174:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009176:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800917a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800917c:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800917e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009180:	f023 0303 	bic.w	r3, r3, #3
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800918a:	2300      	movs	r3, #0
 800918c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8009190:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009192:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800919e:	609a      	str	r2, [r3, #8]
 80091a0:	e7b3      	b.n	800910a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80091a2:	2001      	movs	r0, #1
}
 80091a4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091ac:	605a      	str	r2, [r3, #4]
 80091ae:	e7c7      	b.n	8009140 <HAL_ADC_Init+0xe0>
 80091b0:	40012300 	.word	0x40012300
 80091b4:	0f000001 	.word	0x0f000001

080091b8 <HAL_ADC_ConfigChannel>:
{
 80091b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80091ba:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80091be:	b082      	sub	sp, #8
 80091c0:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80091c2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80091c4:	f04f 0000 	mov.w	r0, #0
 80091c8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80091ca:	f000 809e 	beq.w	800930a <HAL_ADC_ConfigChannel+0x152>
 80091ce:	2301      	movs	r3, #1
 80091d0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80091d4:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80091d6:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80091d8:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80091da:	2d09      	cmp	r5, #9
 80091dc:	b2a8      	uxth	r0, r5
 80091de:	d828      	bhi.n	8009232 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80091e0:	691e      	ldr	r6, [r3, #16]
 80091e2:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80091e6:	f04f 0c07 	mov.w	ip, #7
 80091ea:	fa0c fc0e 	lsl.w	ip, ip, lr
 80091ee:	ea26 060c 	bic.w	r6, r6, ip
 80091f2:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80091f4:	691e      	ldr	r6, [r3, #16]
 80091f6:	fa04 f40e 	lsl.w	r4, r4, lr
 80091fa:	4334      	orrs	r4, r6
 80091fc:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 80091fe:	684c      	ldr	r4, [r1, #4]
 8009200:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009202:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8009206:	d82a      	bhi.n	800925e <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009208:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800920a:	3905      	subs	r1, #5
 800920c:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009210:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009212:	fa0c f101 	lsl.w	r1, ip, r1
 8009216:	ea24 0101 	bic.w	r1, r4, r1
 800921a:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800921c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800921e:	4308      	orrs	r0, r1
 8009220:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009222:	493b      	ldr	r1, [pc, #236]	@ (8009310 <HAL_ADC_ConfigChannel+0x158>)
 8009224:	428b      	cmp	r3, r1
 8009226:	d02b      	beq.n	8009280 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8009228:	2000      	movs	r0, #0
 800922a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 800922e:	b002      	add	sp, #8
 8009230:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009232:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8009236:	68de      	ldr	r6, [r3, #12]
 8009238:	f1ac 0c1e 	sub.w	ip, ip, #30
 800923c:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009240:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009244:	fa0e fc0c 	lsl.w	ip, lr, ip
 8009248:	ea26 060c 	bic.w	r6, r6, ip
 800924c:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800924e:	68de      	ldr	r6, [r3, #12]
 8009250:	4334      	orrs	r4, r6
 8009252:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8009254:	684c      	ldr	r4, [r1, #4]
 8009256:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009258:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 800925c:	d9d4      	bls.n	8009208 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 800925e:	2c0c      	cmp	r4, #12
 8009260:	d81f      	bhi.n	80092a2 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009262:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8009264:	3923      	subs	r1, #35	@ 0x23
 8009266:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009268:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800926a:	fa06 f101 	lsl.w	r1, r6, r1
 800926e:	ea24 0101 	bic.w	r1, r4, r1
 8009272:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009274:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009276:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009278:	4925      	ldr	r1, [pc, #148]	@ (8009310 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800927a:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800927c:	428b      	cmp	r3, r1
 800927e:	d1d3      	bne.n	8009228 <HAL_ADC_ConfigChannel+0x70>
 8009280:	2d12      	cmp	r5, #18
 8009282:	d01b      	beq.n	80092bc <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009284:	4b23      	ldr	r3, [pc, #140]	@ (8009314 <HAL_ADC_ConfigChannel+0x15c>)
 8009286:	429d      	cmp	r5, r3
 8009288:	d022      	beq.n	80092d0 <HAL_ADC_ConfigChannel+0x118>
 800928a:	2d11      	cmp	r5, #17
 800928c:	d1cc      	bne.n	8009228 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800928e:	4b22      	ldr	r3, [pc, #136]	@ (8009318 <HAL_ADC_ConfigChannel+0x160>)
 8009290:	6859      	ldr	r1, [r3, #4]
 8009292:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8009296:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009298:	6859      	ldr	r1, [r3, #4]
 800929a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800929e:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80092a0:	e7c2      	b.n	8009228 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092a2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80092a4:	3941      	subs	r1, #65	@ 0x41
 80092a6:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80092a8:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092aa:	fa06 f101 	lsl.w	r1, r6, r1
 80092ae:	ea24 0101 	bic.w	r1, r4, r1
 80092b2:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80092b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80092b6:	4308      	orrs	r0, r1
 80092b8:	62d8      	str	r0, [r3, #44]	@ 0x2c
 80092ba:	e7b2      	b.n	8009222 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092bc:	4b16      	ldr	r3, [pc, #88]	@ (8009318 <HAL_ADC_ConfigChannel+0x160>)
 80092be:	6859      	ldr	r1, [r3, #4]
 80092c0:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80092c4:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092c6:	6859      	ldr	r1, [r3, #4]
 80092c8:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80092cc:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092ce:	e7ab      	b.n	8009228 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092d0:	4b11      	ldr	r3, [pc, #68]	@ (8009318 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092d2:	4c12      	ldr	r4, [pc, #72]	@ (800931c <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092d4:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092d6:	4812      	ldr	r0, [pc, #72]	@ (8009320 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092d8:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80092dc:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092de:	6859      	ldr	r1, [r3, #4]
 80092e0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80092e4:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	fba0 0303 	umull	r0, r3, r0, r3
 80092ec:	0c9b      	lsrs	r3, r3, #18
 80092ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d095      	beq.n	8009228 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	3b01      	subs	r3, #1
 8009300:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1f9      	bne.n	80092fc <HAL_ADC_ConfigChannel+0x144>
 8009308:	e78e      	b.n	8009228 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800930a:	2002      	movs	r0, #2
}
 800930c:	b002      	add	sp, #8
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	40012000 	.word	0x40012000
 8009314:	10000012 	.word	0x10000012
 8009318:	40012300 	.word	0x40012300
 800931c:	20000000 	.word	0x20000000
 8009320:	431bde83 	.word	0x431bde83

08009324 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009324:	4907      	ldr	r1, [pc, #28]	@ (8009344 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009326:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009328:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800932a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800932e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009332:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009334:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009336:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800933a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800933e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	e000ed00 	.word	0xe000ed00

08009348 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009348:	4b1b      	ldr	r3, [pc, #108]	@ (80093b8 <HAL_NVIC_SetPriority+0x70>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009350:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009352:	f1c3 0e07 	rsb	lr, r3, #7
 8009356:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800935a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800935e:	bf28      	it	cs
 8009360:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009364:	f1bc 0f06 	cmp.w	ip, #6
 8009368:	d91c      	bls.n	80093a4 <HAL_NVIC_SetPriority+0x5c>
 800936a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800936e:	f04f 33ff 	mov.w	r3, #4294967295
 8009372:	fa03 f30c 	lsl.w	r3, r3, ip
 8009376:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800937a:	f04f 33ff 	mov.w	r3, #4294967295
 800937e:	fa03 f30e 	lsl.w	r3, r3, lr
 8009382:	ea21 0303 	bic.w	r3, r1, r3
 8009386:	fa03 f30c 	lsl.w	r3, r3, ip
 800938a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800938c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800938e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009390:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8009392:	db0a      	blt.n	80093aa <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009394:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8009398:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800939c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80093a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80093a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093a6:	4694      	mov	ip, r2
 80093a8:	e7e7      	b.n	800937a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093aa:	4a04      	ldr	r2, [pc, #16]	@ (80093bc <HAL_NVIC_SetPriority+0x74>)
 80093ac:	f000 000f 	and.w	r0, r0, #15
 80093b0:	4402      	add	r2, r0
 80093b2:	7613      	strb	r3, [r2, #24]
 80093b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80093b8:	e000ed00 	.word	0xe000ed00
 80093bc:	e000ecfc 	.word	0xe000ecfc

080093c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80093c0:	2800      	cmp	r0, #0
 80093c2:	db07      	blt.n	80093d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093c4:	4a04      	ldr	r2, [pc, #16]	@ (80093d8 <HAL_NVIC_EnableIRQ+0x18>)
 80093c6:	0941      	lsrs	r1, r0, #5
 80093c8:	2301      	movs	r3, #1
 80093ca:	f000 001f 	and.w	r0, r0, #31
 80093ce:	4083      	lsls	r3, r0
 80093d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	e000e100 	.word	0xe000e100

080093dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093dc:	3801      	subs	r0, #1
 80093de:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80093e2:	d301      	bcc.n	80093e8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80093e6:	4770      	bx	lr
{
 80093e8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093ee:	4c07      	ldr	r4, [pc, #28]	@ (800940c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093f0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093f2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80093f6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093fa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093fc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093fe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009400:	619a      	str	r2, [r3, #24]
}
 8009402:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009406:	6119      	str	r1, [r3, #16]
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <HAL_ETH_Init>:
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
  uint32_t tickstart;

  if (heth == NULL)
 8009410:	2800      	cmp	r0, #0
 8009412:	f000 8132 	beq.w	800967a <HAL_ETH_Init+0x26a>
{
 8009416:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009418:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800941c:	b083      	sub	sp, #12
 800941e:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8124 	beq.w	800966e <HAL_ETH_Init+0x25e>
    HAL_ETH_MspInit(heth);

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009426:	4a96      	ldr	r2, [pc, #600]	@ (8009680 <HAL_ETH_Init+0x270>)

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009428:	68a8      	ldr	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009430:	4b94      	ldr	r3, [pc, #592]	@ (8009684 <HAL_ETH_Init+0x274>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009432:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8009436:	6451      	str	r1, [r2, #68]	@ 0x44
 8009438:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800943a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800943e:	9201      	str	r2, [sp, #4]
 8009440:	9a01      	ldr	r2, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8009448:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800944a:	6859      	ldr	r1, [r3, #4]
  (void)SYSCFG->PMC;

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800944c:	682a      	ldr	r2, [r5, #0]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800944e:	4301      	orrs	r1, r0
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8009450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009454:	6059      	str	r1, [r3, #4]
  (void)SYSCFG->PMC;
 8009456:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8009458:	6813      	ldr	r3, [r2, #0]
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009460:	f7ff fde6 	bl	8009030 <HAL_GetTick>
 8009464:	4606      	mov	r6, r0

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8009466:	e006      	b.n	8009476 <HAL_ETH_Init+0x66>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009468:	f7ff fde2 	bl	8009030 <HAL_GetTick>
 800946c:	1b80      	subs	r0, r0, r6
 800946e:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8009472:	f200 80f3 	bhi.w	800965c <HAL_ETH_Init+0x24c>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800947c:	6814      	ldr	r4, [r2, #0]
 800947e:	f014 0401 	ands.w	r4, r4, #1
 8009482:	d1f1      	bne.n	8009468 <HAL_ETH_Init+0x58>
{
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8009484:	6819      	ldr	r1, [r3, #0]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8009486:	4a80      	ldr	r2, [pc, #512]	@ (8009688 <HAL_ETH_Init+0x278>)
 8009488:	400a      	ands	r2, r1

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800948a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800948e:	f442 429c 	orr.w	r2, r2, #19968	@ 0x4e00
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
                        macconf->BackOffLimit |
                        ((uint32_t)macconf->DeferralCheck << 4U));

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009492:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009494:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8009496:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009498:	f7ff fdd0 	bl	800903c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800949c:	682a      	ldr	r2, [r5, #0]
 800949e:	6016      	str	r6, [r2, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80094a0:	6993      	ldr	r3, [r2, #24]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80094a2:	f64f 7141 	movw	r1, #65345	@ 0xff41
 80094a6:	400b      	ands	r3, r1

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80094a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80094ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094ae:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACFCR;
 80094b0:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094b2:	f7ff fdc3 	bl	800903c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80094b6:	682b      	ldr	r3, [r5, #0]
{
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80094b8:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
  (heth->Instance)->MACFCR = tmpreg1;
 80094bc:	619e      	str	r6, [r3, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80094be:	6991      	ldr	r1, [r2, #24]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80094c0:	4b72      	ldr	r3, [pc, #456]	@ (800968c <HAL_ETH_Init+0x27c>)
 80094c2:	400b      	ands	r3, r1

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80094c4:	f043 7308 	orr.w	r3, r3, #35651584	@ 0x2200000
 80094c8:	f043 0304 	orr.w	r3, r3, #4
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
                        dmaconf->ReceiveThresholdControl |
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80094cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094ce:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMAOMR;
 80094d0:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094d2:	f7ff fdb3 	bl	800903c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80094d6:	682b      	ldr	r3, [r5, #0]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80094d8:	4a6d      	ldr	r2, [pc, #436]	@ (8009690 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMAOMR = tmpreg1;
 80094da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094de:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR = tmpreg1;
 80094e0:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80094e2:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80094e4:	681f      	ldr	r7, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094e6:	f7ff fda9 	bl	800903c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80094ea:	682a      	ldr	r2, [r5, #0]
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80094ec:	68eb      	ldr	r3, [r5, #12]
  (heth->Instance)->DMABMR = tmpreg1;
 80094ee:	f502 5680 	add.w	r6, r2, #4096	@ 0x1000
    WRITE_REG(dmatxdesc->DESC3, 0x0U);

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80094f2:	4619      	mov	r1, r3
  (heth->Instance)->DMABMR = tmpreg1;
 80094f4:	6037      	str	r7, [r6, #0]
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80094f6:	601c      	str	r4, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80094f8:	605c      	str	r4, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80094fa:	609c      	str	r4, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80094fc:	60dc      	str	r4, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80094fe:	6818      	ldr	r0, [r3, #0]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009500:	61ab      	str	r3, [r5, #24]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009502:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 8009506:	f841 0b28 	str.w	r0, [r1], #40

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800950a:	60d9      	str	r1, [r3, #12]
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8009512:	6018      	str	r0, [r3, #0]
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8009514:	629c      	str	r4, [r3, #40]	@ 0x28
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8009516:	62dc      	str	r4, [r3, #44]	@ 0x2c
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8009518:	631c      	str	r4, [r3, #48]	@ 0x30
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800951a:	635c      	str	r4, [r3, #52]	@ 0x34
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800951c:	61e9      	str	r1, [r5, #28]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800951e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8009520:	f103 0050 	add.w	r0, r3, #80	@ 0x50
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009528:	6299      	str	r1, [r3, #40]	@ 0x28
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800952a:	6358      	str	r0, [r3, #52]	@ 0x34
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800952c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800952e:	f441 0140 	orr.w	r1, r1, #12582912	@ 0xc00000
 8009532:	6299      	str	r1, [r3, #40]	@ 0x28
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8009534:	651c      	str	r4, [r3, #80]	@ 0x50
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8009536:	655c      	str	r4, [r3, #84]	@ 0x54
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8009538:	659c      	str	r4, [r3, #88]	@ 0x58
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800953a:	65dc      	str	r4, [r3, #92]	@ 0x5c
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800953c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800953e:	6228      	str	r0, [r5, #32]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8009544:	f103 0078 	add.w	r0, r3, #120	@ 0x78
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009548:	6519      	str	r1, [r3, #80]	@ 0x50
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800954a:	65d8      	str	r0, [r3, #92]	@ 0x5c
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800954c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800954e:	f441 0140 	orr.w	r1, r1, #12582912	@ 0xc00000
 8009552:	6519      	str	r1, [r3, #80]	@ 0x50
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8009554:	679c      	str	r4, [r3, #120]	@ 0x78
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8009556:	67dc      	str	r4, [r3, #124]	@ 0x7c
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8009558:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800955c:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009560:	6f99      	ldr	r1, [r3, #120]	@ 0x78
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009562:	6268      	str	r0, [r5, #36]	@ 0x24
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009564:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009568:	6799      	str	r1, [r3, #120]	@ 0x78
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800956a:	f8c3 3084 	str.w	r3, [r3, #132]	@ 0x84
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800956e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8009570:	f441 0140 	orr.w	r1, r1, #12582912	@ 0xc00000
 8009574:	6799      	str	r1, [r3, #120]	@ 0x78
  }

  heth->TxDescList.CurTxDesc = 0;
 8009576:	62ac      	str	r4, [r5, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8009578:	6133      	str	r3, [r6, #16]

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800957a:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800957e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8009582:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8009586:	601c      	str	r4, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8009588:	605c      	str	r4, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800958a:	609c      	str	r4, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800958c:	60dc      	str	r4, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800958e:	6018      	str	r0, [r3, #0]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8009590:	6059      	str	r1, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8009592:	685f      	ldr	r7, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8009594:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8009598:	f027 4700 	bic.w	r7, r7, #2147483648	@ 0x80000000
 800959c:	605f      	str	r7, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800959e:	e9c3 4408 	strd	r4, r4, [r3, #32]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80095a2:	64ab      	str	r3, [r5, #72]	@ 0x48
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80095a4:	f8c3 c00c 	str.w	ip, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80095a8:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80095ac:	629c      	str	r4, [r3, #40]	@ 0x28
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80095ae:	62dc      	str	r4, [r3, #44]	@ 0x2c
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80095b0:	631c      	str	r4, [r3, #48]	@ 0x30
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80095b2:	635c      	str	r4, [r3, #52]	@ 0x34
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80095b4:	6298      	str	r0, [r3, #40]	@ 0x28
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80095b6:	62d9      	str	r1, [r3, #44]	@ 0x2c
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80095b8:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
 80095ba:	f027 4700 	bic.w	r7, r7, #2147483648	@ 0x80000000
 80095be:	62df      	str	r7, [r3, #44]	@ 0x2c
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80095c0:	f8c5 c04c 	str.w	ip, [r5, #76]	@ 0x4c
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80095c4:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
 80095c8:	f8c3 c034 	str.w	ip, [r3, #52]	@ 0x34
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80095cc:	651c      	str	r4, [r3, #80]	@ 0x50
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80095ce:	655c      	str	r4, [r3, #84]	@ 0x54
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80095d0:	659c      	str	r4, [r3, #88]	@ 0x58
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80095d2:	65dc      	str	r4, [r3, #92]	@ 0x5c
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80095d4:	6518      	str	r0, [r3, #80]	@ 0x50
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80095d6:	6559      	str	r1, [r3, #84]	@ 0x54
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80095d8:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 80095da:	f027 4700 	bic.w	r7, r7, #2147483648	@ 0x80000000
 80095de:	655f      	str	r7, [r3, #84]	@ 0x54
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80095e0:	f103 0778 	add.w	r7, r3, #120	@ 0x78
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80095e4:	e9c3 441c 	strd	r4, r4, [r3, #112]	@ 0x70
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80095e8:	f8c5 c050 	str.w	ip, [r5, #80]	@ 0x50
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80095ec:	65df      	str	r7, [r3, #92]	@ 0x5c
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80095ee:	679c      	str	r4, [r3, #120]	@ 0x78
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80095f0:	67dc      	str	r4, [r3, #124]	@ 0x7c
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80095f2:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80095f6:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80095fa:	6798      	str	r0, [r3, #120]	@ 0x78
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80095fc:	67d9      	str	r1, [r3, #124]	@ 0x7c
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80095fe:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8009600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009604:	67d9      	str	r1, [r3, #124]	@ 0x7c
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8009606:	e9c3 4426 	strd	r4, r4, [r3, #152]	@ 0x98
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800960a:	656f      	str	r7, [r5, #84]	@ 0x54
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800960c:	f8c3 3084 	str.w	r3, [r3, #132]	@ 0x84
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8009610:	e9c5 441a 	strd	r4, r4, [r5, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8009614:	662c      	str	r4, [r5, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8009616:	e9c5 4416 	strd	r4, r4, [r5, #88]	@ 0x58
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800961a:	6869      	ldr	r1, [r5, #4]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800961c:	60f3      	str	r3, [r6, #12]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800961e:	4b1d      	ldr	r3, [pc, #116]	@ (8009694 <HAL_ETH_Init+0x284>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8009620:	8888      	ldrh	r0, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8009622:	6418      	str	r0, [r3, #64]	@ 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8009624:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8009626:	6459      	str	r1, [r3, #68]	@ 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8009628:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800962a:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 800962e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8009630:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
 8009634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009638:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800963c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8009640:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  heth->gState = HAL_ETH_STATE_READY;
 8009644:	2110      	movs	r1, #16
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8009646:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
  return HAL_OK;
 800964a:	4620      	mov	r0, r4
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800964c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009650:	f8c5 4088 	str.w	r4, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009654:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 8009658:	b003      	add	sp, #12
 800965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800965c:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 800965e:	23e0      	movs	r3, #224	@ 0xe0
    return HAL_ERROR;
 8009660:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009662:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8009666:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
}
 800966a:	b003      	add	sp, #12
 800966c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 800966e:	2323      	movs	r3, #35	@ 0x23
 8009670:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8009674:	f7fe fcb4 	bl	8007fe0 <HAL_ETH_MspInit>
 8009678:	e6d5      	b.n	8009426 <HAL_ETH_Init+0x16>
    return HAL_ERROR;
 800967a:	2001      	movs	r0, #1
}
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40023800 	.word	0x40023800
 8009684:	40013800 	.word	0x40013800
 8009688:	fd20810f 	.word	0xfd20810f
 800968c:	f8de3f23 	.word	0xf8de3f23
 8009690:	02c12080 	.word	0x02c12080
 8009694:	40028000 	.word	0x40028000

08009698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800969c:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800969e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096a0:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80098e8 <HAL_GPIO_Init+0x250>
{
 80096a4:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 80096a6:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80096aa:	4689      	mov	r9, r1
 80096ac:	e003      	b.n	80096b6 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096ae:	3301      	adds	r3, #1
 80096b0:	2b10      	cmp	r3, #16
 80096b2:	f000 809c 	beq.w	80097ee <HAL_GPIO_Init+0x156>
    ioposition = 0x01U << position;
 80096b6:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80096ba:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 80096be:	43a2      	bics	r2, r4
 80096c0:	d1f5      	bne.n	80096ae <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096c2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096c6:	f001 0203 	and.w	r2, r1, #3
 80096ca:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096ce:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096d0:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096d2:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096d6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096d8:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096dc:	f240 808a 	bls.w	80097f4 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096e0:	2a03      	cmp	r2, #3
 80096e2:	f040 80c0 	bne.w	8009866 <HAL_GPIO_Init+0x1ce>
      temp = GPIOx->MODER;
 80096e6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096e8:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80096ec:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096ee:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80096f0:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80096f4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80096f6:	d0da      	beq.n	80096ae <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096f8:	2200      	movs	r2, #0
 80096fa:	9203      	str	r2, [sp, #12]
 80096fc:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8009700:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009704:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8009708:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800970c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8009710:	9203      	str	r2, [sp, #12]
 8009712:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009714:	f023 0203 	bic.w	r2, r3, #3
 8009718:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800971c:	f003 0703 	and.w	r7, r3, #3
 8009720:	260f      	movs	r6, #15
 8009722:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8009726:	00bf      	lsls	r7, r7, #2
 8009728:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800972c:	4e6b      	ldr	r6, [pc, #428]	@ (80098dc <HAL_GPIO_Init+0x244>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800972e:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009730:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009732:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009736:	d031      	beq.n	800979c <HAL_GPIO_Init+0x104>
 8009738:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800973c:	42b0      	cmp	r0, r6
 800973e:	f000 809d 	beq.w	800987c <HAL_GPIO_Init+0x1e4>
 8009742:	4e67      	ldr	r6, [pc, #412]	@ (80098e0 <HAL_GPIO_Init+0x248>)
 8009744:	42b0      	cmp	r0, r6
 8009746:	f000 809f 	beq.w	8009888 <HAL_GPIO_Init+0x1f0>
 800974a:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80098ec <HAL_GPIO_Init+0x254>
 800974e:	4560      	cmp	r0, ip
 8009750:	f000 80a0 	beq.w	8009894 <HAL_GPIO_Init+0x1fc>
 8009754:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80098f0 <HAL_GPIO_Init+0x258>
 8009758:	4560      	cmp	r0, ip
 800975a:	f000 80a1 	beq.w	80098a0 <HAL_GPIO_Init+0x208>
 800975e:	f8df c194 	ldr.w	ip, [pc, #404]	@ 80098f4 <HAL_GPIO_Init+0x25c>
 8009762:	4560      	cmp	r0, ip
 8009764:	f000 80a8 	beq.w	80098b8 <HAL_GPIO_Init+0x220>
 8009768:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 80098f8 <HAL_GPIO_Init+0x260>
 800976c:	4560      	cmp	r0, ip
 800976e:	f000 80a9 	beq.w	80098c4 <HAL_GPIO_Init+0x22c>
 8009772:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80098fc <HAL_GPIO_Init+0x264>
 8009776:	4560      	cmp	r0, ip
 8009778:	f000 8098 	beq.w	80098ac <HAL_GPIO_Init+0x214>
 800977c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8009900 <HAL_GPIO_Init+0x268>
 8009780:	4560      	cmp	r0, ip
 8009782:	f000 80a5 	beq.w	80098d0 <HAL_GPIO_Init+0x238>
 8009786:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8009904 <HAL_GPIO_Init+0x26c>
 800978a:	4560      	cmp	r0, ip
 800978c:	bf0c      	ite	eq
 800978e:	f04f 0c09 	moveq.w	ip, #9
 8009792:	f04f 0c0a 	movne.w	ip, #10
 8009796:	fa0c f707 	lsl.w	r7, ip, r7
 800979a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800979c:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800979e:	4a51      	ldr	r2, [pc, #324]	@ (80098e4 <HAL_GPIO_Init+0x24c>)
 80097a0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097a2:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80097a4:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80097a8:	4e4e      	ldr	r6, [pc, #312]	@ (80098e4 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 80097aa:	bf54      	ite	pl
 80097ac:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80097ae:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80097b2:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80097b4:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80097b6:	4e4b      	ldr	r6, [pc, #300]	@ (80098e4 <HAL_GPIO_Init+0x24c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097b8:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80097ba:	bf54      	ite	pl
 80097bc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80097be:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80097c2:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80097c4:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097c6:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80097c8:	4e46      	ldr	r6, [pc, #280]	@ (80098e4 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 80097ca:	bf54      	ite	pl
 80097cc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80097ce:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80097d2:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80097d4:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097d6:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097d8:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80097dc:	4941      	ldr	r1, [pc, #260]	@ (80098e4 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 80097de:	bf54      	ite	pl
 80097e0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80097e2:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097e6:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 80097e8:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097ea:	f47f af64 	bne.w	80096b6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80097ee:	b005      	add	sp, #20
 80097f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80097f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80097f6:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80097fa:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80097fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8009802:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8009806:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009808:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800980a:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800980e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8009812:	409f      	lsls	r7, r3
 8009814:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8009818:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800981a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800981c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009820:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8009824:	fa07 f70c 	lsl.w	r7, r7, ip
 8009828:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800982c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800982e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009830:	f47f af59 	bne.w	80096e6 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8009834:	08df      	lsrs	r7, r3, #3
 8009836:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800983a:	9701      	str	r7, [sp, #4]
 800983c:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800983e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8009842:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009844:	f003 0e07 	and.w	lr, r3, #7
 8009848:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800984c:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800984e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009852:	fa06 fe0e 	lsl.w	lr, r6, lr
 8009856:	9e00      	ldr	r6, [sp, #0]
 8009858:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800985c:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800985e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8009862:	6237      	str	r7, [r6, #32]
 8009864:	e73f      	b.n	80096e6 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->PUPDR;
 8009866:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009868:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800986c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8009870:	fa07 f70c 	lsl.w	r7, r7, ip
 8009874:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8009878:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800987a:	e734      	b.n	80096e6 <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800987c:	f04f 0c01 	mov.w	ip, #1
 8009880:	fa0c f707 	lsl.w	r7, ip, r7
 8009884:	433d      	orrs	r5, r7
 8009886:	e789      	b.n	800979c <HAL_GPIO_Init+0x104>
 8009888:	f04f 0c02 	mov.w	ip, #2
 800988c:	fa0c f707 	lsl.w	r7, ip, r7
 8009890:	433d      	orrs	r5, r7
 8009892:	e783      	b.n	800979c <HAL_GPIO_Init+0x104>
 8009894:	f04f 0c03 	mov.w	ip, #3
 8009898:	fa0c f707 	lsl.w	r7, ip, r7
 800989c:	433d      	orrs	r5, r7
 800989e:	e77d      	b.n	800979c <HAL_GPIO_Init+0x104>
 80098a0:	f04f 0c04 	mov.w	ip, #4
 80098a4:	fa0c f707 	lsl.w	r7, ip, r7
 80098a8:	433d      	orrs	r5, r7
 80098aa:	e777      	b.n	800979c <HAL_GPIO_Init+0x104>
 80098ac:	f04f 0c07 	mov.w	ip, #7
 80098b0:	fa0c f707 	lsl.w	r7, ip, r7
 80098b4:	433d      	orrs	r5, r7
 80098b6:	e771      	b.n	800979c <HAL_GPIO_Init+0x104>
 80098b8:	f04f 0c05 	mov.w	ip, #5
 80098bc:	fa0c f707 	lsl.w	r7, ip, r7
 80098c0:	433d      	orrs	r5, r7
 80098c2:	e76b      	b.n	800979c <HAL_GPIO_Init+0x104>
 80098c4:	f04f 0c06 	mov.w	ip, #6
 80098c8:	fa0c f707 	lsl.w	r7, ip, r7
 80098cc:	433d      	orrs	r5, r7
 80098ce:	e765      	b.n	800979c <HAL_GPIO_Init+0x104>
 80098d0:	f04f 0c08 	mov.w	ip, #8
 80098d4:	fa0c f707 	lsl.w	r7, ip, r7
 80098d8:	433d      	orrs	r5, r7
 80098da:	e75f      	b.n	800979c <HAL_GPIO_Init+0x104>
 80098dc:	40020000 	.word	0x40020000
 80098e0:	40020800 	.word	0x40020800
 80098e4:	40013c00 	.word	0x40013c00
 80098e8:	40023800 	.word	0x40023800
 80098ec:	40020c00 	.word	0x40020c00
 80098f0:	40021000 	.word	0x40021000
 80098f4:	40021400 	.word	0x40021400
 80098f8:	40021800 	.word	0x40021800
 80098fc:	40021c00 	.word	0x40021c00
 8009900:	40022000 	.word	0x40022000
 8009904:	40022400 	.word	0x40022400

08009908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009908:	b902      	cbnz	r2, 800990c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800990a:	0409      	lsls	r1, r1, #16
 800990c:	6181      	str	r1, [r0, #24]
  }
}
 800990e:	4770      	bx	lr

08009910 <HAL_HCD_Init>:
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009910:	2800      	cmp	r0, #0
 8009912:	d03e      	beq.n	8009992 <HAL_HCD_Init+0x82>
{
 8009914:	b530      	push	{r4, r5, lr}

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009916:	f890 33d5 	ldrb.w	r3, [r0, #981]	@ 0x3d5
  USBx = hhcd->Instance;
 800991a:	6805      	ldr	r5, [r0, #0]
{
 800991c:	b083      	sub	sp, #12
 800991e:	4604      	mov	r4, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009920:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009924:	b37b      	cbz	r3, 8009986 <HAL_HCD_Init+0x76>
 8009926:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009928:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800992a:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hhcd->State = HAL_HCD_STATE_BUSY;
 800992e:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  {
    hhcd->Init.dma_enable = 0U;
 8009932:	bf04      	itt	eq
 8009934:	2300      	moveq	r3, #0
 8009936:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009938:	f002 f88c 	bl	800ba54 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800993c:	7c23      	ldrb	r3, [r4, #16]
 800993e:	f88d 3000 	strb.w	r3, [sp]
 8009942:	1d25      	adds	r5, r4, #4
 8009944:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	f001 ffff 	bl	800b94c <USB_CoreInit>
 800994e:	b128      	cbz	r0, 800995c <HAL_HCD_Init+0x4c>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8009950:	2302      	movs	r3, #2
    return HAL_ERROR;
 8009952:	2001      	movs	r0, #1
    hhcd->State = HAL_HCD_STATE_ERROR;
 8009954:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  }

  hhcd->State = HAL_HCD_STATE_READY;

  return HAL_OK;
}
 8009958:	b003      	add	sp, #12
 800995a:	bd30      	pop	{r4, r5, pc}
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	2101      	movs	r1, #1
 8009960:	f002 f880 	bl	800ba64 <USB_SetCurrentMode>
 8009964:	2800      	cmp	r0, #0
 8009966:	d1f3      	bne.n	8009950 <HAL_HCD_Init+0x40>
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8009968:	7c20      	ldrb	r0, [r4, #16]
 800996a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800996e:	f88d 0000 	strb.w	r0, [sp]
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	f002 f934 	bl	800bbe0 <USB_HostInit>
 8009978:	2800      	cmp	r0, #0
 800997a:	d1e9      	bne.n	8009950 <HAL_HCD_Init+0x40>
  hhcd->State = HAL_HCD_STATE_READY;
 800997c:	2301      	movs	r3, #1
 800997e:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
}
 8009982:	b003      	add	sp, #12
 8009984:	bd30      	pop	{r4, r5, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8009986:	f880 23d4 	strb.w	r2, [r0, #980]	@ 0x3d4
    HAL_HCD_MspInit(hhcd);
 800998a:	f7fe fcc1 	bl	8008310 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	e7ca      	b.n	8009928 <HAL_HCD_Init+0x18>
    return HAL_ERROR;
 8009992:	2001      	movs	r0, #1
}
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop

08009998 <HAL_HCD_SOF_Callback>:
/**
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop

0800999c <HAL_HCD_Connect_Callback>:
/**
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop

080099a0 <HAL_HCD_Disconnect_Callback>:
/**
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop

080099a4 <HAL_HCD_PortEnabled_Callback>:
/**
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop

080099a8 <HAL_HCD_PortDisabled_Callback>:
/**
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop

080099ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop

080099b0 <HAL_HCD_IRQHandler>:
{
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80099b4:	6805      	ldr	r5, [r0, #0]
{
 80099b6:	b085      	sub	sp, #20
 80099b8:	4604      	mov	r4, r0
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80099ba:	4628      	mov	r0, r5
 80099bc:	f002 f90c 	bl	800bbd8 <USB_GetMode>
 80099c0:	2801      	cmp	r0, #1
 80099c2:	d002      	beq.n	80099ca <HAL_HCD_IRQHandler+0x1a>
}
 80099c4:	b005      	add	sp, #20
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80099ca:	6820      	ldr	r0, [r4, #0]
 80099cc:	f002 f8f6 	bl	800bbbc <USB_ReadInterrupts>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0f7      	beq.n	80099c4 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	f002 f8f1 	bl	800bbbc <USB_ReadInterrupts>
 80099da:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	bf1c      	itt	ne
 80099e2:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 80099e6:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80099e8:	f002 f8e8 	bl	800bbbc <USB_ReadInterrupts>
 80099ec:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	bf1c      	itt	ne
 80099f4:	f44f 1380 	movne.w	r3, #1048576	@ 0x100000
 80099f8:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80099fa:	f002 f8df 	bl	800bbbc <USB_ReadInterrupts>
 80099fe:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	bf1c      	itt	ne
 8009a06:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8009a0a:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009a0c:	f002 f8d6 	bl	800bbbc <USB_ReadInterrupts>
 8009a10:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	bf1c      	itt	ne
 8009a18:	2302      	movne	r3, #2
 8009a1a:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009a1c:	f002 f8ce 	bl	800bbbc <USB_ReadInterrupts>
 8009a20:	f010 5f00 	tst.w	r0, #536870912	@ 0x20000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009a24:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009a26:	d124      	bne.n	8009a72 <HAL_HCD_IRQHandler+0xc2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009a28:	f002 f8c8 	bl	800bbbc <USB_ReadInterrupts>
 8009a2c:	01c0      	lsls	r0, r0, #7
 8009a2e:	f100 810d 	bmi.w	8009c4c <HAL_HCD_IRQHandler+0x29c>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	f002 f8c2 	bl	800bbbc <USB_ReadInterrupts>
 8009a38:	0701      	lsls	r1, r0, #28
 8009a3a:	d431      	bmi.n	8009aa0 <HAL_HCD_IRQHandler+0xf0>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	f002 f8bd 	bl	800bbbc <USB_ReadInterrupts>
 8009a42:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009a46:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009a48:	d131      	bne.n	8009aae <HAL_HCD_IRQHandler+0xfe>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009a4a:	f002 f8b7 	bl	800bbbc <USB_ReadInterrupts>
 8009a4e:	06c3      	lsls	r3, r0, #27
 8009a50:	d5b8      	bpl.n	80099c4 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a52:	6825      	ldr	r5, [r4, #0]
 8009a54:	69ab      	ldr	r3, [r5, #24]
 8009a56:	f023 0310 	bic.w	r3, r3, #16
 8009a5a:	61ab      	str	r3, [r5, #24]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009a5c:	6a2e      	ldr	r6, [r5, #32]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009a5e:	f3c6 4243 	ubfx	r2, r6, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;

  switch (pktsts)
 8009a62:	2a02      	cmp	r2, #2
 8009a64:	f000 814c 	beq.w	8009d00 <HAL_HCD_IRQHandler+0x350>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a68:	69ab      	ldr	r3, [r5, #24]
 8009a6a:	f043 0310 	orr.w	r3, r3, #16
 8009a6e:	61ab      	str	r3, [r5, #24]
 8009a70:	e7a8      	b.n	80099c4 <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009a72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009a76:	6143      	str	r3, [r0, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009a78:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8009a7c:	07de      	lsls	r6, r3, #31
 8009a7e:	d4d3      	bmi.n	8009a28 <HAL_HCD_IRQHandler+0x78>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009a80:	2110      	movs	r1, #16
 8009a82:	4628      	mov	r0, r5
 8009a84:	f002 f826 	bl	800bad4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f002 f84b 	bl	800bb24 <USB_FlushRxFifo>
        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009a8e:	7a63      	ldrb	r3, [r4, #9]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	f000 8292 	beq.w	8009fba <HAL_HCD_IRQHandler+0x60a>
        HAL_HCD_Disconnect_Callback(hhcd);
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7ff ff82 	bl	80099a0 <HAL_HCD_Disconnect_Callback>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	e7c3      	b.n	8009a28 <HAL_HCD_IRQHandler+0x78>
      HAL_HCD_SOF_Callback(hhcd);
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f7ff ff79 	bl	8009998 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009aa6:	6820      	ldr	r0, [r4, #0]
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	6143      	str	r3, [r0, #20]
 8009aac:	e7c7      	b.n	8009a3e <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009aae:	f002 f97d 	bl	800bdac <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009ab2:	7967      	ldrb	r7, [r4, #5]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009ab4:	4682      	mov	sl, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009ab6:	2f00      	cmp	r7, #0
 8009ab8:	f000 8102 	beq.w	8009cc0 <HAL_HCD_IRQHandler+0x310>
 8009abc:	4626      	mov	r6, r4
 8009abe:	f505 65a0 	add.w	r5, r5, #1280	@ 0x500
 8009ac2:	f04f 0b00 	mov.w	fp, #0
 8009ac6:	e02b      	b.n	8009b20 <HAL_HCD_IRQHandler+0x170>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009ac8:	f002 f87c 	bl	800bbc4 <USB_ReadChInterrupts>
 8009acc:	0742      	lsls	r2, r0, #29
 8009ace:	d54b      	bpl.n	8009b68 <HAL_HCD_IRQHandler+0x1b8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009ad0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009ad4:	444b      	add	r3, r9
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009ada:	f04f 0307 	mov.w	r3, #7
 8009ade:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ae2:	6820      	ldr	r0, [r4, #0]
 8009ae4:	4641      	mov	r1, r8
 8009ae6:	f002 f967 	bl	800bdb8 <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009aea:	6820      	ldr	r0, [r4, #0]
 8009aec:	4641      	mov	r1, r8
 8009aee:	f002 f869 	bl	800bbc4 <USB_ReadChInterrupts>
 8009af2:	f410 7300 	ands.w	r3, r0, #512	@ 0x200
 8009af6:	d04c      	beq.n	8009b92 <HAL_HCD_IRQHandler+0x1e2>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009af8:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 8009afc:	444f      	add	r7, r9
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	4641      	mov	r1, r8
 8009b02:	f002 f959 	bl	800bdb8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b0a:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009b0c:	7967      	ldrb	r7, [r4, #5]
 8009b0e:	f10b 0b01 	add.w	fp, fp, #1
 8009b12:	455f      	cmp	r7, fp
 8009b14:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009b18:	f105 0520 	add.w	r5, r5, #32
 8009b1c:	f240 80d0 	bls.w	8009cc0 <HAL_HCD_IRQHandler+0x310>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009b20:	f00b 030f 	and.w	r3, fp, #15
 8009b24:	fa2a f303 	lsr.w	r3, sl, r3
 8009b28:	07da      	lsls	r2, r3, #31
 8009b2a:	d5f0      	bpl.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009b2c:	682b      	ldr	r3, [r5, #0]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b2e:	6827      	ldr	r7, [r4, #0]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009b30:	fa5f f88b 	uxtb.w	r8, fp
 8009b34:	041b      	lsls	r3, r3, #16
 8009b36:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009b3a:	4641      	mov	r1, r8
 8009b3c:	4638      	mov	r0, r7
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009b3e:	d4c3      	bmi.n	8009ac8 <HAL_HCD_IRQHandler+0x118>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009b40:	f002 f840 	bl	800bbc4 <USB_ReadChInterrupts>
 8009b44:	f010 0304 	ands.w	r3, r0, #4
 8009b48:	d068      	beq.n	8009c1c <HAL_HCD_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009b4a:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 8009b4e:	444f      	add	r7, r9
 8009b50:	2304      	movs	r3, #4
 8009b52:	60bb      	str	r3, [r7, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009b54:	f04f 0307 	mov.w	r3, #7
 8009b58:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	4641      	mov	r1, r8
 8009b60:	f002 f92a 	bl	800bdb8 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009b64:	7967      	ldrb	r7, [r4, #5]
 8009b66:	e7d2      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8009b68:	6820      	ldr	r0, [r4, #0]
 8009b6a:	4641      	mov	r1, r8
 8009b6c:	f002 f82a 	bl	800bbc4 <USB_ReadChInterrupts>
 8009b70:	05c3      	lsls	r3, r0, #23
 8009b72:	f140 80aa 	bpl.w	8009cca <HAL_HCD_IRQHandler+0x31a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009b76:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009b7a:	444b      	add	r3, r9
 8009b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b80:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009b82:	2308      	movs	r3, #8
 8009b84:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	4641      	mov	r1, r8
 8009b8c:	f002 f914 	bl	800bdb8 <USB_HC_Halt>
 8009b90:	e7ab      	b.n	8009aea <HAL_HCD_IRQHandler+0x13a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	4641      	mov	r1, r8
 8009b98:	f002 f814 	bl	800bbc4 <USB_ReadChInterrupts>
 8009b9c:	07c3      	lsls	r3, r0, #31
 8009b9e:	f140 80db 	bpl.w	8009d58 <HAL_HCD_IRQHandler+0x3a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009ba2:	f507 60a0 	add.w	r0, r7, #1280	@ 0x500
 8009ba6:	eb00 0709 	add.w	r7, r0, r9
 8009baa:	2220      	movs	r2, #32
 8009bac:	60ba      	str	r2, [r7, #8]
    if (hhcd->hc[chnum].do_csplit == 1U)
 8009bae:	7ef2      	ldrb	r2, [r6, #27]
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	2a01      	cmp	r2, #1
 8009bb4:	d104      	bne.n	8009bc0 <HAL_HCD_IRQHandler+0x210>
      hhcd->hc[chnum].do_csplit = 0U;
 8009bb6:	76f3      	strb	r3, [r6, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bbe:	607b      	str	r3, [r7, #4]
    if (hhcd->Init.dma_enable != 0U)
 8009bc0:	79a1      	ldrb	r1, [r4, #6]
 8009bc2:	b129      	cbz	r1, 8009bd0 <HAL_HCD_IRQHandler+0x220>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8009bc8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009bcc:	1a9b      	subs	r3, r3, r2
 8009bce:	63b3      	str	r3, [r6, #56]	@ 0x38
    hhcd->hc[chnum].state = HC_XFRC;
 8009bd0:	2301      	movs	r3, #1
    hhcd->hc[chnum].ErrCnt = 0U;
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	6472      	str	r2, [r6, #68]	@ 0x44
    hhcd->hc[chnum].state = HC_XFRC;
 8009bd6:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009bda:	60bb      	str	r3, [r7, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009bdc:	f896 2026 	ldrb.w	r2, [r6, #38]	@ 0x26
 8009be0:	f012 02fd 	ands.w	r2, r2, #253	@ 0xfd
 8009be4:	f000 8084 	beq.w	8009cf0 <HAL_HCD_IRQHandler+0x340>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009be8:	2a01      	cmp	r2, #1
 8009bea:	d10c      	bne.n	8009c06 <HAL_HCD_IRQHandler+0x256>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009bec:	f850 3009 	ldr.w	r3, [r0, r9]
 8009bf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009bf4:	f840 3009 	str.w	r3, [r0, r9]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009bf8:	4641      	mov	r1, r8
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009bfa:	f886 204c 	strb.w	r2, [r6, #76]	@ 0x4c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7ff fed4 	bl	80099ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8009c04:	79a1      	ldrb	r1, [r4, #6]
 8009c06:	2901      	cmp	r1, #1
 8009c08:	f000 80d4 	beq.w	8009db4 <HAL_HCD_IRQHandler+0x404>
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009c0c:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8009c10:	f083 0301 	eor.w	r3, r3, #1
 8009c14:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c18:	7967      	ldrb	r7, [r4, #5]
 8009c1a:	e778      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009c1c:	6820      	ldr	r0, [r4, #0]
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	4641      	mov	r1, r8
 8009c22:	f001 ffcf 	bl	800bbc4 <USB_ReadChInterrupts>
 8009c26:	0682      	lsls	r2, r0, #26
 8009c28:	f140 8083 	bpl.w	8009d32 <HAL_HCD_IRQHandler+0x382>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009c2c:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 8009c30:	444f      	add	r7, r9
 8009c32:	2220      	movs	r2, #32
 8009c34:	60ba      	str	r2, [r7, #8]
    if (hhcd->hc[chnum].do_ping == 1U)
 8009c36:	7e72      	ldrb	r2, [r6, #25]
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	2a01      	cmp	r2, #1
 8009c3c:	f000 8109 	beq.w	8009e52 <HAL_HCD_IRQHandler+0x4a2>
    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009c40:	7eb3      	ldrb	r3, [r6, #26]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	f000 80c0 	beq.w	8009dc8 <HAL_HCD_IRQHandler+0x418>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c48:	7967      	ldrb	r7, [r4, #5]
 8009c4a:	e760      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4c:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009c4e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	@ 0x440
 8009c52:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8009c54:	f8d6 3440 	ldr.w	r3, [r6, #1088]	@ 0x440
 8009c58:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009c60:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	0799      	lsls	r1, r3, #30
 8009c66:	d507      	bpl.n	8009c78 <HAL_HCD_IRQHandler+0x2c8>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	07da      	lsls	r2, r3, #31
 8009c6c:	f100 80c0 	bmi.w	8009df0 <HAL_HCD_IRQHandler+0x440>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	f043 0302 	orr.w	r3, r3, #2
 8009c76:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	071b      	lsls	r3, r3, #28
 8009c7c:	d515      	bpl.n	8009caa <HAL_HCD_IRQHandler+0x2fa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	f043 0308 	orr.w	r3, r3, #8
 8009c84:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	075f      	lsls	r7, r3, #29
 8009c8a:	f140 80b5 	bpl.w	8009df8 <HAL_HCD_IRQHandler+0x448>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009c8e:	7a61      	ldrb	r1, [r4, #9]
 8009c90:	2902      	cmp	r1, #2
 8009c92:	f000 80fc 	beq.w	8009e8e <HAL_HCD_IRQHandler+0x4de>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009c96:	79e3      	ldrb	r3, [r4, #7]
 8009c98:	2b01      	cmp	r3, #1
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009c9a:	bf04      	itt	eq
 8009c9c:	f64e 2260 	movweq	r2, #60000	@ 0xea60
 8009ca0:	f8c6 2404 	streq.w	r2, [r6, #1028]	@ 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7ff fe7d 	bl	80099a4 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009caa:	9b02      	ldr	r3, [sp, #8]
 8009cac:	0698      	lsls	r0, r3, #26
 8009cae:	d503      	bpl.n	8009cb8 <HAL_HCD_IRQHandler+0x308>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009cb0:	9b03      	ldr	r3, [sp, #12]
 8009cb2:	f043 0320 	orr.w	r3, r3, #32
 8009cb6:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	f8c6 3440 	str.w	r3, [r6, #1088]	@ 0x440
}
 8009cbe:	e6b8      	b.n	8009a32 <HAL_HCD_IRQHandler+0x82>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009cc6:	6143      	str	r3, [r0, #20]
 8009cc8:	e6bf      	b.n	8009a4a <HAL_HCD_IRQHandler+0x9a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009cca:	6820      	ldr	r0, [r4, #0]
 8009ccc:	4641      	mov	r1, r8
 8009cce:	f001 ff79 	bl	800bbc4 <USB_ReadChInterrupts>
 8009cd2:	0700      	lsls	r0, r0, #28
 8009cd4:	d55a      	bpl.n	8009d8c <HAL_HCD_IRQHandler+0x3dc>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009cd6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009cda:	444b      	add	r3, r9
 8009cdc:	2208      	movs	r2, #8
 8009cde:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009ce0:	2306      	movs	r3, #6
 8009ce2:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	4641      	mov	r1, r8
 8009cea:	f002 f865 	bl	800bdb8 <USB_HC_Halt>
 8009cee:	e6fc      	b.n	8009aea <HAL_HCD_IRQHandler+0x13a>
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009cf0:	4641      	mov	r1, r8
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	f002 f860 	bl	800bdb8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 8009cfc:	79a1      	ldrb	r1, [r4, #6]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009cfe:	e782      	b.n	8009c06 <HAL_HCD_IRQHandler+0x256>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d00:	f3c6 120a 	ubfx	r2, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	f43f aeaf 	beq.w	8009a68 <HAL_HCD_IRQHandler+0xb8>
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009d0a:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009d0e:	ebc6 1106 	rsb	r1, r6, r6, lsl #4
 8009d12:	eb04 0781 	add.w	r7, r4, r1, lsl #2
 8009d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	f43f aea5 	beq.w	8009a68 <HAL_HCD_IRQHandler+0xb8>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009d1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d22:	4410      	add	r0, r2
 8009d24:	4298      	cmp	r0, r3
 8009d26:	f240 8167 	bls.w	8009ff8 <HAL_HCD_IRQHandler+0x648>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009d2a:	2304      	movs	r3, #4
 8009d2c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8009d30:	e69a      	b.n	8009a68 <HAL_HCD_IRQHandler+0xb8>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009d32:	6820      	ldr	r0, [r4, #0]
 8009d34:	4641      	mov	r1, r8
 8009d36:	f001 ff45 	bl	800bbc4 <USB_ReadChInterrupts>
 8009d3a:	f410 7300 	ands.w	r3, r0, #512	@ 0x200
 8009d3e:	d05f      	beq.n	8009e00 <HAL_HCD_IRQHandler+0x450>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009d40:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009d44:	444b      	add	r3, r9
 8009d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d4a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009d4c:	609a      	str	r2, [r3, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d4e:	4641      	mov	r1, r8
 8009d50:	f002 f832 	bl	800bdb8 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d54:	7967      	ldrb	r7, [r4, #5]
 8009d56:	e6da      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	f001 ff32 	bl	800bbc4 <USB_ReadChInterrupts>
 8009d60:	0680      	lsls	r0, r0, #26
 8009d62:	f140 809f 	bpl.w	8009ea4 <HAL_HCD_IRQHandler+0x4f4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009d66:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009d6a:	444b      	add	r3, r9
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	609a      	str	r2, [r3, #8]
    if (hhcd->hc[chnum].do_ssplit == 1U)
 8009d70:	7eb3      	ldrb	r3, [r6, #26]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	f47f af68 	bne.w	8009c48 <HAL_HCD_IRQHandler+0x298>
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d78:	6820      	ldr	r0, [r4, #0]
      hhcd->hc[chnum].do_csplit = 1U;
 8009d7a:	76f3      	strb	r3, [r6, #27]
      hhcd->hc[chnum].state = HC_ACK;
 8009d7c:	2303      	movs	r3, #3
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d7e:	4641      	mov	r1, r8
      hhcd->hc[chnum].state = HC_ACK;
 8009d80:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d84:	f002 f818 	bl	800bdb8 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d88:	7967      	ldrb	r7, [r4, #5]
 8009d8a:	e6c0      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	f001 ff18 	bl	800bbc4 <USB_ReadChInterrupts>
 8009d94:	0541      	lsls	r1, r0, #21
 8009d96:	d566      	bpl.n	8009e66 <HAL_HCD_IRQHandler+0x4b6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009d98:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009d9c:	444b      	add	r3, r9
 8009d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009da2:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009da4:	2309      	movs	r3, #9
 8009da6:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009daa:	6820      	ldr	r0, [r4, #0]
 8009dac:	4641      	mov	r1, r8
 8009dae:	f002 f803 	bl	800bdb8 <USB_HC_Halt>
 8009db2:	e69a      	b.n	8009aea <HAL_HCD_IRQHandler+0x13a>
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009db4:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8009db6:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8009db8:	3b01      	subs	r3, #1
 8009dba:	4413      	add	r3, r2
 8009dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc0:	07df      	lsls	r7, r3, #31
 8009dc2:	f53f af23 	bmi.w	8009c0c <HAL_HCD_IRQHandler+0x25c>
 8009dc6:	e73f      	b.n	8009c48 <HAL_HCD_IRQHandler+0x298>
    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009dc8:	7ef2      	ldrb	r2, [r6, #27]
 8009dca:	2a00      	cmp	r2, #0
 8009dcc:	f47f af3c 	bne.w	8009c48 <HAL_HCD_IRQHandler+0x298>
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009dd0:	f896 2026 	ldrb.w	r2, [r6, #38]	@ 0x26
 8009dd4:	2a01      	cmp	r2, #1
        hhcd->hc[chnum].do_csplit = 1U;
 8009dd6:	bf18      	it	ne
 8009dd8:	76f3      	strbne	r3, [r6, #27]
      hhcd->hc[chnum].state = HC_ACK;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	4641      	mov	r1, r8
 8009de4:	f001 ffe8 	bl	800bdb8 <USB_HC_Halt>
      hhcd->hc[chnum].ErrCnt = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	6473      	str	r3, [r6, #68]	@ 0x44
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009dec:	7967      	ldrb	r7, [r4, #5]
 8009dee:	e68e      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
      HAL_HCD_Connect_Callback(hhcd);
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fdd3 	bl	800999c <HAL_HCD_Connect_Callback>
 8009df6:	e73b      	b.n	8009c70 <HAL_HCD_IRQHandler+0x2c0>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff fdd5 	bl	80099a8 <HAL_HCD_PortDisabled_Callback>
 8009dfe:	e754      	b.n	8009caa <HAL_HCD_IRQHandler+0x2fa>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009e00:	6820      	ldr	r0, [r4, #0]
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	4641      	mov	r1, r8
 8009e06:	f001 fedd 	bl	800bbc4 <USB_ReadChInterrupts>
 8009e0a:	07c3      	lsls	r3, r0, #31
 8009e0c:	f140 80da 	bpl.w	8009fc4 <HAL_HCD_IRQHandler+0x614>
    hhcd->hc[chnum].ErrCnt = 0U;
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	6473      	str	r3, [r6, #68]	@ 0x44
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	4641      	mov	r1, r8
 8009e18:	f001 fed4 	bl	800bbc4 <USB_ReadChInterrupts>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009e1c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009e20:	0640      	lsls	r0, r0, #25
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009e22:	444b      	add	r3, r9
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009e24:	d503      	bpl.n	8009e2e <HAL_HCD_IRQHandler+0x47e>
      hhcd->hc[chnum].do_ping = 1U;
 8009e26:	2201      	movs	r2, #1
 8009e28:	7672      	strb	r2, [r6, #25]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009e2a:	2240      	movs	r2, #64	@ 0x40
 8009e2c:	609a      	str	r2, [r3, #8]
    if (hhcd->hc[chnum].do_csplit != 0U)
 8009e2e:	7ef2      	ldrb	r2, [r6, #27]
 8009e30:	b12a      	cbz	r2, 8009e3e <HAL_HCD_IRQHandler+0x48e>
      hhcd->hc[chnum].do_csplit = 0U;
 8009e32:	2200      	movs	r2, #0
 8009e34:	76f2      	strb	r2, [r6, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009e3c:	605a      	str	r2, [r3, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009e3e:	2201      	movs	r2, #1
 8009e40:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8009e42:	f886 204d 	strb.w	r2, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	4641      	mov	r1, r8
 8009e4a:	f001 ffb5 	bl	800bdb8 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009e4e:	7967      	ldrb	r7, [r4, #5]
 8009e50:	e65d      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e52:	6820      	ldr	r0, [r4, #0]
      hhcd->hc[chnum].do_ping = 0U;
 8009e54:	7673      	strb	r3, [r6, #25]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009e56:	f240 3302 	movw	r3, #770	@ 0x302
 8009e5a:	f8a6 304c 	strh.w	r3, [r6, #76]	@ 0x4c
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e5e:	4641      	mov	r1, r8
 8009e60:	f001 ffaa 	bl	800bdb8 <USB_HC_Halt>
 8009e64:	e6ec      	b.n	8009c40 <HAL_HCD_IRQHandler+0x290>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009e66:	6820      	ldr	r0, [r4, #0]
 8009e68:	4641      	mov	r1, r8
 8009e6a:	f001 feab 	bl	800bbc4 <USB_ReadChInterrupts>
 8009e6e:	0602      	lsls	r2, r0, #24
 8009e70:	f57f ae3b 	bpl.w	8009aea <HAL_HCD_IRQHandler+0x13a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009e74:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009e78:	444b      	add	r3, r9
 8009e7a:	2280      	movs	r2, #128	@ 0x80
 8009e7c:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009e7e:	2307      	movs	r3, #7
 8009e80:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e84:	6820      	ldr	r0, [r4, #0]
 8009e86:	4641      	mov	r1, r8
 8009e88:	f001 ff96 	bl	800bdb8 <USB_HC_Halt>
 8009e8c:	e62d      	b.n	8009aea <HAL_HCD_IRQHandler+0x13a>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009e8e:	9b02      	ldr	r3, [sp, #8]
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009e90:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009e92:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009e96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009e9a:	bf18      	it	ne
 8009e9c:	2101      	movne	r1, #1
 8009e9e:	f001 ff65 	bl	800bd6c <USB_InitFSLSPClkSel>
 8009ea2:	e6ff      	b.n	8009ca4 <HAL_HCD_IRQHandler+0x2f4>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	6820      	ldr	r0, [r4, #0]
 8009ea8:	f001 fe8c 	bl	800bbc4 <USB_ReadChInterrupts>
 8009eac:	0781      	lsls	r1, r0, #30
 8009eae:	f140 80ba 	bpl.w	800a026 <HAL_HCD_IRQHandler+0x676>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009eb2:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 8009eb6:	eb07 0209 	add.w	r2, r7, r9
 8009eba:	2302      	movs	r3, #2
 8009ebc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8009ebe:	f896 304d 	ldrb.w	r3, [r6, #77]	@ 0x4d
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	f000 80d9 	beq.w	800a07a <HAL_HCD_IRQHandler+0x6ca>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009ec8:	3b02      	subs	r3, #2
 8009eca:	2b07      	cmp	r3, #7
 8009ecc:	d824      	bhi.n	8009f18 <HAL_HCD_IRQHandler+0x568>
 8009ece:	a101      	add	r1, pc, #4	@ (adr r1, 8009ed4 <HAL_HCD_IRQHandler+0x524>)
 8009ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ed4:	08009c49 	.word	0x08009c49
 8009ed8:	08009f77 	.word	0x08009f77
 8009edc:	08009f63 	.word	0x08009f63
 8009ee0:	08009f31 	.word	0x08009f31
 8009ee4:	08009f27 	.word	0x08009f27
 8009ee8:	08009ef5 	.word	0x08009ef5
 8009eec:	08009fab 	.word	0x08009fab
 8009ef0:	08009ef5 	.word	0x08009ef5
      hhcd->hc[chnum].ErrCnt++;
 8009ef4:	6c73      	ldr	r3, [r6, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_HALTED;
 8009ef6:	2102      	movs	r1, #2
      hhcd->hc[chnum].ErrCnt++;
 8009ef8:	3301      	adds	r3, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009efa:	428b      	cmp	r3, r1
      hhcd->hc[chnum].ErrCnt++;
 8009efc:	6473      	str	r3, [r6, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_HALTED;
 8009efe:	f886 104d 	strb.w	r1, [r6, #77]	@ 0x4d
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009f02:	f240 812a 	bls.w	800a15a <HAL_HCD_IRQHandler+0x7aa>
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8009f06:	7eb1      	ldrb	r1, [r6, #26]
        hhcd->hc[chnum].ErrCnt = 0U;
 8009f08:	2300      	movs	r3, #0
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8009f0a:	2901      	cmp	r1, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8009f0c:	6473      	str	r3, [r6, #68]	@ 0x44
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8009f0e:	f000 815b 	beq.w	800a1c8 <HAL_HCD_IRQHandler+0x818>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009f12:	2304      	movs	r3, #4
 8009f14:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009f18:	f896 204c 	ldrb.w	r2, [r6, #76]	@ 0x4c
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f7ff fd44 	bl	80099ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8009f24:	e690      	b.n	8009c48 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009f26:	f240 2305 	movw	r3, #517	@ 0x205
 8009f2a:	f8a6 304c 	strh.w	r3, [r6, #76]	@ 0x4c
 8009f2e:	e7f3      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f30:	7ef0      	ldrb	r0, [r6, #27]
      hhcd->hc[chnum].state = HC_HALTED;
 8009f32:	2102      	movs	r1, #2
      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f34:	2801      	cmp	r0, #1
      hhcd->hc[chnum].state = HC_HALTED;
 8009f36:	f886 104d 	strb.w	r1, [r6, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f3a:	d1ed      	bne.n	8009f18 <HAL_HCD_IRQHandler+0x568>
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009f3c:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	f000 812d 	beq.w	800a1a0 <HAL_HCD_IRQHandler+0x7f0>
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f46:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f4a:	f886 104c 	strb.w	r1, [r6, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f4e:	d1e3      	bne.n	8009f18 <HAL_HCD_IRQHandler+0x568>
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f50:	f857 3009 	ldr.w	r3, [r7, r9]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f5c:	f847 3009 	str.w	r3, [r7, r9]
 8009f60:	e7da      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f62:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f66:	f240 2202 	movw	r2, #514	@ 0x202
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f6a:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f6e:	f8a6 204c 	strh.w	r2, [r6, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f72:	d1d1      	bne.n	8009f18 <HAL_HCD_IRQHandler+0x568>
 8009f74:	e7ec      	b.n	8009f50 <HAL_HCD_IRQHandler+0x5a0>
      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f76:	7ef1      	ldrb	r1, [r6, #27]
      hhcd->hc[chnum].state = HC_HALTED;
 8009f78:	2302      	movs	r3, #2
      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f7a:	2901      	cmp	r1, #1
      hhcd->hc[chnum].state = HC_HALTED;
 8009f7c:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f80:	d1ca      	bne.n	8009f18 <HAL_HCD_IRQHandler+0x568>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f82:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009f86:	6853      	ldr	r3, [r2, #4]
 8009f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f8c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009f8e:	68d3      	ldr	r3, [r2, #12]
 8009f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f94:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8009f96:	68d3      	ldr	r3, [r2, #12]
 8009f98:	f023 0320 	bic.w	r3, r3, #32
 8009f9c:	60d3      	str	r3, [r2, #12]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f9e:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 8009fa2:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8009fa6:	d1b7      	bne.n	8009f18 <HAL_HCD_IRQHandler+0x568>
 8009fa8:	e7d2      	b.n	8009f50 <HAL_HCD_IRQHandler+0x5a0>
      hhcd->hc[chnum].ErrCnt++;
 8009faa:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8009fac:	3301      	adds	r3, #1
 8009fae:	6473      	str	r3, [r6, #68]	@ 0x44
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009fb0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8009fb4:	f8a6 304c 	strh.w	r3, [r6, #76]	@ 0x4c
 8009fb8:	e7ae      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009fba:	6820      	ldr	r0, [r4, #0]
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	f001 fed5 	bl	800bd6c <USB_InitFSLSPClkSel>
 8009fc2:	e568      	b.n	8009a96 <HAL_HCD_IRQHandler+0xe6>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009fc4:	4641      	mov	r1, r8
 8009fc6:	6820      	ldr	r0, [r4, #0]
 8009fc8:	f001 fdfc 	bl	800bbc4 <USB_ReadChInterrupts>
 8009fcc:	0641      	lsls	r1, r0, #25
 8009fce:	d53f      	bpl.n	800a050 <HAL_HCD_IRQHandler+0x6a0>
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009fd0:	7eb3      	ldrb	r3, [r6, #26]
    hhcd->hc[chnum].state = HC_NYET;
 8009fd2:	2205      	movs	r2, #5
 8009fd4:	f886 204d 	strb.w	r2, [r6, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009fd8:	b90b      	cbnz	r3, 8009fde <HAL_HCD_IRQHandler+0x62e>
      hhcd->hc[chnum].do_ping = 1U;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	7673      	strb	r3, [r6, #25]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6473      	str	r3, [r6, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	f001 fee7 	bl	800bdb8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009fea:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8009fee:	444b      	add	r3, r9
 8009ff0:	2240      	movs	r2, #64	@ 0x40
 8009ff2:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009ff4:	7967      	ldrb	r7, [r4, #5]
 8009ff6:	e58a      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
          (void)USB_ReadPacket(hhcd->Instance,
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	f001 fdb8 	bl	800bb70 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800a000:	9a01      	ldr	r2, [sp, #4]
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a004:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800a006:	4413      	add	r3, r2
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
          hhcd->hc[chnum].xfer_count += pktcnt;
 800a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a00c:	f505 65a0 	add.w	r5, r5, #1280	@ 0x500
          hhcd->hc[chnum].xfer_count += pktcnt;
 800a010:	4413      	add	r3, r2
 800a012:	63bb      	str	r3, [r7, #56]	@ 0x38
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a014:	eb05 1346 	add.w	r3, r5, r6, lsl #5
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a018:	4282      	cmp	r2, r0
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	ea4f 1146 	mov.w	r1, r6, lsl #5
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a020:	d04f      	beq.n	800a0c2 <HAL_HCD_IRQHandler+0x712>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	e520      	b.n	8009a68 <HAL_HCD_IRQHandler+0xb8>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a026:	6820      	ldr	r0, [r4, #0]
 800a028:	4641      	mov	r1, r8
 800a02a:	f001 fdcb 	bl	800bbc4 <USB_ReadChInterrupts>
 800a02e:	f010 0240 	ands.w	r2, r0, #64	@ 0x40
 800a032:	d027      	beq.n	800a084 <HAL_HCD_IRQHandler+0x6d4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a034:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800a038:	444b      	add	r3, r9
 800a03a:	2240      	movs	r2, #64	@ 0x40
 800a03c:	609a      	str	r2, [r3, #8]
    if (hhcd->hc[chnum].do_ssplit == 0U)
 800a03e:	7eb3      	ldrb	r3, [r6, #26]
    hhcd->hc[chnum].state = HC_NYET;
 800a040:	2205      	movs	r2, #5
 800a042:	f886 204d 	strb.w	r2, [r6, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 800a046:	2b00      	cmp	r3, #0
 800a048:	f47f ad88 	bne.w	8009b5c <HAL_HCD_IRQHandler+0x1ac>
      hhcd->hc[chnum].ErrCnt = 0U;
 800a04c:	6473      	str	r3, [r6, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a04e:	e585      	b.n	8009b5c <HAL_HCD_IRQHandler+0x1ac>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	4641      	mov	r1, r8
 800a054:	f001 fdb6 	bl	800bbc4 <USB_ReadChInterrupts>
 800a058:	f010 0308 	ands.w	r3, r0, #8
 800a05c:	d045      	beq.n	800a0ea <HAL_HCD_IRQHandler+0x73a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a05e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800a062:	444b      	add	r3, r9
 800a064:	2208      	movs	r2, #8
 800a066:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a068:	2306      	movs	r3, #6
 800a06a:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a06e:	6820      	ldr	r0, [r4, #0]
 800a070:	4641      	mov	r1, r8
 800a072:	f001 fea1 	bl	800bdb8 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a076:	7967      	ldrb	r7, [r4, #5]
 800a078:	e549      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a07a:	f240 2301 	movw	r3, #513	@ 0x201
 800a07e:	f8a6 304c 	strh.w	r3, [r6, #76]	@ 0x4c
 800a082:	e749      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	9201      	str	r2, [sp, #4]
 800a088:	4641      	mov	r1, r8
 800a08a:	f001 fd9b 	bl	800bbc4 <USB_ReadChInterrupts>
 800a08e:	f010 0f10 	tst.w	r0, #16
 800a092:	9a01      	ldr	r2, [sp, #4]
 800a094:	f43f add8 	beq.w	8009c48 <HAL_HCD_IRQHandler+0x298>
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a098:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d065      	beq.n	800a16c <HAL_HCD_IRQHandler+0x7bc>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a0a0:	f013 03fd 	ands.w	r3, r3, #253	@ 0xfd
 800a0a4:	d16a      	bne.n	800a17c <HAL_HCD_IRQHandler+0x7cc>
      hhcd->hc[chnum].ErrCnt = 0U;
 800a0a6:	6473      	str	r3, [r6, #68]	@ 0x44
      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800a0a8:	79a3      	ldrb	r3, [r4, #6]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d05f      	beq.n	800a16e <HAL_HCD_IRQHandler+0x7be>
 800a0ae:	7ef3      	ldrb	r3, [r6, #27]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d05c      	beq.n	800a16e <HAL_HCD_IRQHandler+0x7be>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a0b4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800a0b8:	444b      	add	r3, r9
 800a0ba:	2210      	movs	r2, #16
 800a0bc:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a0be:	7967      	ldrb	r7, [r4, #5]
 800a0c0:	e525      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a0c2:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0ab      	beq.n	800a022 <HAL_HCD_IRQHandler+0x672>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800a0ca:	586b      	ldr	r3, [r5, r1]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a0d4:	506b      	str	r3, [r5, r1]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a0d6:	233c      	movs	r3, #60	@ 0x3c
 800a0d8:	fb03 4306 	mla	r3, r3, r6, r4
 800a0dc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800a0e0:	f082 0201 	eor.w	r2, r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a0e8:	e79b      	b.n	800a022 <HAL_HCD_IRQHandler+0x672>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a0ea:	6820      	ldr	r0, [r4, #0]
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	f001 fd68 	bl	800bbc4 <USB_ReadChInterrupts>
 800a0f4:	06c2      	lsls	r2, r0, #27
 800a0f6:	d50f      	bpl.n	800a118 <HAL_HCD_IRQHandler+0x768>
    hhcd->hc[chnum].ErrCnt = 0U;
 800a0f8:	9b01      	ldr	r3, [sp, #4]
 800a0fa:	6473      	str	r3, [r6, #68]	@ 0x44
    if (hhcd->hc[chnum].do_ping == 0U)
 800a0fc:	7e73      	ldrb	r3, [r6, #25]
    hhcd->hc[chnum].state = HC_NAK;
 800a0fe:	2204      	movs	r2, #4
 800a100:	f886 204d 	strb.w	r2, [r6, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ping == 0U)
 800a104:	b91b      	cbnz	r3, 800a10e <HAL_HCD_IRQHandler+0x75e>
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a106:	7e33      	ldrb	r3, [r6, #24]
 800a108:	b90b      	cbnz	r3, 800a10e <HAL_HCD_IRQHandler+0x75e>
        hhcd->hc[chnum].do_ping = 1U;
 800a10a:	2301      	movs	r3, #1
 800a10c:	7673      	strb	r3, [r6, #25]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	4641      	mov	r1, r8
 800a112:	f001 fe51 	bl	800bdb8 <USB_HC_Halt>
 800a116:	e7cd      	b.n	800a0b4 <HAL_HCD_IRQHandler+0x704>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	4641      	mov	r1, r8
 800a11c:	f001 fd52 	bl	800bbc4 <USB_ReadChInterrupts>
 800a120:	0603      	lsls	r3, r0, #24
 800a122:	d566      	bpl.n	800a1f2 <HAL_HCD_IRQHandler+0x842>
    if (hhcd->Init.dma_enable == 0U)
 800a124:	79a3      	ldrb	r3, [r4, #6]
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a126:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 800a12a:	eb02 0709 	add.w	r7, r2, r9
    if (hhcd->Init.dma_enable == 0U)
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d057      	beq.n	800a1e2 <HAL_HCD_IRQHandler+0x832>
      hhcd->hc[chnum].ErrCnt++;
 800a132:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800a134:	3301      	adds	r3, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a136:	2b02      	cmp	r3, #2
      hhcd->hc[chnum].ErrCnt++;
 800a138:	6473      	str	r3, [r6, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a13a:	d848      	bhi.n	800a1ce <HAL_HCD_IRQHandler+0x81e>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a13c:	2302      	movs	r3, #2
 800a13e:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a142:	f852 3009 	ldr.w	r3, [r2, r9]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a146:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a14a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a14e:	f842 3009 	str.w	r3, [r2, r9]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a152:	2380      	movs	r3, #128	@ 0x80
 800a154:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a156:	7967      	ldrb	r7, [r4, #5]
 800a158:	e4d9      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a15a:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a15e:	f886 104c 	strb.w	r1, [r6, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a162:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a166:	f47f aed7 	bne.w	8009f18 <HAL_HCD_IRQHandler+0x568>
 800a16a:	e6f1      	b.n	8009f50 <HAL_HCD_IRQHandler+0x5a0>
      hhcd->hc[chnum].ErrCnt = 0U;
 800a16c:	6472      	str	r2, [r6, #68]	@ 0x44
        hhcd->hc[chnum].state = HC_NAK;
 800a16e:	2304      	movs	r3, #4
 800a170:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a174:	6820      	ldr	r0, [r4, #0]
 800a176:	4641      	mov	r1, r8
 800a178:	f001 fe1e 	bl	800bdb8 <USB_HC_Halt>
    if (hhcd->hc[chnum].do_csplit == 1U)
 800a17c:	7ef3      	ldrb	r3, [r6, #27]
 800a17e:	2b01      	cmp	r3, #1
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a180:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
    if (hhcd->hc[chnum].do_csplit == 1U)
 800a184:	d198      	bne.n	800a0b8 <HAL_HCD_IRQHandler+0x708>
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a186:	eb03 0209 	add.w	r2, r3, r9
      hhcd->hc[chnum].do_csplit = 0U;
 800a18a:	2100      	movs	r1, #0
 800a18c:	76f1      	strb	r1, [r6, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a18e:	6851      	ldr	r1, [r2, #4]
 800a190:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a194:	6051      	str	r1, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800a196:	68d1      	ldr	r1, [r2, #12]
 800a198:	f041 0120 	orr.w	r1, r1, #32
 800a19c:	60d1      	str	r1, [r2, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a19e:	e78b      	b.n	800a0b8 <HAL_HCD_IRQHandler+0x708>
          hhcd->hc[chnum].NyetErrCnt++;
 800a1a0:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800a1a2:	3301      	adds	r3, #1
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800a1a4:	428b      	cmp	r3, r1
          hhcd->hc[chnum].NyetErrCnt++;
 800a1a6:	64b3      	str	r3, [r6, #72]	@ 0x48
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800a1a8:	d90b      	bls.n	800a1c2 <HAL_HCD_IRQHandler+0x812>
            if (hhcd->hc[chnum].ErrCnt < 3U)
 800a1aa:	6c73      	ldr	r3, [r6, #68]	@ 0x44
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800a1ac:	2100      	movs	r1, #0
            if (hhcd->hc[chnum].ErrCnt < 3U)
 800a1ae:	2b02      	cmp	r3, #2
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800a1b0:	64b1      	str	r1, [r6, #72]	@ 0x48
            hhcd->hc[chnum].do_csplit = 0U;
 800a1b2:	76f1      	strb	r1, [r6, #27]
            if (hhcd->hc[chnum].ErrCnt < 3U)
 800a1b4:	d800      	bhi.n	800a1b8 <HAL_HCD_IRQHandler+0x808>
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800a1b6:	7730      	strb	r0, [r6, #28]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a1b8:	6853      	ldr	r3, [r2, #4]
 800a1ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1be:	6053      	str	r3, [r2, #4]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a1c0:	e6a7      	b.n	8009f12 <HAL_HCD_IRQHandler+0x562>
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a1c2:	f886 104c 	strb.w	r1, [r6, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a1c6:	e6a7      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
          hhcd->hc[chnum].do_csplit = 0U;
 800a1c8:	f8a6 301b 	strh.w	r3, [r6, #27]
 800a1cc:	e7f4      	b.n	800a1b8 <HAL_HCD_IRQHandler+0x808>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a1ce:	2204      	movs	r2, #4
        hhcd->hc[chnum].ErrCnt = 0U;
 800a1d0:	2300      	movs	r3, #0
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a1d2:	4641      	mov	r1, r8
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a1d4:	f886 204c 	strb.w	r2, [r6, #76]	@ 0x4c
        hhcd->hc[chnum].ErrCnt = 0U;
 800a1d8:	6473      	str	r3, [r6, #68]	@ 0x44
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7ff fbe6 	bl	80099ac <HAL_HCD_HC_NotifyURBChange_Callback>
 800a1e0:	e7b7      	b.n	800a152 <HAL_HCD_IRQHandler+0x7a2>
      hhcd->hc[chnum].state = HC_XACTERR;
 800a1e2:	2307      	movs	r3, #7
 800a1e4:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	4641      	mov	r1, r8
 800a1ec:	f001 fde4 	bl	800bdb8 <USB_HC_Halt>
 800a1f0:	e7af      	b.n	800a152 <HAL_HCD_IRQHandler+0x7a2>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a1f2:	6820      	ldr	r0, [r4, #0]
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	f001 fce5 	bl	800bbc4 <USB_ReadChInterrupts>
 800a1fa:	0540      	lsls	r0, r0, #21
 800a1fc:	d50e      	bpl.n	800a21c <HAL_HCD_IRQHandler+0x86c>
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a1fe:	2309      	movs	r3, #9
 800a200:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	4641      	mov	r1, r8
 800a208:	f001 fdd6 	bl	800bdb8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a20c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800a210:	444b      	add	r3, r9
 800a212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a216:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a218:	7967      	ldrb	r7, [r4, #5]
 800a21a:	e478      	b.n	8009b0e <HAL_HCD_IRQHandler+0x15e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a21c:	4641      	mov	r1, r8
 800a21e:	6820      	ldr	r0, [r4, #0]
 800a220:	f001 fcd0 	bl	800bbc4 <USB_ReadChInterrupts>
 800a224:	0781      	lsls	r1, r0, #30
 800a226:	f57f ad0f 	bpl.w	8009c48 <HAL_HCD_IRQHandler+0x298>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a22a:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 800a22e:	eb07 0209 	add.w	r2, r7, r9
 800a232:	2302      	movs	r3, #2
 800a234:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a236:	f896 304d 	ldrb.w	r3, [r6, #77]	@ 0x4d
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d014      	beq.n	800a268 <HAL_HCD_IRQHandler+0x8b8>
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a23e:	3b03      	subs	r3, #3
 800a240:	2b06      	cmp	r3, #6
 800a242:	f63f ad01 	bhi.w	8009c48 <HAL_HCD_IRQHandler+0x298>
 800a246:	a101      	add	r1, pc, #4	@ (adr r1, 800a24c <HAL_HCD_IRQHandler+0x89c>)
 800a248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a24c:	0800a2f1 	.word	0x0800a2f1
 800a250:	0800a2d3 	.word	0x0800a2d3
 800a254:	0800a2c3 	.word	0x0800a2c3
 800a258:	08009f27 	.word	0x08009f27
 800a25c:	0800a2ad 	.word	0x0800a2ad
 800a260:	08009c49 	.word	0x08009c49
 800a264:	0800a2ad 	.word	0x0800a2ad
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a268:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 800a26c:	3b02      	subs	r3, #2
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a26e:	f240 2201 	movw	r2, #513	@ 0x201
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a272:	2b01      	cmp	r3, #1
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a274:	f8a6 204c 	strh.w	r2, [r6, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a278:	f63f ae4e 	bhi.w	8009f18 <HAL_HCD_IRQHandler+0x568>
        if (hhcd->Init.dma_enable == 0U)
 800a27c:	79a3      	ldrb	r3, [r4, #6]
 800a27e:	b173      	cbz	r3, 800a29e <HAL_HCD_IRQHandler+0x8ee>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a280:	2b01      	cmp	r3, #1
 800a282:	f47f ae49 	bne.w	8009f18 <HAL_HCD_IRQHandler+0x568>
 800a286:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f43f ae45 	beq.w	8009f18 <HAL_HCD_IRQHandler+0x568>
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a28e:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800a290:	3b01      	subs	r3, #1
 800a292:	4413      	add	r3, r2
 800a294:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 800a298:	07da      	lsls	r2, r3, #31
 800a29a:	f57f ae3d 	bpl.w	8009f18 <HAL_HCD_IRQHandler+0x568>
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a29e:	f896 303d 	ldrb.w	r3, [r6, #61]	@ 0x3d
 800a2a2:	f083 0301 	eor.w	r3, r3, #1
 800a2a6:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
 800a2aa:	e635      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
      hhcd->hc[chnum].ErrCnt++;
 800a2ac:	6c73      	ldr	r3, [r6, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_HALTED;
 800a2ae:	2202      	movs	r2, #2
      hhcd->hc[chnum].ErrCnt++;
 800a2b0:	3301      	adds	r3, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a2b2:	4293      	cmp	r3, r2
      hhcd->hc[chnum].ErrCnt++;
 800a2b4:	6473      	str	r3, [r6, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_HALTED;
 800a2b6:	f886 204d 	strb.w	r2, [r6, #77]	@ 0x4d
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a2ba:	d907      	bls.n	800a2cc <HAL_HCD_IRQHandler+0x91c>
        hhcd->hc[chnum].ErrCnt = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	6473      	str	r3, [r6, #68]	@ 0x44
 800a2c0:	e627      	b.n	8009f12 <HAL_HCD_IRQHandler+0x562>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800a2c2:	f240 2302 	movw	r3, #514	@ 0x202
 800a2c6:	f8a6 304c 	strh.w	r3, [r6, #76]	@ 0x4c
 800a2ca:	e625      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a2cc:	f886 204c 	strb.w	r2, [r6, #76]	@ 0x4c
 800a2d0:	e63e      	b.n	8009f50 <HAL_HCD_IRQHandler+0x5a0>
      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2d2:	7ef3      	ldrb	r3, [r6, #27]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a2d4:	f240 2102 	movw	r1, #514	@ 0x202
      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2d8:	2b01      	cmp	r3, #1
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a2da:	f8a6 104c 	strh.w	r1, [r6, #76]	@ 0x4c
      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2de:	f47f ae1b 	bne.w	8009f18 <HAL_HCD_IRQHandler+0x568>
        hhcd->hc[chnum].do_csplit = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	76f3      	strb	r3, [r6, #27]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a2e6:	6853      	ldr	r3, [r2, #4]
 800a2e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2ec:	6053      	str	r3, [r2, #4]
 800a2ee:	e613      	b.n	8009f18 <HAL_HCD_IRQHandler+0x568>
      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2f0:	7ef2      	ldrb	r2, [r6, #27]
      hhcd->hc[chnum].state = HC_HALTED;
 800a2f2:	2302      	movs	r3, #2
      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2f4:	2a01      	cmp	r2, #1
      hhcd->hc[chnum].state = HC_HALTED;
 800a2f6:	f886 304d 	strb.w	r3, [r6, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2fa:	f47f ae0d 	bne.w	8009f18 <HAL_HCD_IRQHandler+0x568>
 800a2fe:	e609      	b.n	8009f14 <HAL_HCD_IRQHandler+0x564>

0800a300 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a300:	2800      	cmp	r0, #0
 800a302:	f000 80b8 	beq.w	800a476 <HAL_I2C_Init+0x176>
{
 800a306:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a308:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a30c:	4604      	mov	r4, r0
 800a30e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 8098 	beq.w	800a448 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a318:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a31a:	2224      	movs	r2, #36	@ 0x24
 800a31c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a32e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a336:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a338:	f000 fdda 	bl	800aef0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a33c:	6865      	ldr	r5, [r4, #4]
 800a33e:	4b4f      	ldr	r3, [pc, #316]	@ (800a47c <HAL_I2C_Init+0x17c>)
 800a340:	429d      	cmp	r5, r3
 800a342:	d84f      	bhi.n	800a3e4 <HAL_I2C_Init+0xe4>
 800a344:	4b4e      	ldr	r3, [pc, #312]	@ (800a480 <HAL_I2C_Init+0x180>)
 800a346:	4298      	cmp	r0, r3
 800a348:	d97c      	bls.n	800a444 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a34a:	4b4e      	ldr	r3, [pc, #312]	@ (800a484 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a34c:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800a34e:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a352:	1e43      	subs	r3, r0, #1
 800a354:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	6851      	ldr	r1, [r2, #4]
 800a35c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800a360:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800a364:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a366:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 800a368:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a36c:	f10c 0c01 	add.w	ip, ip, #1
 800a370:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800a374:	ea41 010c 	orr.w	r1, r1, ip
 800a378:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a37a:	69d1      	ldr	r1, [r2, #28]
 800a37c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800a380:	3301      	adds	r3, #1
 800a382:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800a386:	4203      	tst	r3, r0
 800a388:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800a38c:	d161      	bne.n	800a452 <HAL_I2C_Init+0x152>
 800a38e:	2304      	movs	r3, #4
 800a390:	430b      	orrs	r3, r1
 800a392:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a394:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800a398:	6811      	ldr	r1, [r2, #0]
 800a39a:	4303      	orrs	r3, r0
 800a39c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a3a4:	6891      	ldr	r1, [r2, #8]
 800a3a6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800a3aa:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800a3ae:	4303      	orrs	r3, r0
 800a3b0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a3b8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800a3bc:	68d1      	ldr	r1, [r2, #12]
 800a3be:	4303      	orrs	r3, r0
 800a3c0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800a3c4:	430b      	orrs	r3, r1
 800a3c6:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3c8:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3ca:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800a3cc:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800a3d0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800a3d2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3d4:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a3d6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3da:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

  return HAL_OK;
 800a3e0:	4618      	mov	r0, r3
}
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a3e4:	4b28      	ldr	r3, [pc, #160]	@ (800a488 <HAL_I2C_Init+0x188>)
 800a3e6:	4298      	cmp	r0, r3
 800a3e8:	d92c      	bls.n	800a444 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a3ea:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800a3ec:	4b25      	ldr	r3, [pc, #148]	@ (800a484 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a3ee:	4e27      	ldr	r6, [pc, #156]	@ (800a48c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 800a3f0:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a3f4:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a3f6:	6850      	ldr	r0, [r2, #4]
 800a3f8:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800a3fc:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 800a400:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800a402:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a406:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a40a:	fb00 f101 	mul.w	r1, r0, r1
 800a40e:	fba6 6101 	umull	r6, r1, r6, r1
 800a412:	6a10      	ldr	r0, [r2, #32]
 800a414:	0989      	lsrs	r1, r1, #6
 800a416:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800a41a:	3101      	adds	r1, #1
 800a41c:	4301      	orrs	r1, r0
 800a41e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a420:	69d1      	ldr	r1, [r2, #28]
 800a422:	68a0      	ldr	r0, [r4, #8]
 800a424:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800a428:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800a42c:	b9a0      	cbnz	r0, 800a458 <HAL_I2C_Init+0x158>
 800a42e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a432:	fbb3 f3f5 	udiv	r3, r3, r5
 800a436:	3301      	adds	r3, #1
 800a438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a43c:	b1cb      	cbz	r3, 800a472 <HAL_I2C_Init+0x172>
 800a43e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a442:	e7a5      	b.n	800a390 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800a444:	2001      	movs	r0, #1
}
 800a446:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800a448:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800a44c:	f7fd fe6c 	bl	8008128 <HAL_I2C_MspInit>
 800a450:	e762      	b.n	800a318 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a456:	e79b      	b.n	800a390 <HAL_I2C_Init+0x90>
 800a458:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a45c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a460:	fbb3 f3f5 	udiv	r3, r3, r5
 800a464:	3301      	adds	r3, #1
 800a466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a46a:	b113      	cbz	r3, 800a472 <HAL_I2C_Init+0x172>
 800a46c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a470:	e78e      	b.n	800a390 <HAL_I2C_Init+0x90>
 800a472:	2301      	movs	r3, #1
 800a474:	e78c      	b.n	800a390 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800a476:	2001      	movs	r0, #1
}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	000186a0 	.word	0x000186a0
 800a480:	001e847f 	.word	0x001e847f
 800a484:	431bde83 	.word	0x431bde83
 800a488:	003d08ff 	.word	0x003d08ff
 800a48c:	10624dd3 	.word	0x10624dd3

0800a490 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a490:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 800a494:	2a20      	cmp	r2, #32
{
 800a496:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a498:	fa5f fc82 	uxtb.w	ip, r2
 800a49c:	d001      	beq.n	800a4a2 <HAL_I2CEx_ConfigAnalogFilter+0x12>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800a49e:	2002      	movs	r0, #2
  }
}
 800a4a0:	4770      	bx	lr
    __HAL_I2C_DISABLE(hi2c);
 800a4a2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4a4:	2024      	movs	r0, #36	@ 0x24
 800a4a6:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800a4aa:	6810      	ldr	r0, [r2, #0]
 800a4ac:	f020 0001 	bic.w	r0, r0, #1
 800a4b0:	6010      	str	r0, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a4b2:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800a4b4:	f020 0010 	bic.w	r0, r0, #16
 800a4b8:	6250      	str	r0, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 800a4ba:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800a4bc:	4301      	orrs	r1, r0
 800a4be:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 800a4c0:	6811      	ldr	r1, [r2, #0]
 800a4c2:	f041 0101 	orr.w	r1, r1, #1
 800a4c6:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800a4c8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800a4ca:	f883 c03d 	strb.w	ip, [r3, #61]	@ 0x3d
    return HAL_OK;
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4d0:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 800a4d4:	2a20      	cmp	r2, #32
 800a4d6:	d001      	beq.n	800a4dc <HAL_I2CEx_ConfigDigitalFilter+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800a4d8:	2002      	movs	r0, #2
  }
}
 800a4da:	4770      	bx	lr
{
 800a4dc:	b410      	push	{r4}
 800a4de:	fa5f fc82 	uxtb.w	ip, r2
    __HAL_I2C_DISABLE(hi2c);
 800a4e2:	6804      	ldr	r4, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4e4:	2224      	movs	r2, #36	@ 0x24
 800a4e6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	f022 0201 	bic.w	r2, r2, #1
 800a4f0:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->FLTR;
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
    tmpreg &= ~(I2C_FLTR_DNF);
 800a4f6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800a4fa:	4002      	ands	r2, r0
    tmpreg |= DigitalFilter;
 800a4fc:	4311      	orrs	r1, r2
    hi2c->Instance->FLTR = tmpreg;
 800a4fe:	b289      	uxth	r1, r1
 800a500:	6261      	str	r1, [r4, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 800a502:	6822      	ldr	r2, [r4, #0]
 800a504:	f042 0201 	orr.w	r2, r2, #1
 800a508:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a50a:	f883 c03d 	strb.w	ip, [r3, #61]	@ 0x3d
    return HAL_OK;
 800a50e:	2000      	movs	r0, #0
}
 800a510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop

0800a518 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a518:	2800      	cmp	r0, #0
 800a51a:	d069      	beq.n	800a5f0 <HAL_LTDC_Init+0xd8>
{
 800a51c:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a51e:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800a522:	4604      	mov	r4, r0
 800a524:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d05c      	beq.n	800a5e6 <HAL_LTDC_Init+0xce>
    HAL_LTDC_MspInit(hltdc);
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a52c:	2202      	movs	r2, #2

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a52e:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a530:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a534:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a538:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a53a:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a53c:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a540:	f021 4170 	bic.w	r1, r1, #4026531840	@ 0xf0000000
 800a544:	6199      	str	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a546:	6999      	ldr	r1, [r3, #24]
 800a548:	432a      	orrs	r2, r5
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a54a:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a54c:	430a      	orrs	r2, r1
 800a54e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	4928      	ldr	r1, [pc, #160]	@ (800a5f4 <HAL_LTDC_Init+0xdc>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a554:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a556:	400a      	ands	r2, r1
 800a558:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a560:	69a0      	ldr	r0, [r4, #24]
 800a562:	4302      	orrs	r2, r0
 800a564:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a566:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a568:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a56a:	400a      	ands	r2, r1
 800a56c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a574:	6a20      	ldr	r0, [r4, #32]
 800a576:	4302      	orrs	r2, r0
 800a578:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a57a:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a57c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a57e:	400a      	ands	r2, r1
 800a580:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a588:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a58a:	4302      	orrs	r2, r0
 800a58c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a58e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a590:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a592:	400a      	ands	r2, r1
 800a594:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a596:	695a      	ldr	r2, [r3, #20]
 800a598:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a59a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a5a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a5a4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a5a8:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a5ac:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a5b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a5b2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800a5b4:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800a5b8:	432a      	orrs	r2, r5
 800a5ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a5be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a5c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a5c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5c6:	f042 0206 	orr.w	r2, r2, #6
 800a5ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a5cc:	699a      	ldr	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a5ce:	f04f 0c01 	mov.w	ip, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a5d2:	2100      	movs	r1, #0
  __HAL_LTDC_ENABLE(hltdc);
 800a5d4:	ea42 020c 	orr.w	r2, r2, ip
 800a5d8:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a5da:	f8c4 10a4 	str.w	r1, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a5de:	f884 c0a1 	strb.w	ip, [r4, #161]	@ 0xa1

  return HAL_OK;
 800a5e2:	4608      	mov	r0, r1
}
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800a5e6:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a5ea:	f7fd fdd5 	bl	8008198 <HAL_LTDC_MspInit>
 800a5ee:	e79d      	b.n	800a52c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800a5f0:	2001      	movs	r0, #1
}
 800a5f2:	4770      	bx	lr
 800a5f4:	f000f800 	.word	0xf000f800

0800a5f8 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a5f8:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	f000 80c8 	beq.w	800a792 <HAL_LTDC_ConfigLayer+0x19a>
{
 800a602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a606:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a60a:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a60e:	fb0e 0e02 	mla	lr, lr, r2, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a612:	f04f 0302 	mov.w	r3, #2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a616:	01d2      	lsls	r2, r2, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a618:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a61c:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 800a620:	eb09 0c06 	add.w	ip, r9, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a624:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a628:	f3c3 4a0b 	ubfx	sl, r3, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a62c:	f8dc 3004 	ldr.w	r3, [ip, #4]
{
 800a630:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a632:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a636:	460c      	mov	r4, r1
 800a638:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	4680      	mov	r8, r0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a63e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a640:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
 800a644:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a64a:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a64c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a652:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	f8cc 3004 	str.w	r3, [ip, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a662:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a666:	682a      	ldr	r2, [r5, #0]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a668:	68e8      	ldr	r0, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a66a:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a66e:	1c51      	adds	r1, r2, #1
 800a670:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800a674:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a676:	44ba      	add	sl, r7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a678:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a67c:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a680:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a684:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a688:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a68c:	f8cc 3008 	str.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a690:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a694:	68ab      	ldr	r3, [r5, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a696:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a698:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800a6a2:	4403      	add	r3, r0
 800a6a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a6a8:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a6ac:	f8dc 3010 	ldr.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a6b0:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a6b2:	f023 0307 	bic.w	r3, r3, #7
 800a6b6:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a6ba:	f04f 0b00 	mov.w	fp, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a6be:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a6c2:	f8dc 3018 	ldr.w	r3, [ip, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a6c6:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a6ca:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a6ce:	f8cc b018 	str.w	fp, [ip, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a6d2:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800a6d6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800a6da:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a6de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6e2:	f8cc 3018 	str.w	r3, [ip, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a6e6:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800a6ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a6ee:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a6f2:	696b      	ldr	r3, [r5, #20]
 800a6f4:	f8cc 3014 	str.w	r3, [ip, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a6f8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800a6fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	f8cc 301c 	str.w	r3, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a708:	e9d5 3007 	ldrd	r3, r0, [r5, #28]
 800a70c:	4303      	orrs	r3, r0
 800a70e:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a712:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a716:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a718:	f8cc b028 	str.w	fp, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a71c:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a720:	bb69      	cbnz	r1, 800a77e <HAL_LTDC_ConfigLayer+0x186>
  {
    tmp = 4U;
 800a722:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a724:	1abf      	subs	r7, r7, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a726:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a728:	fb03 f707 	mul.w	r7, r3, r7
 800a72c:	3703      	adds	r7, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a72e:	fb02 f303 	mul.w	r3, r2, r3
 800a732:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a736:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a73a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a73c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a740:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a744:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a748:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 800a74c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a750:	f023 0307 	bic.w	r3, r3, #7
 800a754:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a758:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a75c:	f859 3006 	ldr.w	r3, [r9, r6]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a760:	2201      	movs	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a762:	4313      	orrs	r3, r2
 800a764:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800a768:	2300      	movs	r3, #0
  return HAL_OK;
 800a76a:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a76c:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a770:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a774:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 800a778:	b003      	add	sp, #12
 800a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a77e:	2901      	cmp	r1, #1
 800a780:	d00b      	beq.n	800a79a <HAL_LTDC_ConfigLayer+0x1a2>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a782:	1e8b      	subs	r3, r1, #2
 800a784:	2b02      	cmp	r3, #2
 800a786:	d906      	bls.n	800a796 <HAL_LTDC_ConfigLayer+0x19e>
    tmp = 2U;
 800a788:	2907      	cmp	r1, #7
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2302      	moveq	r3, #2
 800a790:	e7c8      	b.n	800a724 <HAL_LTDC_ConfigLayer+0x12c>
  __HAL_LOCK(hltdc);
 800a792:	2002      	movs	r0, #2
}
 800a794:	4770      	bx	lr
    tmp = 2U;
 800a796:	2302      	movs	r3, #2
 800a798:	e7c4      	b.n	800a724 <HAL_LTDC_ConfigLayer+0x12c>
    tmp = 3U;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e7c2      	b.n	800a724 <HAL_LTDC_ConfigLayer+0x12c>
 800a79e:	bf00      	nop

0800a7a0 <HAL_NOR_Init>:
{
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f000 8082 	beq.w	800a8aa <HAL_NOR_Init+0x10a>
{
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 800a7a8:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 800a7ac:	4615      	mov	r5, r2
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d050      	beq.n	800a85c <HAL_NOR_Init+0xbc>
    HAL_NOR_MspInit(hnor);
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	f851 0b08 	ldr.w	r0, [r1], #8
 800a7c0:	f000 ff82 	bl	800b6c8 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	68a2      	ldr	r2, [r4, #8]
 800a7c8:	6820      	ldr	r0, [r4, #0]
 800a7ca:	f000 ffc1 	bl	800b750 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming,
 800a7ce:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 800a7d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	f000 ffeb 	bl	800b7b0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hnor->Init.NSBank, hnor->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800a7da:	6820      	ldr	r0, [r4, #0]
 800a7dc:	68a1      	ldr	r1, [r4, #8]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800a7de:	6966      	ldr	r6, [r4, #20]
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800a7e0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800a7e4:	4a3b      	ldr	r2, [pc, #236]	@ (800a8d4 <HAL_NOR_Init+0x134>)
 800a7e6:	f043 0301 	orr.w	r3, r3, #1
 800a7ea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800a7ee:	1e33      	subs	r3, r6, #0
 800a7f0:	bf18      	it	ne
 800a7f2:	2301      	movne	r3, #1
 800a7f4:	6013      	str	r3, [r2, #0]
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800a7fc:	b9c9      	cbnz	r1, 800a832 <HAL_NOR_Init+0x92>
 800a7fe:	4f36      	ldr	r7, [pc, #216]	@ (800a8d8 <HAL_NOR_Init+0x138>)
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 800a800:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 800a804:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800a806:	b315      	cbz	r5, 800a84e <HAL_NOR_Init+0xae>
  else
  {
    /* Get the value of the command set */
    if (uwNORMemoryDataWidth == NOR_MEMORY_8B)
    {
      NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI_BYTE),
 800a808:	2198      	movs	r1, #152	@ 0x98
 800a80a:	8039      	strh	r1, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800a80c:	f3bf 8f4f 	dsb	sy
    else
    {
      NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
    }

    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 800a810:	6812      	ldr	r2, [r2, #0]
 800a812:	2a01      	cmp	r2, #1
 800a814:	bf0c      	ite	eq
 800a816:	3326      	addeq	r3, #38	@ 0x26
 800a818:	3313      	addne	r3, #19
 800a81a:	881b      	ldrh	r3, [r3, #0]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the NOR controller state */
  state = hnor->State;
 800a81c:	f894 2049 	ldrb.w	r2, [r4, #73]	@ 0x49
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 800a820:	b29b      	uxth	r3, r3
  if (state == HAL_NOR_STATE_BUSY)
 800a822:	2a02      	cmp	r2, #2
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 800a824:	64e3      	str	r3, [r4, #76]	@ 0x4c
  state = hnor->State;
 800a826:	b2d0      	uxtb	r0, r2
  if (state == HAL_NOR_STATE_BUSY)
 800a828:	d002      	beq.n	800a830 <HAL_NOR_Init+0x90>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
  {
    return HAL_ERROR;
  }
  else if (state == HAL_NOR_STATE_READY)
 800a82a:	2801      	cmp	r0, #1
 800a82c:	d01b      	beq.n	800a866 <HAL_NOR_Init+0xc6>
    return HAL_ERROR;
 800a82e:	2001      	movs	r0, #1
}
 800a830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 800a832:	2902      	cmp	r1, #2
 800a834:	d035      	beq.n	800a8a2 <HAL_NOR_Init+0x102>
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 800a836:	4b29      	ldr	r3, [pc, #164]	@ (800a8dc <HAL_NOR_Init+0x13c>)
  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 800a838:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 800a83a:	4f29      	ldr	r7, [pc, #164]	@ (800a8e0 <HAL_NOR_Init+0x140>)
 800a83c:	2904      	cmp	r1, #4
 800a83e:	bf16      	itet	ne
 800a840:	461f      	movne	r7, r3
 800a842:	f04f 43d0 	moveq.w	r3, #1744830464	@ 0x68000000
 800a846:	f04f 43d8 	movne.w	r3, #1811939328	@ 0x6c000000
  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 800a84a:	2d00      	cmp	r5, #0
 800a84c:	d1dc      	bne.n	800a808 <HAL_NOR_Init+0x68>
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 800a84e:	f000 ffd1 	bl	800b7f4 <FMC_NORSRAM_WriteOperation_Disable>
    hnor->State = HAL_NOR_STATE_PROTECTED;
 800a852:	2304      	movs	r3, #4
 800a854:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
  HAL_StatusTypeDef status = HAL_OK;
 800a858:	4628      	mov	r0, r5
}
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hnor->Lock = HAL_UNLOCKED;
 800a85c:	f880 2048 	strb.w	r2, [r0, #72]	@ 0x48
    HAL_NOR_MspInit(hnor);
 800a860:	f7fd fd96 	bl	8008390 <HAL_NOR_MspInit>
 800a864:	e7a9      	b.n	800a7ba <HAL_NOR_Init+0x1a>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 800a866:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 800a86a:	2a01      	cmp	r2, #1
 800a86c:	d030      	beq.n	800a8d0 <HAL_NOR_Init+0x130>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800a86e:	68a2      	ldr	r2, [r4, #8]
    __HAL_LOCK(hnor);
 800a870:	f884 0048 	strb.w	r0, [r4, #72]	@ 0x48
    hnor->State = HAL_NOR_STATE_BUSY;
 800a874:	2102      	movs	r1, #2
 800a876:	f884 1049 	strb.w	r1, [r4, #73]	@ 0x49
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800a87a:	b1c2      	cbz	r2, 800a8ae <HAL_NOR_Init+0x10e>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 800a87c:	428a      	cmp	r2, r1
 800a87e:	d024      	beq.n	800a8ca <HAL_NOR_Init+0x12a>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 800a880:	2a04      	cmp	r2, #4
 800a882:	bf14      	ite	ne
 800a884:	f04f 42d8 	movne.w	r2, #1811939328	@ 0x6c000000
 800a888:	f04f 42d0 	moveq.w	r2, #1744830464	@ 0x68000000
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d011      	beq.n	800a8b4 <HAL_NOR_Init+0x114>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 800a890:	2b01      	cmp	r3, #1
 800a892:	d015      	beq.n	800a8c0 <HAL_NOR_Init+0x120>
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800a894:	2201      	movs	r2, #1

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 800a896:	2300      	movs	r3, #0
    hnor->State = state;
 800a898:	f884 2049 	strb.w	r2, [r4, #73]	@ 0x49
    __HAL_UNLOCK(hnor);
 800a89c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
}
 800a8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a2:	4f10      	ldr	r7, [pc, #64]	@ (800a8e4 <HAL_NOR_Init+0x144>)
    deviceaddress = NOR_MEMORY_ADRESS2;
 800a8a4:	f04f 43c8 	mov.w	r3, #1677721600	@ 0x64000000
 800a8a8:	e7ac      	b.n	800a804 <HAL_NOR_Init+0x64>
    return HAL_ERROR;
 800a8aa:	2001      	movs	r0, #1
}
 800a8ac:	4770      	bx	lr
 800a8ae:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800a8b2:	e7eb      	b.n	800a88c <HAL_NOR_Init+0xec>
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 800a8b4:	23f0      	movs	r3, #240	@ 0xf0
 800a8b6:	8013      	strh	r3, [r2, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
  HAL_StatusTypeDef status = HAL_OK;
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e7e9      	b.n	800a894 <HAL_NOR_Init+0xf4>
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800a8c0:	23ff      	movs	r3, #255	@ 0xff
 800a8c2:	8013      	strh	r3, [r2, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
}
 800a8c8:	e7f8      	b.n	800a8bc <HAL_NOR_Init+0x11c>
 800a8ca:	f04f 42c8 	mov.w	r2, #1677721600	@ 0x64000000
 800a8ce:	e7dd      	b.n	800a88c <HAL_NOR_Init+0xec>
    return HAL_BUSY;
 800a8d0:	2002      	movs	r0, #2
}
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d4:	20000b30 	.word	0x20000b30
 800a8d8:	600000aa 	.word	0x600000aa
 800a8dc:	6c0000aa 	.word	0x6c0000aa
 800a8e0:	680000aa 	.word	0x680000aa
 800a8e4:	640000aa 	.word	0x640000aa

0800a8e8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f000 81d8 	beq.w	800ac9e <HAL_RCC_OscConfig+0x3b6>
{
 800a8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8f2:	6803      	ldr	r3, [r0, #0]
 800a8f4:	07dd      	lsls	r5, r3, #31
{
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8fa:	d52f      	bpl.n	800a95c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a8fc:	499d      	ldr	r1, [pc, #628]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800a8fe:	688a      	ldr	r2, [r1, #8]
 800a900:	f002 020c 	and.w	r2, r2, #12
 800a904:	2a04      	cmp	r2, #4
 800a906:	f000 80ec 	beq.w	800aae2 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a90a:	688a      	ldr	r2, [r1, #8]
 800a90c:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a910:	2a08      	cmp	r2, #8
 800a912:	f000 80e2 	beq.w	800aada <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a91c:	f000 80eb 	beq.w	800aaf6 <HAL_RCC_OscConfig+0x20e>
 800a920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a924:	f000 8173 	beq.w	800ac0e <HAL_RCC_OscConfig+0x326>
 800a928:	4d92      	ldr	r5, [pc, #584]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800a92a:	682a      	ldr	r2, [r5, #0]
 800a92c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	682a      	ldr	r2, [r5, #0]
 800a934:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a938:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f040 80e0 	bne.w	800ab00 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a940:	f7fe fb76 	bl	8009030 <HAL_GetTick>
 800a944:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a946:	e005      	b.n	800a954 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a948:	f7fe fb72 	bl	8009030 <HAL_GetTick>
 800a94c:	1b80      	subs	r0, r0, r6
 800a94e:	2864      	cmp	r0, #100	@ 0x64
 800a950:	f200 8100 	bhi.w	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	039f      	lsls	r7, r3, #14
 800a958:	d4f6      	bmi.n	800a948 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	079d      	lsls	r5, r3, #30
 800a95e:	d528      	bpl.n	800a9b2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a960:	4a84      	ldr	r2, [pc, #528]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800a962:	6891      	ldr	r1, [r2, #8]
 800a964:	f011 0f0c 	tst.w	r1, #12
 800a968:	f000 809b 	beq.w	800aaa2 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a96c:	6891      	ldr	r1, [r2, #8]
 800a96e:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a972:	2908      	cmp	r1, #8
 800a974:	f000 8091 	beq.w	800aa9a <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a978:	68e3      	ldr	r3, [r4, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 810c 	beq.w	800ab98 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a980:	4b7d      	ldr	r3, [pc, #500]	@ (800ab78 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a982:	4e7c      	ldr	r6, [pc, #496]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800a984:	2201      	movs	r2, #1
 800a986:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a988:	f7fe fb52 	bl	8009030 <HAL_GetTick>
 800a98c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a98e:	e005      	b.n	800a99c <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a990:	f7fe fb4e 	bl	8009030 <HAL_GetTick>
 800a994:	1b40      	subs	r0, r0, r5
 800a996:	2802      	cmp	r0, #2
 800a998:	f200 80dc 	bhi.w	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a99c:	6833      	ldr	r3, [r6, #0]
 800a99e:	079f      	lsls	r7, r3, #30
 800a9a0:	d5f6      	bpl.n	800a990 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a2:	6833      	ldr	r3, [r6, #0]
 800a9a4:	6922      	ldr	r2, [r4, #16]
 800a9a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a9aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a9ae:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	071a      	lsls	r2, r3, #28
 800a9b4:	d45c      	bmi.n	800aa70 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9b6:	075d      	lsls	r5, r3, #29
 800a9b8:	d53a      	bpl.n	800aa30 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9ba:	4a6e      	ldr	r2, [pc, #440]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800a9bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a9be:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 800a9c2:	f040 8088 	bne.w	800aad6 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a9ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9ce:	6413      	str	r3, [r2, #64]	@ 0x40
 800a9d0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a9d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a9da:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9dc:	4e67      	ldr	r6, [pc, #412]	@ (800ab7c <HAL_RCC_OscConfig+0x294>)
 800a9de:	6833      	ldr	r3, [r6, #0]
 800a9e0:	05d8      	lsls	r0, r3, #23
 800a9e2:	f140 80a7 	bpl.w	800ab34 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	f000 80b7 	beq.w	800ab5c <HAL_RCC_OscConfig+0x274>
 800a9ee:	2b05      	cmp	r3, #5
 800a9f0:	f000 811d 	beq.w	800ac2e <HAL_RCC_OscConfig+0x346>
 800a9f4:	4e5f      	ldr	r6, [pc, #380]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800a9f6:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	6732      	str	r2, [r6, #112]	@ 0x70
 800a9fe:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 800aa00:	f022 0204 	bic.w	r2, r2, #4
 800aa04:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f040 80ad 	bne.w	800ab66 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa0c:	f7fe fb10 	bl	8009030 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa10:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800aa14:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa16:	e005      	b.n	800aa24 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa18:	f7fe fb0a 	bl	8009030 <HAL_GetTick>
 800aa1c:	1bc0      	subs	r0, r0, r7
 800aa1e:	4540      	cmp	r0, r8
 800aa20:	f200 8098 	bhi.w	800ab54 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa24:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800aa26:	079b      	lsls	r3, r3, #30
 800aa28:	d4f6      	bmi.n	800aa18 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa2a:	2d00      	cmp	r5, #0
 800aa2c:	f040 80f9 	bne.w	800ac22 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa30:	69a3      	ldr	r3, [r4, #24]
 800aa32:	b1cb      	cbz	r3, 800aa68 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa34:	4d4f      	ldr	r5, [pc, #316]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800aa36:	68aa      	ldr	r2, [r5, #8]
 800aa38:	f002 020c 	and.w	r2, r2, #12
 800aa3c:	2a08      	cmp	r2, #8
 800aa3e:	f000 80bc 	beq.w	800abba <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa42:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa44:	4b4c      	ldr	r3, [pc, #304]	@ (800ab78 <HAL_RCC_OscConfig+0x290>)
 800aa46:	f04f 0200 	mov.w	r2, #0
 800aa4a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa4c:	f000 80f9 	beq.w	800ac42 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa50:	f7fe faee 	bl	8009030 <HAL_GetTick>
 800aa54:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa56:	e004      	b.n	800aa62 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa58:	f7fe faea 	bl	8009030 <HAL_GetTick>
 800aa5c:	1b00      	subs	r0, r0, r4
 800aa5e:	2802      	cmp	r0, #2
 800aa60:	d878      	bhi.n	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa62:	682b      	ldr	r3, [r5, #0]
 800aa64:	019b      	lsls	r3, r3, #6
 800aa66:	d4f7      	bmi.n	800aa58 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800aa68:	2000      	movs	r0, #0
}
 800aa6a:	b002      	add	sp, #8
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa70:	6963      	ldr	r3, [r4, #20]
 800aa72:	b1fb      	cbz	r3, 800aab4 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 800aa74:	4b40      	ldr	r3, [pc, #256]	@ (800ab78 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa76:	4e3f      	ldr	r6, [pc, #252]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800aa7e:	f7fe fad7 	bl	8009030 <HAL_GetTick>
 800aa82:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa84:	e004      	b.n	800aa90 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa86:	f7fe fad3 	bl	8009030 <HAL_GetTick>
 800aa8a:	1b40      	subs	r0, r0, r5
 800aa8c:	2802      	cmp	r0, #2
 800aa8e:	d861      	bhi.n	800ab54 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa90:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800aa92:	079b      	lsls	r3, r3, #30
 800aa94:	d5f7      	bpl.n	800aa86 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	e78d      	b.n	800a9b6 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa9a:	6852      	ldr	r2, [r2, #4]
 800aa9c:	0251      	lsls	r1, r2, #9
 800aa9e:	f53f af6b 	bmi.w	800a978 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aaa2:	4a34      	ldr	r2, [pc, #208]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800aaa4:	6812      	ldr	r2, [r2, #0]
 800aaa6:	0792      	lsls	r2, r2, #30
 800aaa8:	d538      	bpl.n	800ab1c <HAL_RCC_OscConfig+0x234>
 800aaaa:	68e2      	ldr	r2, [r4, #12]
 800aaac:	2a01      	cmp	r2, #1
 800aaae:	d035      	beq.n	800ab1c <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 800aab0:	2001      	movs	r0, #1
 800aab2:	e7da      	b.n	800aa6a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 800aab4:	4a30      	ldr	r2, [pc, #192]	@ (800ab78 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aab6:	4e2f      	ldr	r6, [pc, #188]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 800aab8:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800aabc:	f7fe fab8 	bl	8009030 <HAL_GetTick>
 800aac0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aac2:	e004      	b.n	800aace <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aac4:	f7fe fab4 	bl	8009030 <HAL_GetTick>
 800aac8:	1b40      	subs	r0, r0, r5
 800aaca:	2802      	cmp	r0, #2
 800aacc:	d842      	bhi.n	800ab54 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aace:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800aad0:	079f      	lsls	r7, r3, #30
 800aad2:	d4f7      	bmi.n	800aac4 <HAL_RCC_OscConfig+0x1dc>
 800aad4:	e7df      	b.n	800aa96 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 800aad6:	2500      	movs	r5, #0
 800aad8:	e780      	b.n	800a9dc <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aada:	684a      	ldr	r2, [r1, #4]
 800aadc:	0251      	lsls	r1, r2, #9
 800aade:	f57f af1a 	bpl.w	800a916 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aae2:	4a24      	ldr	r2, [pc, #144]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800aae4:	6812      	ldr	r2, [r2, #0]
 800aae6:	0392      	lsls	r2, r2, #14
 800aae8:	f57f af38 	bpl.w	800a95c <HAL_RCC_OscConfig+0x74>
 800aaec:	6862      	ldr	r2, [r4, #4]
 800aaee:	2a00      	cmp	r2, #0
 800aaf0:	f47f af34 	bne.w	800a95c <HAL_RCC_OscConfig+0x74>
 800aaf4:	e7dc      	b.n	800aab0 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aaf6:	4a1f      	ldr	r2, [pc, #124]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800aaf8:	6813      	ldr	r3, [r2, #0]
 800aafa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aafe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ab00:	f7fe fa96 	bl	8009030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab04:	4e1b      	ldr	r6, [pc, #108]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800ab06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab08:	e004      	b.n	800ab14 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab0a:	f7fe fa91 	bl	8009030 <HAL_GetTick>
 800ab0e:	1b40      	subs	r0, r0, r5
 800ab10:	2864      	cmp	r0, #100	@ 0x64
 800ab12:	d81f      	bhi.n	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab14:	6833      	ldr	r3, [r6, #0]
 800ab16:	039b      	lsls	r3, r3, #14
 800ab18:	d5f7      	bpl.n	800ab0a <HAL_RCC_OscConfig+0x222>
 800ab1a:	e71e      	b.n	800a95a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab1c:	4915      	ldr	r1, [pc, #84]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800ab1e:	6920      	ldr	r0, [r4, #16]
 800ab20:	680a      	ldr	r2, [r1, #0]
 800ab22:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800ab26:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800ab2a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab2c:	071a      	lsls	r2, r3, #28
 800ab2e:	f57f af42 	bpl.w	800a9b6 <HAL_RCC_OscConfig+0xce>
 800ab32:	e79d      	b.n	800aa70 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab3a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ab3c:	f7fe fa78 	bl	8009030 <HAL_GetTick>
 800ab40:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab42:	6833      	ldr	r3, [r6, #0]
 800ab44:	05d9      	lsls	r1, r3, #23
 800ab46:	f53f af4e 	bmi.w	800a9e6 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab4a:	f7fe fa71 	bl	8009030 <HAL_GetTick>
 800ab4e:	1bc0      	subs	r0, r0, r7
 800ab50:	2802      	cmp	r0, #2
 800ab52:	d9f6      	bls.n	800ab42 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 800ab54:	2003      	movs	r0, #3
}
 800ab56:	b002      	add	sp, #8
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab5c:	4a05      	ldr	r2, [pc, #20]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
 800ab5e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800ab66:	f7fe fa63 	bl	8009030 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab6a:	4f02      	ldr	r7, [pc, #8]	@ (800ab74 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800ab6c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab6e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab72:	e00a      	b.n	800ab8a <HAL_RCC_OscConfig+0x2a2>
 800ab74:	40023800 	.word	0x40023800
 800ab78:	42470000 	.word	0x42470000
 800ab7c:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab80:	f7fe fa56 	bl	8009030 <HAL_GetTick>
 800ab84:	1b80      	subs	r0, r0, r6
 800ab86:	4540      	cmp	r0, r8
 800ab88:	d8e4      	bhi.n	800ab54 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab8c:	079a      	lsls	r2, r3, #30
 800ab8e:	d5f7      	bpl.n	800ab80 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 800ab90:	2d00      	cmp	r5, #0
 800ab92:	f43f af4d 	beq.w	800aa30 <HAL_RCC_OscConfig+0x148>
 800ab96:	e044      	b.n	800ac22 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 800ab98:	4a42      	ldr	r2, [pc, #264]	@ (800aca4 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab9a:	4e43      	ldr	r6, [pc, #268]	@ (800aca8 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 800ab9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ab9e:	f7fe fa47 	bl	8009030 <HAL_GetTick>
 800aba2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aba4:	e004      	b.n	800abb0 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aba6:	f7fe fa43 	bl	8009030 <HAL_GetTick>
 800abaa:	1b40      	subs	r0, r0, r5
 800abac:	2802      	cmp	r0, #2
 800abae:	d8d1      	bhi.n	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	0799      	lsls	r1, r3, #30
 800abb4:	d4f7      	bmi.n	800aba6 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	e6fb      	b.n	800a9b2 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abba:	2b01      	cmp	r3, #1
 800abbc:	f43f af78 	beq.w	800aab0 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800abc0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abc2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abc4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abc8:	4291      	cmp	r1, r2
 800abca:	f47f af71 	bne.w	800aab0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abce:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800abd0:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd4:	4291      	cmp	r1, r2
 800abd6:	f47f af6b 	bne.w	800aab0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800abda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800abdc:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800abe0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800abe2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800abe6:	f47f af63 	bne.w	800aab0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800abea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800abec:	0852      	lsrs	r2, r2, #1
 800abee:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800abf2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800abf4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800abf8:	f47f af5a 	bne.w	800aab0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800abfc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800abfe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac02:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800ac06:	bf14      	ite	ne
 800ac08:	2001      	movne	r0, #1
 800ac0a:	2000      	moveq	r0, #0
 800ac0c:	e72d      	b.n	800aa6a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac0e:	4b26      	ldr	r3, [pc, #152]	@ (800aca8 <HAL_RCC_OscConfig+0x3c0>)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ac1e:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ac20:	e76e      	b.n	800ab00 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac22:	4a21      	ldr	r2, [pc, #132]	@ (800aca8 <HAL_RCC_OscConfig+0x3c0>)
 800ac24:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ac26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac2a:	6413      	str	r3, [r2, #64]	@ 0x40
 800ac2c:	e700      	b.n	800aa30 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <HAL_RCC_OscConfig+0x3c0>)
 800ac30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac32:	f042 0204 	orr.w	r2, r2, #4
 800ac36:	671a      	str	r2, [r3, #112]	@ 0x70
 800ac38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac40:	e791      	b.n	800ab66 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800ac42:	f7fe f9f5 	bl	8009030 <HAL_GetTick>
 800ac46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac48:	e005      	b.n	800ac56 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac4a:	f7fe f9f1 	bl	8009030 <HAL_GetTick>
 800ac4e:	1b80      	subs	r0, r0, r6
 800ac50:	2802      	cmp	r0, #2
 800ac52:	f63f af7f 	bhi.w	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	0199      	lsls	r1, r3, #6
 800ac5a:	d4f6      	bmi.n	800ac4a <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac5c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800ac60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ac62:	430b      	orrs	r3, r1
 800ac64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ac68:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 800ac6c:	0852      	lsrs	r2, r2, #1
 800ac6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ac72:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800ac74:	490b      	ldr	r1, [pc, #44]	@ (800aca4 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800ac7a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ac7e:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800ac80:	f7fe f9d6 	bl	8009030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac84:	4d08      	ldr	r5, [pc, #32]	@ (800aca8 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 800ac86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac88:	e005      	b.n	800ac96 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac8a:	f7fe f9d1 	bl	8009030 <HAL_GetTick>
 800ac8e:	1b00      	subs	r0, r0, r4
 800ac90:	2802      	cmp	r0, #2
 800ac92:	f63f af5f 	bhi.w	800ab54 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac96:	682b      	ldr	r3, [r5, #0]
 800ac98:	019a      	lsls	r2, r3, #6
 800ac9a:	d5f6      	bpl.n	800ac8a <HAL_RCC_OscConfig+0x3a2>
 800ac9c:	e6e4      	b.n	800aa68 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800ac9e:	2001      	movs	r0, #1
}
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	42470000 	.word	0x42470000
 800aca8:	40023800 	.word	0x40023800

0800acac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800acac:	b570      	push	{r4, r5, r6, lr}
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800acae:	4e24      	ldr	r6, [pc, #144]	@ (800ad40 <HAL_RCC_MCOConfig+0x94>)
{
 800acb0:	b088      	sub	sp, #32
 800acb2:	460d      	mov	r5, r1
 800acb4:	4614      	mov	r4, r2
  if (RCC_MCOx == RCC_MCO1)
 800acb6:	b9f8      	cbnz	r0, 800acf8 <HAL_RCC_MCOConfig+0x4c>
    __MCO1_CLK_ENABLE();
 800acb8:	9000      	str	r0, [sp, #0]
 800acba:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800acbc:	f043 0301 	orr.w	r3, r3, #1
 800acc0:	6333      	str	r3, [r6, #48]	@ 0x30
 800acc2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800acc4:	9006      	str	r0, [sp, #24]
    __MCO1_CLK_ENABLE();
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800accc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800acd0:	2302      	movs	r3, #2
 800acd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800acd6:	481b      	ldr	r0, [pc, #108]	@ (800ad44 <HAL_RCC_MCOConfig+0x98>)
    GPIO_InitStruct.Pin = MCO1_PIN;
 800acd8:	2200      	movs	r2, #0
 800acda:	2303      	movs	r3, #3
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800acdc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO1_PIN;
 800acde:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __MCO1_CLK_ENABLE();
 800ace2:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ace4:	f7fe fcd8 	bl	8009698 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ace8:	68b3      	ldr	r3, [r6, #8]
 800acea:	f023 63ec 	bic.w	r3, r3, #123731968	@ 0x7600000
 800acee:	432b      	orrs	r3, r5
 800acf0:	4323      	orrs	r3, r4
 800acf2:	60b3      	str	r3, [r6, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800acf4:	b008      	add	sp, #32
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 800acf8:	2200      	movs	r2, #0
 800acfa:	9201      	str	r2, [sp, #4]
 800acfc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800acfe:	4812      	ldr	r0, [pc, #72]	@ (800ad48 <HAL_RCC_MCOConfig+0x9c>)
    __MCO2_CLK_ENABLE();
 800ad00:	f043 0304 	orr.w	r3, r3, #4
 800ad04:	6333      	str	r3, [r6, #48]	@ 0x30
 800ad06:	6b33      	ldr	r3, [r6, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ad08:	9206      	str	r2, [sp, #24]
    __MCO2_CLK_ENABLE();
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800ad10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad14:	2302      	movs	r3, #2
 800ad16:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ad1a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __MCO2_CLK_ENABLE();
 800ad24:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ad26:	f7fe fcb7 	bl	8009698 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800ad2a:	68b3      	ldr	r3, [r6, #8]
 800ad2c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800ad30:	ea43 0105 	orr.w	r1, r3, r5
 800ad34:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
 800ad38:	60b1      	str	r1, [r6, #8]
}
 800ad3a:	b008      	add	sp, #32
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	bf00      	nop
 800ad40:	40023800 	.word	0x40023800
 800ad44:	40020000 	.word	0x40020000
 800ad48:	40020800 	.word	0x40020800

0800ad4c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad4c:	4916      	ldr	r1, [pc, #88]	@ (800ada8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800ad4e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad50:	688b      	ldr	r3, [r1, #8]
 800ad52:	f003 030c 	and.w	r3, r3, #12
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d01b      	beq.n	800ad92 <HAL_RCC_GetSysClockFreq+0x46>
 800ad5a:	2b08      	cmp	r3, #8
 800ad5c:	d117      	bne.n	800ad8e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad5e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad60:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad62:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad64:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad68:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad6c:	d113      	bne.n	800ad96 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad6e:	480f      	ldr	r0, [pc, #60]	@ (800adac <HAL_RCC_GetSysClockFreq+0x60>)
 800ad70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ad74:	fba1 0100 	umull	r0, r1, r1, r0
 800ad78:	f7f5 fa8a 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ad84:	3301      	adds	r3, #1
 800ad86:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ad88:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ad8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ad8e:	4807      	ldr	r0, [pc, #28]	@ (800adac <HAL_RCC_GetSysClockFreq+0x60>)
}
 800ad90:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad92:	4807      	ldr	r0, [pc, #28]	@ (800adb0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ad94:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad96:	4806      	ldr	r0, [pc, #24]	@ (800adb0 <HAL_RCC_GetSysClockFreq+0x64>)
 800ad98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	fba1 0100 	umull	r0, r1, r1, r0
 800ada2:	f7f5 fa75 	bl	8000290 <__aeabi_uldivmod>
 800ada6:	e7e9      	b.n	800ad7c <HAL_RCC_GetSysClockFreq+0x30>
 800ada8:	40023800 	.word	0x40023800
 800adac:	00f42400 	.word	0x00f42400
 800adb0:	017d7840 	.word	0x017d7840

0800adb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f000 8087 	beq.w	800aec8 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adba:	4a48      	ldr	r2, [pc, #288]	@ (800aedc <HAL_RCC_ClockConfig+0x128>)
 800adbc:	6813      	ldr	r3, [r2, #0]
 800adbe:	f003 030f 	and.w	r3, r3, #15
 800adc2:	428b      	cmp	r3, r1
{
 800adc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc8:	460d      	mov	r5, r1
 800adca:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adcc:	d209      	bcs.n	800ade2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adce:	b2cb      	uxtb	r3, r1
 800add0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800add2:	6813      	ldr	r3, [r2, #0]
 800add4:	f003 030f 	and.w	r3, r3, #15
 800add8:	428b      	cmp	r3, r1
 800adda:	d002      	beq.n	800ade2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800addc:	2001      	movs	r0, #1
}
 800adde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	0798      	lsls	r0, r3, #30
 800ade6:	d514      	bpl.n	800ae12 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ade8:	0759      	lsls	r1, r3, #29
 800adea:	d504      	bpl.n	800adf6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adec:	493c      	ldr	r1, [pc, #240]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800adee:	688a      	ldr	r2, [r1, #8]
 800adf0:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800adf4:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adf6:	071a      	lsls	r2, r3, #28
 800adf8:	d504      	bpl.n	800ae04 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adfa:	4939      	ldr	r1, [pc, #228]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800adfc:	688a      	ldr	r2, [r1, #8]
 800adfe:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800ae02:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae04:	4936      	ldr	r1, [pc, #216]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800ae06:	68a0      	ldr	r0, [r4, #8]
 800ae08:	688a      	ldr	r2, [r1, #8]
 800ae0a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800ae0e:	4302      	orrs	r2, r0
 800ae10:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae12:	07df      	lsls	r7, r3, #31
 800ae14:	d521      	bpl.n	800ae5a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae16:	6862      	ldr	r2, [r4, #4]
 800ae18:	2a01      	cmp	r2, #1
 800ae1a:	d057      	beq.n	800aecc <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae1c:	1e93      	subs	r3, r2, #2
 800ae1e:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae20:	4b2f      	ldr	r3, [pc, #188]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae24:	d94d      	bls.n	800aec2 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae26:	0799      	lsls	r1, r3, #30
 800ae28:	d5d8      	bpl.n	800addc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae2a:	4e2d      	ldr	r6, [pc, #180]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800ae2c:	68b3      	ldr	r3, [r6, #8]
 800ae2e:	f023 0303 	bic.w	r3, r3, #3
 800ae32:	4313      	orrs	r3, r2
 800ae34:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800ae36:	f7fe f8fb 	bl	8009030 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae3a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800ae3e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae40:	e004      	b.n	800ae4c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae42:	f7fe f8f5 	bl	8009030 <HAL_GetTick>
 800ae46:	1bc0      	subs	r0, r0, r7
 800ae48:	4540      	cmp	r0, r8
 800ae4a:	d844      	bhi.n	800aed6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae4c:	68b3      	ldr	r3, [r6, #8]
 800ae4e:	6862      	ldr	r2, [r4, #4]
 800ae50:	f003 030c 	and.w	r3, r3, #12
 800ae54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ae58:	d1f3      	bne.n	800ae42 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae5a:	4a20      	ldr	r2, [pc, #128]	@ (800aedc <HAL_RCC_ClockConfig+0x128>)
 800ae5c:	6813      	ldr	r3, [r2, #0]
 800ae5e:	f003 030f 	and.w	r3, r3, #15
 800ae62:	42ab      	cmp	r3, r5
 800ae64:	d906      	bls.n	800ae74 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae66:	b2eb      	uxtb	r3, r5
 800ae68:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	f003 030f 	and.w	r3, r3, #15
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	d1b3      	bne.n	800addc <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	075a      	lsls	r2, r3, #29
 800ae78:	d506      	bpl.n	800ae88 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae7a:	4919      	ldr	r1, [pc, #100]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800ae7c:	68e0      	ldr	r0, [r4, #12]
 800ae7e:	688a      	ldr	r2, [r1, #8]
 800ae80:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800ae84:	4302      	orrs	r2, r0
 800ae86:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae88:	071b      	lsls	r3, r3, #28
 800ae8a:	d507      	bpl.n	800ae9c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae8c:	4a14      	ldr	r2, [pc, #80]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800ae8e:	6921      	ldr	r1, [r4, #16]
 800ae90:	6893      	ldr	r3, [r2, #8]
 800ae92:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ae96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ae9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae9c:	f7ff ff56 	bl	800ad4c <HAL_RCC_GetSysClockFreq>
 800aea0:	4a0f      	ldr	r2, [pc, #60]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800aea2:	4c10      	ldr	r4, [pc, #64]	@ (800aee4 <HAL_RCC_ClockConfig+0x130>)
 800aea4:	6892      	ldr	r2, [r2, #8]
 800aea6:	4910      	ldr	r1, [pc, #64]	@ (800aee8 <HAL_RCC_ClockConfig+0x134>)
 800aea8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800aeac:	4603      	mov	r3, r0
 800aeae:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 800aeb0:	480e      	ldr	r0, [pc, #56]	@ (800aeec <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aeb2:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 800aeb4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aeb6:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800aeb8:	f7fe f870 	bl	8008f9c <HAL_InitTick>
  return HAL_OK;
 800aebc:	2000      	movs	r0, #0
}
 800aebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aec2:	0198      	lsls	r0, r3, #6
 800aec4:	d4b1      	bmi.n	800ae2a <HAL_RCC_ClockConfig+0x76>
 800aec6:	e789      	b.n	800addc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800aec8:	2001      	movs	r0, #1
}
 800aeca:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aecc:	4b04      	ldr	r3, [pc, #16]	@ (800aee0 <HAL_RCC_ClockConfig+0x12c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	039e      	lsls	r6, r3, #14
 800aed2:	d4aa      	bmi.n	800ae2a <HAL_RCC_ClockConfig+0x76>
 800aed4:	e782      	b.n	800addc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800aed6:	2003      	movs	r0, #3
 800aed8:	e781      	b.n	800adde <HAL_RCC_ClockConfig+0x2a>
 800aeda:	bf00      	nop
 800aedc:	40023c00 	.word	0x40023c00
 800aee0:	40023800 	.word	0x40023800
 800aee4:	0800d018 	.word	0x0800d018
 800aee8:	20000000 	.word	0x20000000
 800aeec:	20000008 	.word	0x20000008

0800aef0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aef0:	4b04      	ldr	r3, [pc, #16]	@ (800af04 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800aef2:	4905      	ldr	r1, [pc, #20]	@ (800af08 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	4a05      	ldr	r2, [pc, #20]	@ (800af0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aef8:	6808      	ldr	r0, [r1, #0]
 800aefa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800aefe:	5cd3      	ldrb	r3, [r2, r3]
}
 800af00:	40d8      	lsrs	r0, r3
 800af02:	4770      	bx	lr
 800af04:	40023800 	.word	0x40023800
 800af08:	20000000 	.word	0x20000000
 800af0c:	0800d010 	.word	0x0800d010

0800af10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af10:	4b04      	ldr	r3, [pc, #16]	@ (800af24 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800af12:	4905      	ldr	r1, [pc, #20]	@ (800af28 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	4a05      	ldr	r2, [pc, #20]	@ (800af2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800af18:	6808      	ldr	r0, [r1, #0]
 800af1a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800af1e:	5cd3      	ldrb	r3, [r2, r3]
}
 800af20:	40d8      	lsrs	r0, r3
 800af22:	4770      	bx	lr
 800af24:	40023800 	.word	0x40023800
 800af28:	20000000 	.word	0x20000000
 800af2c:	0800d010 	.word	0x0800d010

0800af30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af30:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800af32:	6803      	ldr	r3, [r0, #0]
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800af34:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 800af38:	b083      	sub	sp, #12
 800af3a:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800af3c:	d10f      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800af3e:	f013 0f0c 	tst.w	r3, #12
 800af42:	d16d      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800af44:	069d      	lsls	r5, r3, #26
 800af46:	f100 80bd 	bmi.w	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800af4a:	06db      	lsls	r3, r3, #27
 800af4c:	d504      	bpl.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af4e:	4b87      	ldr	r3, [pc, #540]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800af50:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800af54:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 800af58:	2000      	movs	r0, #0
}
 800af5a:	b003      	add	sp, #12
 800af5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800af5e:	4b84      	ldr	r3, [pc, #528]	@ (800b170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af60:	4e84      	ldr	r6, [pc, #528]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLI2S_DISABLE();
 800af62:	2200      	movs	r2, #0
 800af64:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800af66:	f7fe f863 	bl	8009030 <HAL_GetTick>
 800af6a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af6c:	e004      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800af6e:	f7fe f85f 	bl	8009030 <HAL_GetTick>
 800af72:	1b43      	subs	r3, r0, r5
 800af74:	2b02      	cmp	r3, #2
 800af76:	d850      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af78:	6833      	ldr	r3, [r6, #0]
 800af7a:	0118      	lsls	r0, r3, #4
 800af7c:	d4f7      	bmi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	07d9      	lsls	r1, r3, #31
 800af82:	d506      	bpl.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800af84:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800af88:	0712      	lsls	r2, r2, #28
 800af8a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800af8e:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800af92:	079a      	lsls	r2, r3, #30
 800af94:	d515      	bpl.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af96:	4977      	ldr	r1, [pc, #476]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af98:	68e2      	ldr	r2, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af9a:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af9e:	6865      	ldr	r5, [r4, #4]
 800afa0:	0612      	lsls	r2, r2, #24
 800afa2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800afa6:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800afaa:	4302      	orrs	r2, r0
 800afac:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afb0:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800afb4:	69e2      	ldr	r2, [r4, #28]
 800afb6:	f020 001f 	bic.w	r0, r0, #31
 800afba:	3a01      	subs	r2, #1
 800afbc:	4302      	orrs	r2, r0
 800afbe:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800afc2:	065b      	lsls	r3, r3, #25
 800afc4:	d509      	bpl.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800afc6:	1d20      	adds	r0, r4, #4
 800afc8:	c80b      	ldmia	r0, {r0, r1, r3}
 800afca:	061b      	lsls	r3, r3, #24
 800afcc:	4a69      	ldr	r2, [pc, #420]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800afce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800afd2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800afd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800afda:	4b65      	ldr	r3, [pc, #404]	@ (800b170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800afdc:	4e65      	ldr	r6, [pc, #404]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLI2S_ENABLE();
 800afde:	2201      	movs	r2, #1
 800afe0:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800afe2:	f7fe f825 	bl	8009030 <HAL_GetTick>
 800afe6:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800afe8:	e004      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800afea:	f7fe f821 	bl	8009030 <HAL_GetTick>
 800afee:	1b40      	subs	r0, r0, r5
 800aff0:	2802      	cmp	r0, #2
 800aff2:	d812      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aff4:	6833      	ldr	r3, [r6, #0]
 800aff6:	011f      	lsls	r7, r3, #4
 800aff8:	d5f7      	bpl.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xba>
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	e79f      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 800affe:	f7fe f817 	bl	8009030 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b002:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800b006:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b008:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b00a:	079a      	lsls	r2, r3, #30
 800b00c:	f100 8090 	bmi.w	800b130 <HAL_RCCEx_PeriphCLKConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b010:	f7fe f80e 	bl	8009030 <HAL_GetTick>
 800b014:	1b80      	subs	r0, r0, r6
 800b016:	42b8      	cmp	r0, r7
 800b018:	d9f6      	bls.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        return HAL_TIMEOUT;
 800b01a:	2003      	movs	r0, #3
}
 800b01c:	b003      	add	sp, #12
 800b01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800b020:	4b53      	ldr	r3, [pc, #332]	@ (800b170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b022:	4e54      	ldr	r6, [pc, #336]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLSAI_DISABLE();
 800b024:	2200      	movs	r2, #0
 800b026:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800b028:	f7fe f802 	bl	8009030 <HAL_GetTick>
 800b02c:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b02e:	e004      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b030:	f7fd fffe 	bl	8009030 <HAL_GetTick>
 800b034:	1b43      	subs	r3, r0, r5
 800b036:	2b02      	cmp	r3, #2
 800b038:	d8ef      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b03a:	6833      	ldr	r3, [r6, #0]
 800b03c:	0098      	lsls	r0, r3, #2
 800b03e:	d4f7      	bmi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x100>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	0751      	lsls	r1, r2, #29
 800b044:	d515      	bpl.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b046:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b048:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b04c:	6920      	ldr	r0, [r4, #16]
 800b04e:	061b      	lsls	r3, r3, #24
 800b050:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800b054:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800b058:	430b      	orrs	r3, r1
 800b05a:	f8c6 3088 	str.w	r3, [r6, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b05e:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800b062:	6a21      	ldr	r1, [r4, #32]
 800b064:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800b068:	3901      	subs	r1, #1
 800b06a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b06e:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b072:	0713      	lsls	r3, r2, #28
 800b074:	d514      	bpl.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b076:	4a3f      	ldr	r2, [pc, #252]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b078:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b07a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b07e:	6920      	ldr	r0, [r4, #16]
 800b080:	071b      	lsls	r3, r3, #28
 800b082:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800b086:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800b08a:	430b      	orrs	r3, r1
 800b08c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b090:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800b094:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b096:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b09a:	430b      	orrs	r3, r1
 800b09c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800b0a0:	4b33      	ldr	r3, [pc, #204]	@ (800b170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0a2:	4e34      	ldr	r6, [pc, #208]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLSAI_ENABLE();
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800b0a8:	f7fd ffc2 	bl	8009030 <HAL_GetTick>
 800b0ac:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0ae:	e004      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b0b0:	f7fd ffbe 	bl	8009030 <HAL_GetTick>
 800b0b4:	1b40      	subs	r0, r0, r5
 800b0b6:	2802      	cmp	r0, #2
 800b0b8:	d8af      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0ba:	6833      	ldr	r3, [r6, #0]
 800b0bc:	009f      	lsls	r7, r3, #2
 800b0be:	d5f7      	bpl.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	e73f      	b.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    PWR->CR |= PWR_CR_DBP;
 800b0c6:	4d2c      	ldr	r5, [pc, #176]	@ (800b178 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	9201      	str	r2, [sp, #4]
 800b0cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b0d2:	641a      	str	r2, [r3, #64]	@ 0x40
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0e4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b0e6:	f7fd ffa3 	bl	8009030 <HAL_GetTick>
 800b0ea:	4606      	mov	r6, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b0ec:	e004      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0ee:	f7fd ff9f 	bl	8009030 <HAL_GetTick>
 800b0f2:	1b83      	subs	r3, r0, r6
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d890      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xea>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	05d8      	lsls	r0, r3, #23
 800b0fc:	d5f7      	bpl.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b0fe:	4d1d      	ldr	r5, [pc, #116]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b100:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b102:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b104:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 800b108:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800b10c:	d013      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b10e:	428a      	cmp	r2, r1
 800b110:	d011      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x206>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b112:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800b114:	4a16      	ldr	r2, [pc, #88]	@ (800b170 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800b116:	2101      	movs	r1, #1
 800b118:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b11c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b120:	2100      	movs	r1, #0
 800b122:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 800b126:	672b      	str	r3, [r5, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b128:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b12a:	07d9      	lsls	r1, r3, #31
 800b12c:	f53f af67 	bmi.w	800affe <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b130:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b132:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800b136:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800b13a:	d00c      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x226>
 800b13c:	490d      	ldr	r1, [pc, #52]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800b13e:	688a      	ldr	r2, [r1, #8]
 800b140:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800b144:	608a      	str	r2, [r1, #8]
 800b146:	4a0b      	ldr	r2, [pc, #44]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800b148:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800b14a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b14e:	430b      	orrs	r3, r1
 800b150:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	e6f9      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x1a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b156:	4807      	ldr	r0, [pc, #28]	@ (800b174 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800b158:	6882      	ldr	r2, [r0, #8]
 800b15a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800b15e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800b162:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800b166:	430a      	orrs	r2, r1
 800b168:	6082      	str	r2, [r0, #8]
 800b16a:	e7ec      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800b16c:	42471000 	.word	0x42471000
 800b170:	42470000 	.word	0x42470000
 800b174:	40023800 	.word	0x40023800
 800b178:	40007000 	.word	0x40007000

0800b17c <HAL_SAI_Init>:
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
  uint32_t syncen_bits = 0U;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f000 80c2 	beq.w	800b306 <HAL_SAI_Init+0x18a>
{
 800b182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b184:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800b188:	4604      	mov	r4, r0
 800b18a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 8098 	beq.w	800b2c4 <HAL_SAI_Init+0x148>
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b194:	4b5d      	ldr	r3, [pc, #372]	@ (800b30c <HAL_SAI_Init+0x190>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b196:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	485d      	ldr	r0, [pc, #372]	@ (800b310 <HAL_SAI_Init+0x194>)
  hsai->State = HAL_SAI_STATE_BUSY;
 800b19c:	2202      	movs	r2, #2
 800b19e:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  __HAL_SAI_DISABLE(hsai);
 800b1a2:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b1a4:	fba0 0303 	umull	r0, r3, r0, r3
 800b1a8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800b1aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b1ae:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800b1b0:	600a      	str	r2, [r1, #0]
 800b1b2:	e002      	b.n	800b1ba <HAL_SAI_Init+0x3e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b1b4:	680a      	ldr	r2, [r1, #0]
 800b1b6:	03d2      	lsls	r2, r2, #15
 800b1b8:	d507      	bpl.n	800b1ca <HAL_SAI_Init+0x4e>
    if (count-- == 0U)
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	d2fa      	bcs.n	800b1b4 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b1be:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  SAI_BlockSynchroConfig(hsai);
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 f8a8 	bl	800b320 <SAI_BlockSynchroConfig>
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b1d0:	6a23      	ldr	r3, [r4, #32]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d17b      	bne.n	800b2ce <HAL_SAI_Init+0x152>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b1d6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800b1d8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b1da:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b1dc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b1de:	f033 0202 	bics.w	r2, r3, #2
 800b1e2:	d162      	bne.n	800b2aa <HAL_SAI_Init+0x12e>
  switch (hsai->Init.Synchro)
 800b1e4:	68a1      	ldr	r1, [r4, #8]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b1e6:	3801      	subs	r0, #1
 800b1e8:	bf18      	it	ne
 800b1ea:	2001      	movne	r0, #1
  switch (hsai->Init.Synchro)
 800b1ec:	2901      	cmp	r1, #1
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b1ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
  switch (hsai->Init.Synchro)
 800b1f2:	d064      	beq.n	800b2be <HAL_SAI_Init+0x142>
 800b1f4:	3902      	subs	r1, #2
 800b1f6:	2901      	cmp	r1, #1
 800b1f8:	bf8c      	ite	hi
 800b1fa:	2100      	movhi	r1, #0
 800b1fc:	2101      	movls	r1, #1
 800b1fe:	02c9      	lsls	r1, r1, #11
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b200:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b202:	6822      	ldr	r2, [r4, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b204:	433b      	orrs	r3, r7
 800b206:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b208:	f8d2 c000 	ldr.w	ip, [r2]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b20c:	433b      	orrs	r3, r7
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b20e:	4f41      	ldr	r7, [pc, #260]	@ (800b314 <HAL_SAI_Init+0x198>)
 800b210:	ea0c 0707 	and.w	r7, ip, r7
 800b214:	6017      	str	r7, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b216:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800b218:	433b      	orrs	r3, r7
 800b21a:	6927      	ldr	r7, [r4, #16]
 800b21c:	433b      	orrs	r3, r7
 800b21e:	6967      	ldr	r7, [r4, #20]
 800b220:	433b      	orrs	r3, r7
 800b222:	6817      	ldr	r7, [r2, #0]
 800b224:	433b      	orrs	r3, r7
 800b226:	4333      	orrs	r3, r6
 800b228:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800b22c:	4303      	orrs	r3, r0
 800b22e:	430b      	orrs	r3, r1
 800b230:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b232:	6851      	ldr	r1, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b234:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800b236:	69a3      	ldr	r3, [r4, #24]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b238:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800b23c:	f021 010f 	bic.w	r1, r1, #15
 800b240:	6051      	str	r1, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b242:	4303      	orrs	r3, r0
 800b244:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b246:	6851      	ldr	r1, [r2, #4]
 800b248:	4303      	orrs	r3, r0
 800b24a:	430b      	orrs	r3, r1
 800b24c:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b24e:	6890      	ldr	r0, [r2, #8]
 800b250:	4931      	ldr	r1, [pc, #196]	@ (800b318 <HAL_SAI_Init+0x19c>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b252:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b254:	4001      	ands	r1, r0
 800b256:	6091      	str	r1, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b258:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800b25a:	6890      	ldr	r0, [r2, #8]
 800b25c:	430b      	orrs	r3, r1
 800b25e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b260:	430b      	orrs	r3, r1
 800b262:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b264:	4303      	orrs	r3, r0
 800b266:	3901      	subs	r1, #1
 800b268:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800b26a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b26c:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b26e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b272:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800b274:	68d1      	ldr	r1, [r2, #12]
 800b276:	f24f 0020 	movw	r0, #61472	@ 0xf020
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800b27a:	e9d4 3516 	ldrd	r3, r5, [r4, #88]	@ 0x58
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800b27e:	4001      	ands	r1, r0
 800b280:	60d1      	str	r1, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800b282:	68d0      	ldr	r0, [r2, #12]
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800b284:	6e61      	ldr	r1, [r4, #100]	@ 0x64
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800b286:	432b      	orrs	r3, r5
 800b288:	4303      	orrs	r3, r0
 800b28a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800b28e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800b290:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800b292:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b296:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b298:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 800b29a:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b29c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hsai);
 800b2a0:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hsai->State = HAL_SAI_STATE_READY;
 800b2a4:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
}
 800b2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800b2aa:	68a1      	ldr	r1, [r4, #8]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b2ac:	f1a0 0001 	sub.w	r0, r0, #1
 800b2b0:	fab0 f080 	clz	r0, r0
 800b2b4:	0940      	lsrs	r0, r0, #5
  switch (hsai->Init.Synchro)
 800b2b6:	2901      	cmp	r1, #1
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b2b8:	ea4f 2040 	mov.w	r0, r0, lsl #9
  switch (hsai->Init.Synchro)
 800b2bc:	d19a      	bne.n	800b1f4 <HAL_SAI_Init+0x78>
 800b2be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b2c2:	e79d      	b.n	800b200 <HAL_SAI_Init+0x84>
    hsai->Lock = HAL_UNLOCKED;
 800b2c4:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    HAL_SAI_MspInit(hsai);
 800b2c8:	f7fd f86a 	bl	80083a0 <HAL_SAI_MspInit>
 800b2cc:	e762      	b.n	800b194 <HAL_SAI_Init+0x18>
    freq = SAI_GetInputClock(hsai);
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 f83a 	bl	800b348 <SAI_GetInputClock>
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800b2d4:	4d11      	ldr	r5, [pc, #68]	@ (800b31c <HAL_SAI_Init+0x1a0>)
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800b2d6:	6a22      	ldr	r2, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b2d8:	6b66      	ldr	r6, [r4, #52]	@ 0x34
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800b2da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b2de:	0252      	lsls	r2, r2, #9
 800b2e0:	0043      	lsls	r3, r0, #1
 800b2e2:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800b2e6:	fba5 2503 	umull	r2, r5, r5, r3
 800b2ea:	08ed      	lsrs	r5, r5, #3
    if ((tmpregisterGCR % 10U) > 8U)
 800b2ec:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800b2f0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800b2f4:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800b2f6:	bf08      	it	eq
 800b2f8:	3501      	addeq	r5, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b2fa:	2e04      	cmp	r6, #4
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800b2fc:	6265      	str	r5, [r4, #36]	@ 0x24
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b2fe:	bf04      	itt	eq
 800b300:	086d      	lsreq	r5, r5, #1
 800b302:	6265      	streq	r5, [r4, #36]	@ 0x24
 800b304:	e769      	b.n	800b1da <HAL_SAI_Init+0x5e>
    return HAL_ERROR;
 800b306:	2001      	movs	r0, #1
}
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20000000 	.word	0x20000000
 800b310:	95cbec1b 	.word	0x95cbec1b
 800b314:	ff05c010 	.word	0xff05c010
 800b318:	fff88000 	.word	0xfff88000
 800b31c:	cccccccd 	.word	0xcccccccd

0800b320 <SAI_BlockSynchroConfig>:
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b320:	68c3      	ldr	r3, [r0, #12]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d009      	beq.n	800b33a <SAI_BlockSynchroConfig+0x1a>
 800b326:	f1a3 0302 	sub.w	r3, r3, #2
 800b32a:	fab3 f383 	clz	r3, r3
      break;
    default:
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
 800b32e:	4a05      	ldr	r2, [pc, #20]	@ (800b344 <SAI_BlockSynchroConfig+0x24>)
  switch (hsai->Init.SynchroExt)
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	015b      	lsls	r3, r3, #5
  SAI1->GCR = tmpregisterGCR;
 800b334:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800b338:	4770      	bx	lr
  SAI1->GCR = tmpregisterGCR;
 800b33a:	4a02      	ldr	r2, [pc, #8]	@ (800b344 <SAI_BlockSynchroConfig+0x24>)
  switch (hsai->Init.SynchroExt)
 800b33c:	2310      	movs	r3, #16
  SAI1->GCR = tmpregisterGCR;
 800b33e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
}
 800b342:	4770      	bx	lr
 800b344:	40015000 	.word	0x40015000

0800b348 <SAI_GetInputClock>:

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 800b348:	6801      	ldr	r1, [r0, #0]
 800b34a:	4b23      	ldr	r3, [pc, #140]	@ (800b3d8 <SAI_GetInputClock+0x90>)
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800b34c:	69c2      	ldr	r2, [r0, #28]
  if (hsai->Instance == SAI1_Block_A)
 800b34e:	4299      	cmp	r1, r3
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800b350:	4922      	ldr	r1, [pc, #136]	@ (800b3dc <SAI_GetInputClock+0x94>)
 800b352:	f8d1 308c 	ldr.w	r3, [r1, #140]	@ 0x8c
 800b356:	bf0b      	itete	eq
 800b358:	f423 1340 	biceq.w	r3, r3, #3145728	@ 0x300000
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800b35c:	f423 0340 	bicne.w	r3, r3, #12582912	@ 0xc00000
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800b360:	4313      	orreq	r3, r2
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800b362:	ea43 0382 	orrne.w	r3, r3, r2, lsl #2
 800b366:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b36a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3dc <SAI_GetInputClock+0x94>)
 800b36c:	6859      	ldr	r1, [r3, #4]
 800b36e:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b372:	6859      	ldr	r1, [r3, #4]
 800b374:	bf0c      	ite	eq
 800b376:	4b1a      	ldreq	r3, [pc, #104]	@ (800b3e0 <SAI_GetInputClock+0x98>)
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b378:	4b1a      	ldrne	r3, [pc, #104]	@ (800b3e4 <SAI_GetInputClock+0x9c>)
 800b37a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800b37e:	fbb3 f3f1 	udiv	r3, r3, r1
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800b382:	b9a2      	cbnz	r2, 800b3ae <SAI_GetInputClock+0x66>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800b384:	4a15      	ldr	r2, [pc, #84]	@ (800b3dc <SAI_GetInputClock+0x94>)
 800b386:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800b38a:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800b38e:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800b392:	f3c0 1088 	ubfx	r0, r0, #6, #9
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800b396:	f3c2 2204 	ubfx	r2, r2, #8, #5
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800b39a:	fb03 f000 	mul.w	r0, r3, r0
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800b39e:	f3c1 6103 	ubfx	r1, r1, #24, #4

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800b3a2:	1c53      	adds	r3, r2, #1
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800b3a4:	fbb0 f0f1 	udiv	r0, r0, r1
    saiclocksource = saiclocksource / (tmpreg);
 800b3a8:	fbb0 f0f3 	udiv	r0, r0, r3
 800b3ac:	4770      	bx	lr
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 800b3ae:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800b3b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b3dc <SAI_GetInputClock+0x94>)
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 800b3b4:	d005      	beq.n	800b3c2 <SAI_GetInputClock+0x7a>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800b3b6:	6893      	ldr	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800b3b8:	480b      	ldr	r0, [pc, #44]	@ (800b3e8 <SAI_GetInputClock+0xa0>)
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800b3ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3be:	6093      	str	r3, [r2, #8]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
}
 800b3c0:	4770      	bx	lr
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800b3c2:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800b3c6:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800b3ca:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800b3ce:	f3c0 1088 	ubfx	r0, r0, #6, #9
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800b3d2:	f002 021f 	and.w	r2, r2, #31
 800b3d6:	e7e0      	b.n	800b39a <SAI_GetInputClock+0x52>
 800b3d8:	40015804 	.word	0x40015804
 800b3dc:	40023800 	.word	0x40023800
 800b3e0:	00f42400 	.word	0x00f42400
 800b3e4:	017d7840 	.word	0x017d7840
 800b3e8:	00bb8000 	.word	0x00bb8000

0800b3ec <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b3ec:	b1f0      	cbz	r0, 800b42c <HAL_SDRAM_Init+0x40>
{
 800b3ee:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b3f0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b3fc:	b18b      	cbz	r3, 800b422 <HAL_SDRAM_Init+0x36>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b3fe:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b400:	2302      	movs	r3, #2
 800b402:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b406:	f851 0b04 	ldr.w	r0, [r1], #4
 800b40a:	f000 f9fd 	bl	800b808 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b40e:	e9d4 0200 	ldrd	r0, r2, [r4]
 800b412:	4629      	mov	r1, r5
 800b414:	f000 fa30 	bl	800b878 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b418:	2301      	movs	r3, #1
 800b41a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 800b41e:	2000      	movs	r0, #0
}
 800b420:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800b422:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800b426:	f7fc ffb7 	bl	8008398 <HAL_SDRAM_MspInit>
 800b42a:	e7e8      	b.n	800b3fe <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800b42c:	2001      	movs	r0, #1
}
 800b42e:	4770      	bx	lr

0800b430 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b430:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b432:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b436:	2b02      	cmp	r3, #2
{
 800b438:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b43a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b43c:	d004      	beq.n	800b448 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b43e:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800b442:	2c01      	cmp	r4, #1
 800b444:	d001      	beq.n	800b44a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800b446:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800b448:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b44a:	460e      	mov	r6, r1
 800b44c:	2302      	movs	r3, #2
 800b44e:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b452:	6828      	ldr	r0, [r5, #0]
 800b454:	f000 fa4e 	bl	800b8f4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b458:	6833      	ldr	r3, [r6, #0]
 800b45a:	2b02      	cmp	r3, #2
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b45c:	bf06      	itte	eq
 800b45e:	2305      	moveq	r3, #5
 800b460:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b464:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  return HAL_OK;
 800b468:	2000      	movs	r0, #0
}
 800b46a:	bd70      	pop	{r4, r5, r6, pc}

0800b46c <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b46c:	b348      	cbz	r0, 800b4c2 <HAL_SRAM_Init+0x56>
{
 800b46e:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b470:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 800b474:	4615      	mov	r5, r2
 800b476:	460e      	mov	r6, r1
 800b478:	4604      	mov	r4, r0
 800b47a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b47e:	b1db      	cbz	r3, 800b4b8 <HAL_SRAM_Init+0x4c>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b480:	4621      	mov	r1, r4
 800b482:	f851 0b08 	ldr.w	r0, [r1], #8
 800b486:	f000 f91f 	bl	800b6c8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b48a:	68a2      	ldr	r2, [r4, #8]
 800b48c:	6820      	ldr	r0, [r4, #0]
 800b48e:	4631      	mov	r1, r6
 800b490:	f000 f95e 	bl	800b750 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b494:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 800b498:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b49a:	4629      	mov	r1, r5
 800b49c:	f000 f988 	bl	800b7b0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b4a0:	6822      	ldr	r2, [r4, #0]
 800b4a2:	68a1      	ldr	r1, [r4, #8]
 800b4a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b4a8:	2501      	movs	r5, #1
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b4aa:	432b      	orrs	r3, r5
 800b4ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 800b4b0:	f884 5049 	strb.w	r5, [r4, #73]	@ 0x49

  return HAL_OK;
 800b4b4:	2000      	movs	r0, #0
}
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 800b4b8:	f880 2048 	strb.w	r2, [r0, #72]	@ 0x48
    HAL_SRAM_MspInit(hsram);
 800b4bc:	f7fc ff6a 	bl	8008394 <HAL_SRAM_MspInit>
 800b4c0:	e7de      	b.n	800b480 <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 800b4c2:	2001      	movs	r0, #1
}
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop

0800b4c8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f000 8087 	beq.w	800b5dc <HAL_UART_Init+0x114>
{
 800b4ce:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4d0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d079      	beq.n	800b5d2 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b4de:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4e0:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800b4e2:	2224      	movs	r2, #36	@ 0x24
 800b4e4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b4e8:	68da      	ldr	r2, [r3, #12]
 800b4ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b4ee:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f0:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4f2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800b4f8:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4fa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4fc:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4fe:	4302      	orrs	r2, r0
 800b500:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800b502:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b504:	4302      	orrs	r2, r0
 800b506:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800b508:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 800b50c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b510:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800b512:	430a      	orrs	r2, r1
 800b514:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b516:	695a      	ldr	r2, [r3, #20]
 800b518:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b51a:	4931      	ldr	r1, [pc, #196]	@ (800b5e0 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b51c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b520:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b522:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b524:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b526:	d036      	beq.n	800b596 <HAL_UART_Init+0xce>
 800b528:	4a2e      	ldr	r2, [pc, #184]	@ (800b5e4 <HAL_UART_Init+0x11c>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d033      	beq.n	800b596 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b52e:	f7ff fcdf 	bl	800aef0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b532:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b534:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b536:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b53a:	e9d4 5300 	ldrd	r5, r3, [r4]
 800b53e:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b542:	d02b      	beq.n	800b59c <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b544:	009a      	lsls	r2, r3, #2
 800b546:	0f9b      	lsrs	r3, r3, #30
 800b548:	f7f4 fea2 	bl	8000290 <__aeabi_uldivmod>
 800b54c:	4a26      	ldr	r2, [pc, #152]	@ (800b5e8 <HAL_UART_Init+0x120>)
 800b54e:	fba2 1300 	umull	r1, r3, r2, r0
 800b552:	095b      	lsrs	r3, r3, #5
 800b554:	2164      	movs	r1, #100	@ 0x64
 800b556:	fb01 0013 	mls	r0, r1, r3, r0
 800b55a:	0100      	lsls	r0, r0, #4
 800b55c:	3032      	adds	r0, #50	@ 0x32
 800b55e:	fba2 2000 	umull	r2, r0, r2, r0
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 800b568:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b56a:	692a      	ldr	r2, [r5, #16]
 800b56c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b570:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b572:	696a      	ldr	r2, [r5, #20]
 800b574:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b578:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 800b57a:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b57c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b57e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800b580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b584:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b586:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b588:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b58c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 800b590:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b592:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800b594:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800b596:	f7ff fcbb 	bl	800af10 <HAL_RCC_GetPCLK2Freq>
 800b59a:	e7ca      	b.n	800b532 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b59c:	18da      	adds	r2, r3, r3
 800b59e:	f04f 0300 	mov.w	r3, #0
 800b5a2:	415b      	adcs	r3, r3
 800b5a4:	f7f4 fe74 	bl	8000290 <__aeabi_uldivmod>
 800b5a8:	4a0f      	ldr	r2, [pc, #60]	@ (800b5e8 <HAL_UART_Init+0x120>)
 800b5aa:	fba2 3100 	umull	r3, r1, r2, r0
 800b5ae:	0949      	lsrs	r1, r1, #5
 800b5b0:	2364      	movs	r3, #100	@ 0x64
 800b5b2:	fb03 0311 	mls	r3, r3, r1, r0
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	3332      	adds	r3, #50	@ 0x32
 800b5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b5be:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800b5c2:	091b      	lsrs	r3, r3, #4
 800b5c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b5c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b5cc:	4413      	add	r3, r2
 800b5ce:	60ab      	str	r3, [r5, #8]
 800b5d0:	e7cb      	b.n	800b56a <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 800b5d2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800b5d6:	f7fc fe5f 	bl	8008298 <HAL_UART_MspInit>
 800b5da:	e780      	b.n	800b4de <HAL_UART_Init+0x16>
    return HAL_ERROR;
 800b5dc:	2001      	movs	r0, #1
}
 800b5de:	4770      	bx	lr
 800b5e0:	40011000 	.word	0x40011000
 800b5e4:	40011400 	.word	0x40011400
 800b5e8:	51eb851f 	.word	0x51eb851f

0800b5ec <HAL_UART_Transmit>:
{
 800b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800b5f2:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800b5f6:	2820      	cmp	r0, #32
 800b5f8:	d14b      	bne.n	800b692 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800b5fa:	4688      	mov	r8, r1
 800b5fc:	b109      	cbz	r1, 800b602 <HAL_UART_Transmit+0x16>
 800b5fe:	4617      	mov	r7, r2
 800b600:	b912      	cbnz	r2, 800b608 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 800b602:	2001      	movs	r0, #1
}
 800b604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b608:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b60a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b60e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b610:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b614:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800b618:	f7fd fd0a 	bl	8009030 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b61c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800b61e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800b624:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 800b626:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b628:	d042      	beq.n	800b6b0 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 800b62a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b62c:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 800b62e:	b292      	uxth	r2, r2
 800b630:	b192      	cbz	r2, 800b658 <HAL_UART_Transmit+0x6c>
 800b632:	1c68      	adds	r0, r5, #1
 800b634:	d122      	bne.n	800b67c <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	0612      	lsls	r2, r2, #24
 800b63a:	d5fc      	bpl.n	800b636 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 800b63c:	f1b8 0f00 	cmp.w	r8, #0
 800b640:	d022      	beq.n	800b688 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b642:	f818 2b01 	ldrb.w	r2, [r8], #1
 800b646:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 800b648:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800b64a:	3a01      	subs	r2, #1
 800b64c:	b292      	uxth	r2, r2
 800b64e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b650:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800b652:	b292      	uxth	r2, r2
 800b654:	2a00      	cmp	r2, #0
 800b656:	d1ec      	bne.n	800b632 <HAL_UART_Transmit+0x46>
 800b658:	1c69      	adds	r1, r5, #1
 800b65a:	d125      	bne.n	800b6a8 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	0652      	lsls	r2, r2, #25
 800b660:	d5fc      	bpl.n	800b65c <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800b662:	2320      	movs	r3, #32
 800b664:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800b668:	2000      	movs	r0, #0
 800b66a:	e7cb      	b.n	800b604 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b66c:	f7fd fce0 	bl	8009030 <HAL_GetTick>
 800b670:	1b80      	subs	r0, r0, r6
 800b672:	4285      	cmp	r5, r0
 800b674:	d322      	bcc.n	800b6bc <HAL_UART_Transmit+0xd0>
 800b676:	b30d      	cbz	r5, 800b6bc <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	0617      	lsls	r7, r2, #24
 800b680:	d5f4      	bpl.n	800b66c <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 800b682:	f1b8 0f00 	cmp.w	r8, #0
 800b686:	d1dc      	bne.n	800b642 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b688:	f839 2b02 	ldrh.w	r2, [r9], #2
 800b68c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b690:	e7d9      	b.n	800b646 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 800b692:	2002      	movs	r0, #2
}
 800b694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b698:	f7fd fcca 	bl	8009030 <HAL_GetTick>
 800b69c:	1b83      	subs	r3, r0, r6
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	d30c      	bcc.n	800b6bc <HAL_UART_Transmit+0xd0>
 800b6a2:	b15d      	cbz	r5, 800b6bc <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	065b      	lsls	r3, r3, #25
 800b6ac:	d5f4      	bpl.n	800b698 <HAL_UART_Transmit+0xac>
 800b6ae:	e7d8      	b.n	800b662 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1b9      	bne.n	800b62a <HAL_UART_Transmit+0x3e>
 800b6b6:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800b6b8:	4698      	mov	r8, r3
 800b6ba:	e7b6      	b.n	800b62a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 800b6bc:	2320      	movs	r3, #32
 800b6be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800b6c2:	2003      	movs	r0, #3
}
 800b6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b6c8 <FMC_NORSRAM_Init>:
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b6c8:	680a      	ldr	r2, [r1, #0]
 800b6ca:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800b6ce:	f023 0301 	bic.w	r3, r3, #1
{
 800b6d2:	b430      	push	{r4, r5}

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b6d4:	688d      	ldr	r5, [r1, #8]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b6d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b6da:	684b      	ldr	r3, [r1, #4]
  btcr_reg |= Init->ContinuousClock;
 800b6dc:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b6de:	432b      	orrs	r3, r5
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b6e0:	f1a5 0c08 	sub.w	ip, r5, #8
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b6e4:	68cd      	ldr	r5, [r1, #12]
 800b6e6:	432b      	orrs	r3, r5
 800b6e8:	690d      	ldr	r5, [r1, #16]
 800b6ea:	432b      	orrs	r3, r5
 800b6ec:	694d      	ldr	r5, [r1, #20]
 800b6ee:	432b      	orrs	r3, r5
 800b6f0:	69cd      	ldr	r5, [r1, #28]
 800b6f2:	432b      	orrs	r3, r5
 800b6f4:	6a0d      	ldr	r5, [r1, #32]
 800b6f6:	432b      	orrs	r3, r5
 800b6f8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b6fa:	432b      	orrs	r3, r5
 800b6fc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800b6fe:	432b      	orrs	r3, r5
 800b700:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800b702:	432b      	orrs	r3, r5
 800b704:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 800b706:	432b      	orrs	r3, r5
 800b708:	698d      	ldr	r5, [r1, #24]
 800b70a:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 800b70c:	432b      	orrs	r3, r5
 800b70e:	4323      	orrs	r3, r4
 800b710:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800b714:	430b      	orrs	r3, r1
 800b716:	490d      	ldr	r1, [pc, #52]	@ (800b74c <FMC_NORSRAM_Init+0x84>)
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b718:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b71c:	4029      	ands	r1, r5
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b71e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b722:	430b      	orrs	r3, r1
 800b724:	ea43 138c 	orr.w	r3, r3, ip, lsl #6

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b728:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b72c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b730:	d002      	beq.n	800b738 <FMC_NORSRAM_Init+0x70>
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
}
 800b732:	2000      	movs	r0, #0
 800b734:	bc30      	pop	{r4, r5}
 800b736:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d0fa      	beq.n	800b732 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b73c:	6803      	ldr	r3, [r0, #0]
 800b73e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b742:	6003      	str	r3, [r0, #0]
}
 800b744:	bc30      	pop	{r4, r5}
 800b746:	2000      	movs	r0, #0
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	ffe00080 	.word	0xffe00080

0800b750 <FMC_NORSRAM_Timing_Init>:
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b750:	690b      	ldr	r3, [r1, #16]
 800b752:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b756:	f103 3cff 	add.w	ip, r3, #4294967295
 800b75a:	6853      	ldr	r3, [r2, #4]
{
 800b75c:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b75e:	698c      	ldr	r4, [r1, #24]
 800b760:	f003 4e40 	and.w	lr, r3, #3221225472	@ 0xc0000000
 800b764:	680b      	ldr	r3, [r1, #0]
 800b766:	4323      	orrs	r3, r4
 800b768:	684c      	ldr	r4, [r1, #4]
 800b76a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b76e:	688c      	ldr	r4, [r1, #8]
 800b770:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b774:	68cc      	ldr	r4, [r1, #12]
 800b776:	6949      	ldr	r1, [r1, #20]
 800b778:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b77c:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800b780:	3902      	subs	r1, #2
 800b782:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b786:	ea43 030e 	orr.w	r3, r3, lr
 800b78a:	6053      	str	r3, [r2, #4]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b78c:	6803      	ldr	r3, [r0, #0]
 800b78e:	02db      	lsls	r3, r3, #11
 800b790:	d50c      	bpl.n	800b7ac <FMC_NORSRAM_Timing_Init+0x5c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800b792:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800b794:	6843      	ldr	r3, [r0, #4]
 800b796:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800b79a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800b79e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800b7a2:	ea4c 0c02 	orr.w	ip, ip, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800b7a6:	ea43 030c 	orr.w	r3, r3, ip
 800b7aa:	6043      	str	r3, [r0, #4]
  }

#endif
  return HAL_OK;
}
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	bd10      	pop	{r4, pc}

0800b7b0 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b7b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7b4:	d005      	beq.n	800b7c2 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b7b6:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800b7ba:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800b7be:	2000      	movs	r0, #0
 800b7c0:	4770      	bx	lr
{
 800b7c2:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b7c4:	680b      	ldr	r3, [r1, #0]
 800b7c6:	698d      	ldr	r5, [r1, #24]
 800b7c8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800b7cc:	432b      	orrs	r3, r5
 800b7ce:	684d      	ldr	r5, [r1, #4]
 800b7d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800b7d4:	688d      	ldr	r5, [r1, #8]
 800b7d6:	68c9      	ldr	r1, [r1, #12]
 800b7d8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800b7dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b7e0:	4903      	ldr	r1, [pc, #12]	@ (800b7f0 <FMC_NORSRAM_Extended_Timing_Init+0x40>)
 800b7e2:	4021      	ands	r1, r4
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800b7ea:	bc30      	pop	{r4, r5}
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	4770      	bx	lr
 800b7f0:	cff00000 	.word	0xcff00000

0800b7f4 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 800b7f4:	4603      	mov	r3, r0

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);

  return HAL_OK;
}
 800b7f6:	2000      	movs	r0, #0
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 800b7f8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800b7fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b800:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop

0800b808 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b80c:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 800b810:	e9d1 8200 	ldrd	r8, r2, [r1]
 800b814:	f8d1 c024 	ldr.w	ip, [r1, #36]	@ 0x24
 800b818:	ea43 030e 	orr.w	r3, r3, lr
 800b81c:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 800b820:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800b824:	ea43 030c 	orr.w	r3, r3, ip
 800b828:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b82a:	f1b8 0f00 	cmp.w	r8, #0
 800b82e:	d10f      	bne.n	800b850 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b830:	4313      	orrs	r3, r2
 800b832:	433b      	orrs	r3, r7
 800b834:	6802      	ldr	r2, [r0, #0]
 800b836:	4333      	orrs	r3, r6
 800b838:	432b      	orrs	r3, r5
 800b83a:	4323      	orrs	r3, r4
 800b83c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800b840:	430b      	orrs	r3, r1
 800b842:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800b846:	4313      	orrs	r3, r2
 800b848:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b84a:	2000      	movs	r0, #0
 800b84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b850:	433a      	orrs	r2, r7
 800b852:	4332      	orrs	r2, r6
 800b854:	432a      	orrs	r2, r5
 800b856:	4322      	orrs	r2, r4
 800b858:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b85a:	6801      	ldr	r1, [r0, #0]
 800b85c:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800b860:	430b      	orrs	r3, r1
 800b862:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b864:	6843      	ldr	r3, [r0, #4]
 800b866:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b86a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b86e:	4313      	orrs	r3, r2
 800b870:	6043      	str	r3, [r0, #4]
}
 800b872:	2000      	movs	r0, #0
 800b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b878 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b878:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b87a:	68cc      	ldr	r4, [r1, #12]
 800b87c:	694b      	ldr	r3, [r1, #20]
 800b87e:	688d      	ldr	r5, [r1, #8]
 800b880:	698f      	ldr	r7, [r1, #24]
 800b882:	680e      	ldr	r6, [r1, #0]
 800b884:	3c01      	subs	r4, #1
 800b886:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 800b88a:	684c      	ldr	r4, [r1, #4]
 800b88c:	3c01      	subs	r4, #1
 800b88e:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 800b892:	690c      	ldr	r4, [r1, #16]
 800b894:	3b01      	subs	r3, #1
 800b896:	3d01      	subs	r5, #1
 800b898:	3c01      	subs	r4, #1
 800b89a:	1e79      	subs	r1, r7, #1
 800b89c:	051b      	lsls	r3, r3, #20
 800b89e:	022d      	lsls	r5, r5, #8
 800b8a0:	0424      	lsls	r4, r4, #16
 800b8a2:	3e01      	subs	r6, #1
 800b8a4:	0609      	lsls	r1, r1, #24
  if (Bank == FMC_SDRAM_BANK1)
 800b8a6:	b972      	cbnz	r2, 800b8c6 <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b8a8:	ea4e 0303 	orr.w	r3, lr, r3
 800b8ac:	4333      	orrs	r3, r6
 800b8ae:	ea43 030c 	orr.w	r3, r3, ip
 800b8b2:	6882      	ldr	r2, [r0, #8]
 800b8b4:	432b      	orrs	r3, r5
 800b8b6:	4323      	orrs	r3, r4
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b8c6:	6882      	ldr	r2, [r0, #8]
 800b8c8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b8cc:	ea4e 0e03 	orr.w	lr, lr, r3
 800b8d0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800b8d4:	ea42 020e 	orr.w	r2, r2, lr
 800b8d8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b8da:	ea4c 0305 	orr.w	r3, ip, r5
 800b8de:	68c2      	ldr	r2, [r0, #12]
 800b8e0:	4333      	orrs	r3, r6
 800b8e2:	4323      	orrs	r3, r4
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60c3      	str	r3, [r0, #12]
}
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f2:	bf00      	nop

0800b8f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b8f4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b8f6:	680b      	ldr	r3, [r1, #0]
{
 800b8f8:	4615      	mov	r5, r2
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b8fa:	684a      	ldr	r2, [r1, #4]
{
 800b8fc:	4604      	mov	r4, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b8fe:	4313      	orrs	r3, r2
 800b900:	6900      	ldr	r0, [r0, #16]
 800b902:	68ca      	ldr	r2, [r1, #12]
 800b904:	0d80      	lsrs	r0, r0, #22
 800b906:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800b90a:	688a      	ldr	r2, [r1, #8]
 800b90c:	0580      	lsls	r0, r0, #22
 800b90e:	4303      	orrs	r3, r0
 800b910:	3a01      	subs	r2, #1
 800b912:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b916:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800b918:	f7fd fb8a 	bl	8009030 <HAL_GetTick>

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b91c:	1c6e      	adds	r6, r5, #1
 800b91e:	d104      	bne.n	800b92a <FMC_SDRAM_SendCommand+0x36>
 800b920:	69a3      	ldr	r3, [r4, #24]
 800b922:	069a      	lsls	r2, r3, #26
 800b924:	d4fc      	bmi.n	800b920 <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800b926:	2000      	movs	r0, #0
}
 800b928:	bd70      	pop	{r4, r5, r6, pc}
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b92a:	69a3      	ldr	r3, [r4, #24]
 800b92c:	069b      	lsls	r3, r3, #26
 800b92e:	d5fa      	bpl.n	800b926 <FMC_SDRAM_SendCommand+0x32>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b930:	4606      	mov	r6, r0
 800b932:	b145      	cbz	r5, 800b946 <FMC_SDRAM_SendCommand+0x52>
 800b934:	f7fd fb7c 	bl	8009030 <HAL_GetTick>
 800b938:	1b80      	subs	r0, r0, r6
 800b93a:	42a8      	cmp	r0, r5
 800b93c:	d803      	bhi.n	800b946 <FMC_SDRAM_SendCommand+0x52>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b93e:	69a3      	ldr	r3, [r4, #24]
 800b940:	0699      	lsls	r1, r3, #26
 800b942:	d4f7      	bmi.n	800b934 <FMC_SDRAM_SendCommand+0x40>
 800b944:	e7ef      	b.n	800b926 <FMC_SDRAM_SendCommand+0x32>
        return HAL_TIMEOUT;
 800b946:	2003      	movs	r0, #3
}
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	bf00      	nop

0800b94c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b94c:	b084      	sub	sp, #16
 800b94e:	b082      	sub	sp, #8
 800b950:	f10d 0c0c 	add.w	ip, sp, #12
 800b954:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b958:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800b95c:	2a01      	cmp	r2, #1
{
 800b95e:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b960:	d12e      	bne.n	800b9c0 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b962:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800b964:	f89d 1018 	ldrb.w	r1, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b968:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b96c:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b96e:	68c2      	ldr	r2, [r0, #12]
 800b970:	f422 0284 	bic.w	r2, r2, #4325376	@ 0x420000
 800b974:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b978:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b97a:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b97c:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b97e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800b982:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b984:	d061      	beq.n	800ba4a <USB_CoreInit+0xfe>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800b986:	2200      	movs	r2, #0
 800b988:	9200      	str	r2, [sp, #0]
 800b98a:	e002      	b.n	800b992 <USB_CoreInit+0x46>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b98c:	691a      	ldr	r2, [r3, #16]
 800b98e:	2a00      	cmp	r2, #0
 800b990:	db30      	blt.n	800b9f4 <USB_CoreInit+0xa8>
    count++;
 800b992:	9a00      	ldr	r2, [sp, #0]
 800b994:	3201      	adds	r2, #1
 800b996:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800b998:	9a00      	ldr	r2, [sp, #0]
 800b99a:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800b99e:	d9f5      	bls.n	800b98c <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800b9a0:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800b9a2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b9a6:	2a01      	cmp	r2, #1
 800b9a8:	d107      	bne.n	800b9ba <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b9aa:	689a      	ldr	r2, [r3, #8]
 800b9ac:	f042 0206 	orr.w	r2, r2, #6
 800b9b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	f042 0220 	orr.w	r2, r2, #32
 800b9b8:	609a      	str	r2, [r3, #8]
}
 800b9ba:	b002      	add	sp, #8
 800b9bc:	b004      	add	sp, #16
 800b9be:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b9c0:	68c2      	ldr	r2, [r0, #12]
  __IO uint32_t count = 0U;
 800b9c2:	2100      	movs	r1, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b9c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9c8:	60c2      	str	r2, [r0, #12]
  __IO uint32_t count = 0U;
 800b9ca:	9101      	str	r1, [sp, #4]
 800b9cc:	e002      	b.n	800b9d4 <USB_CoreInit+0x88>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9ce:	691a      	ldr	r2, [r3, #16]
 800b9d0:	2a00      	cmp	r2, #0
 800b9d2:	db27      	blt.n	800ba24 <USB_CoreInit+0xd8>
    count++;
 800b9d4:	9a01      	ldr	r2, [sp, #4]
 800b9d6:	3201      	adds	r2, #1
 800b9d8:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800b9da:	9a01      	ldr	r2, [sp, #4]
 800b9dc:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800b9e0:	d9f5      	bls.n	800b9ce <USB_CoreInit+0x82>
      return HAL_TIMEOUT;
 800b9e2:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800b9e4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800b9e8:	b9ba      	cbnz	r2, 800ba1a <USB_CoreInit+0xce>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b9ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b9f0:	639a      	str	r2, [r3, #56]	@ 0x38
 800b9f2:	e7d6      	b.n	800b9a2 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9f8:	691a      	ldr	r2, [r3, #16]
 800b9fa:	f042 0201 	orr.w	r2, r2, #1
 800b9fe:	611a      	str	r2, [r3, #16]
 800ba00:	e003      	b.n	800ba0a <USB_CoreInit+0xbe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba02:	6918      	ldr	r0, [r3, #16]
 800ba04:	f010 0001 	ands.w	r0, r0, #1
 800ba08:	d0cb      	beq.n	800b9a2 <USB_CoreInit+0x56>
    count++;
 800ba0a:	9a00      	ldr	r2, [sp, #0]
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800ba10:	9a00      	ldr	r2, [sp, #0]
 800ba12:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800ba16:	d9f4      	bls.n	800ba02 <USB_CoreInit+0xb6>
 800ba18:	e7c2      	b.n	800b9a0 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba1c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ba20:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba22:	e7be      	b.n	800b9a2 <USB_CoreInit+0x56>
  count = 0U;
 800ba24:	2200      	movs	r2, #0
 800ba26:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ba28:	691a      	ldr	r2, [r3, #16]
 800ba2a:	f042 0201 	orr.w	r2, r2, #1
 800ba2e:	611a      	str	r2, [r3, #16]
 800ba30:	e003      	b.n	800ba3a <USB_CoreInit+0xee>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba32:	6918      	ldr	r0, [r3, #16]
 800ba34:	f010 0001 	ands.w	r0, r0, #1
 800ba38:	d0d4      	beq.n	800b9e4 <USB_CoreInit+0x98>
    count++;
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	3201      	adds	r2, #1
 800ba3e:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800ba40:	9a01      	ldr	r2, [sp, #4]
 800ba42:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800ba46:	d9f4      	bls.n	800ba32 <USB_CoreInit+0xe6>
 800ba48:	e7cb      	b.n	800b9e2 <USB_CoreInit+0x96>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba4a:	68c2      	ldr	r2, [r0, #12]
 800ba4c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800ba50:	60c2      	str	r2, [r0, #12]
 800ba52:	e798      	b.n	800b986 <USB_CoreInit+0x3a>

0800ba54 <USB_DisableGlobalInt>:
{
 800ba54:	4603      	mov	r3, r0
}
 800ba56:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba58:	689a      	ldr	r2, [r3, #8]
 800ba5a:	f022 0201 	bic.w	r2, r2, #1
 800ba5e:	609a      	str	r2, [r3, #8]
}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <USB_SetCurrentMode>:
{
 800ba64:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba66:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ba68:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 800ba6e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba70:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ba72:	d018      	beq.n	800baa6 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 800ba74:	b9a9      	cbnz	r1, 800baa2 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba76:	68c3      	ldr	r3, [r0, #12]
 800ba78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 800ba7c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba7e:	60c3      	str	r3, [r0, #12]
 800ba80:	e001      	b.n	800ba86 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba82:	2cc8      	cmp	r4, #200	@ 0xc8
 800ba84:	d00d      	beq.n	800baa2 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800ba86:	200a      	movs	r0, #10
 800ba88:	f7fd fad8 	bl	800903c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ba8c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba8e:	07db      	lsls	r3, r3, #31
      ms += 10U;
 800ba90:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba94:	d4f5      	bmi.n	800ba82 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba96:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 800ba9a:	fab0 f080 	clz	r0, r0
 800ba9e:	0940      	lsrs	r0, r0, #5
}
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800baa2:	2001      	movs	r0, #1
}
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800baa6:	68c3      	ldr	r3, [r0, #12]
 800baa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 800baac:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800baae:	60c3      	str	r3, [r0, #12]
 800bab0:	e001      	b.n	800bab6 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bab2:	2cc8      	cmp	r4, #200	@ 0xc8
 800bab4:	d0f5      	beq.n	800baa2 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800bab6:	200a      	movs	r0, #10
 800bab8:	f7fd fac0 	bl	800903c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800babc:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800babe:	07da      	lsls	r2, r3, #31
      ms += 10U;
 800bac0:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bac4:	d5f5      	bpl.n	800bab2 <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bac6:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 800baca:	fab0 f080 	clz	r0, r0
 800bace:	0940      	lsrs	r0, r0, #5
 800bad0:	e7e6      	b.n	800baa0 <USB_SetCurrentMode+0x3c>
 800bad2:	bf00      	nop

0800bad4 <USB_FlushTxFifo>:
{
 800bad4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	e002      	b.n	800bae2 <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800badc:	6903      	ldr	r3, [r0, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	db09      	blt.n	800baf6 <USB_FlushTxFifo+0x22>
    count++;
 800bae2:	9b01      	ldr	r3, [sp, #4]
 800bae4:	3301      	adds	r3, #1
 800bae6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800baee:	d9f5      	bls.n	800badc <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 800baf0:	2003      	movs	r0, #3
}
 800baf2:	b002      	add	sp, #8
 800baf4:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800baf6:	0189      	lsls	r1, r1, #6
  count = 0U;
 800baf8:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bafa:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800bafe:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb00:	6101      	str	r1, [r0, #16]
 800bb02:	e003      	b.n	800bb0c <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb04:	6903      	ldr	r3, [r0, #16]
 800bb06:	f013 0320 	ands.w	r3, r3, #32
 800bb0a:	d007      	beq.n	800bb1c <USB_FlushTxFifo+0x48>
    count++;
 800bb0c:	9b01      	ldr	r3, [sp, #4]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb18:	d9f4      	bls.n	800bb04 <USB_FlushTxFifo+0x30>
 800bb1a:	e7e9      	b.n	800baf0 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 800bb1c:	4618      	mov	r0, r3
}
 800bb1e:	b002      	add	sp, #8
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop

0800bb24 <USB_FlushRxFifo>:
{
 800bb24:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	e002      	b.n	800bb32 <USB_FlushRxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb2c:	6903      	ldr	r3, [r0, #16]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	db09      	blt.n	800bb46 <USB_FlushRxFifo+0x22>
    count++;
 800bb32:	9b01      	ldr	r3, [sp, #4]
 800bb34:	3301      	adds	r3, #1
 800bb36:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb3e:	d9f5      	bls.n	800bb2c <USB_FlushRxFifo+0x8>
      return HAL_TIMEOUT;
 800bb40:	2003      	movs	r0, #3
}
 800bb42:	b002      	add	sp, #8
 800bb44:	4770      	bx	lr
  count = 0U;
 800bb46:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb48:	2310      	movs	r3, #16
  count = 0U;
 800bb4a:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb4c:	6103      	str	r3, [r0, #16]
 800bb4e:	e003      	b.n	800bb58 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb50:	6903      	ldr	r3, [r0, #16]
 800bb52:	f013 0310 	ands.w	r3, r3, #16
 800bb56:	d007      	beq.n	800bb68 <USB_FlushRxFifo+0x44>
    count++;
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb64:	d9f4      	bls.n	800bb50 <USB_FlushRxFifo+0x2c>
 800bb66:	e7eb      	b.n	800bb40 <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 800bb68:	4618      	mov	r0, r3
}
 800bb6a:	b002      	add	sp, #8
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop

0800bb70 <USB_ReadPacket>:
{
 800bb70:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 800bb72:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 800bb76:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800bb78:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800bb7c:	d01c      	beq.n	800bbb8 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bb7e:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 800bb82:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800bb84:	2300      	movs	r3, #0
 800bb86:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb88:	6822      	ldr	r2, [r4, #0]
 800bb8a:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800bb8e:	459e      	cmp	lr, r3
 800bb90:	d1f9      	bne.n	800bb86 <USB_ReadPacket+0x16>
    pDest++;
 800bb92:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 800bb96:	b176      	cbz	r6, 800bbb6 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bb98:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
    } while (remaining_bytes != 0U);
 800bb9c:	2e01      	cmp	r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bb9e:	682b      	ldr	r3, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bba0:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 800bba2:	d007      	beq.n	800bbb4 <USB_ReadPacket+0x44>
 800bba4:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bba6:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800bbaa:	bf18      	it	ne
 800bbac:	0c1b      	lsrne	r3, r3, #16
 800bbae:	7042      	strb	r2, [r0, #1]
 800bbb0:	bf18      	it	ne
 800bbb2:	7083      	strbne	r3, [r0, #2]
      pDest++;
 800bbb4:	4430      	add	r0, r6
}
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800bbb8:	4608      	mov	r0, r1
 800bbba:	e7ec      	b.n	800bb96 <USB_ReadPacket+0x26>

0800bbbc <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800bbbc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800bbbe:	6980      	ldr	r0, [r0, #24]
}
 800bbc0:	4010      	ands	r0, r2
 800bbc2:	4770      	bx	lr

0800bbc4 <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 800bbc4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800bbc8:	f500 63a0 	add.w	r3, r0, #1280	@ 0x500
 800bbcc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bbd0:	68db      	ldr	r3, [r3, #12]
}
 800bbd2:	4018      	ands	r0, r3
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800bbd8:	6940      	ldr	r0, [r0, #20]
}
 800bbda:	f000 0001 	and.w	r0, r0, #1
 800bbde:	4770      	bx	lr

0800bbe0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	b430      	push	{r4, r5}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	4684      	mov	ip, r0
 800bbe8:	a805      	add	r0, sp, #20
 800bbea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f8cc 3e00 	str.w	r3, [ip, #3584]	@ 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bbf4:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800bbf8:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800bbfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc00:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bc04:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800bc08:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800bc0c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bc10:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800bc14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc18:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800bc1c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800bc20:	065a      	lsls	r2, r3, #25
 800bc22:	d45c      	bmi.n	800bcde <USB_HostInit+0xfe>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bc24:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800bc28:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bc2a:	f8dc 3400 	ldr.w	r3, [ip, #1024]	@ 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 800bc2e:	f000 808b 	beq.w	800bd48 <USB_HostInit+0x168>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bc32:	f023 0304 	bic.w	r3, r3, #4
 800bc36:	f8cc 3400 	str.w	r3, [ip, #1024]	@ 0x400
  __IO uint32_t count = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	e003      	b.n	800bc48 <USB_HostInit+0x68>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc40:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	db60      	blt.n	800bd0a <USB_HostInit+0x12a>
    count++;
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	9300      	str	r3, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800bc4e:	9b00      	ldr	r3, [sp, #0]
 800bc50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc54:	d9f4      	bls.n	800bc40 <USB_HostInit+0x60>
 800bc56:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	e003      	b.n	800bc66 <USB_HostInit+0x86>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc5e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	db3e      	blt.n	800bce4 <USB_HostInit+0x104>
    count++;
 800bc66:	9b01      	ldr	r3, [sp, #4]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800bc6c:	9b01      	ldr	r3, [sp, #4]
 800bc6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc72:	d9f4      	bls.n	800bc5e <USB_HostInit+0x7e>
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
  {
    ret = HAL_ERROR;
 800bc74:	2001      	movs	r0, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bc76:	b161      	cbz	r1, 800bc92 <USB_HostInit+0xb2>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f50c 63a0 	add.w	r3, ip, #1280	@ 0x500
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800bc7e:	f04f 35ff 	mov.w	r5, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800bc82:	4614      	mov	r4, r2
  for (i = 0U; i < cfg.Host_channels; i++)
 800bc84:	3201      	adds	r2, #1
 800bc86:	4291      	cmp	r1, r2
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800bc88:	609d      	str	r5, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bc8a:	60dc      	str	r4, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bc8c:	f103 0320 	add.w	r3, r3, #32
 800bc90:	d1f8      	bne.n	800bc84 <USB_HostInit+0xa4>
  USBx->GINTMSK = 0U;

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800bc92:	4b30      	ldr	r3, [pc, #192]	@ (800bd54 <USB_HostInit+0x174>)
  USBx->GINTMSK = 0U;
 800bc94:	2100      	movs	r1, #0
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
  if (USBx == USB_OTG_HS)
 800bc9a:	459c      	cmp	ip, r3
  USBx->GINTMSK = 0U;
 800bc9c:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bca0:	f8cc 2014 	str.w	r2, [ip, #20]
  if (USBx == USB_OTG_HS)
 800bca4:	d045      	beq.n	800bd32 <USB_HostInit+0x152>
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bca6:	4a2c      	ldr	r2, [pc, #176]	@ (800bd58 <USB_HostInit+0x178>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bca8:	4b2c      	ldr	r3, [pc, #176]	@ (800bd5c <USB_HostInit+0x17c>)
    USBx->GRXFSIZ  = 0x80U;
 800bcaa:	2180      	movs	r1, #128	@ 0x80
 800bcac:	f8cc 1024 	str.w	r1, [ip, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bcb0:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bcb4:	f8cc 3100 	str.w	r3, [ip, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bcb8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800bcbc:	b92b      	cbnz	r3, 800bcca <USB_HostInit+0xea>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcbe:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800bcc2:	f043 0310 	orr.w	r3, r3, #16
 800bcc6:	f8cc 3018 	str.w	r3, [ip, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bcca:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800bcce:	4b24      	ldr	r3, [pc, #144]	@ (800bd60 <USB_HostInit+0x180>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	f8cc 3018 	str.w	r3, [ip, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 800bcd6:	b002      	add	sp, #8
 800bcd8:	bc30      	pop	{r4, r5}
 800bcda:	b004      	add	sp, #16
 800bcdc:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bcde:	f8dc 3400 	ldr.w	r3, [ip, #1024]	@ 0x400
 800bce2:	e7a6      	b.n	800bc32 <USB_HostInit+0x52>
  count = 0U;
 800bce4:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bce6:	2310      	movs	r3, #16
  count = 0U;
 800bce8:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcea:	f8cc 3010 	str.w	r3, [ip, #16]
 800bcee:	e003      	b.n	800bcf8 <USB_HostInit+0x118>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bcf0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800bcf4:	06db      	lsls	r3, r3, #27
 800bcf6:	d5be      	bpl.n	800bc76 <USB_HostInit+0x96>
    count++;
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd04:	d9f4      	bls.n	800bcf0 <USB_HostInit+0x110>
    ret = HAL_ERROR;
 800bd06:	2001      	movs	r0, #1
 800bd08:	e7b5      	b.n	800bc76 <USB_HostInit+0x96>
  count = 0U;
 800bd0a:	2200      	movs	r2, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd0c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
  count = 0U;
 800bd10:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd12:	f8cc 3010 	str.w	r3, [ip, #16]
 800bd16:	e004      	b.n	800bd22 <USB_HostInit+0x142>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd18:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800bd1c:	f010 0020 	ands.w	r0, r0, #32
 800bd20:	d09a      	beq.n	800bc58 <USB_HostInit+0x78>
    count++;
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	3301      	adds	r3, #1
 800bd26:	9300      	str	r3, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800bd28:	9b00      	ldr	r3, [sp, #0]
 800bd2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd2e:	d9f3      	bls.n	800bd18 <USB_HostInit+0x138>
 800bd30:	e791      	b.n	800bc56 <USB_HostInit+0x76>
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bd32:	4a0c      	ldr	r2, [pc, #48]	@ (800bd64 <USB_HostInit+0x184>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bd34:	4b0c      	ldr	r3, [pc, #48]	@ (800bd68 <USB_HostInit+0x188>)
    USBx->GRXFSIZ  = 0x200U;
 800bd36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd3a:	f8cc 1024 	str.w	r1, [ip, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bd3e:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bd42:	f8cc 3100 	str.w	r3, [ip, #256]	@ 0x100
 800bd46:	e7b7      	b.n	800bcb8 <USB_HostInit+0xd8>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bd48:	f043 0304 	orr.w	r3, r3, #4
 800bd4c:	f8cc 3400 	str.w	r3, [ip, #1024]	@ 0x400
 800bd50:	e773      	b.n	800bc3a <USB_HostInit+0x5a>
 800bd52:	bf00      	nop
 800bd54:	40040000 	.word	0x40040000
 800bd58:	00600080 	.word	0x00600080
 800bd5c:	004000e0 	.word	0x004000e0
 800bd60:	a3200008 	.word	0xa3200008
 800bd64:	01000200 	.word	0x01000200
 800bd68:	00e00300 	.word	0x00e00300

0800bd6c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bd6c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 800bd70:	f023 0303 	bic.w	r3, r3, #3
 800bd74:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bd78:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 800bd7c:	f001 0303 	and.w	r3, r1, #3
 800bd80:	4313      	orrs	r3, r2

  if (freq == HCFG_48_MHZ)
 800bd82:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bd84:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bd88:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  if (freq == HCFG_48_MHZ)
 800bd8c:	d008      	beq.n	800bda0 <USB_InitFSLSPClkSel+0x34>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
  }
  else if (freq == HCFG_6_MHZ)
 800bd8e:	2902      	cmp	r1, #2
 800bd90:	d104      	bne.n	800bd9c <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800bd92:	f241 7370 	movw	r3, #6000	@ 0x1770
 800bd96:	6043      	str	r3, [r0, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bd98:	2000      	movs	r0, #0
 800bd9a:	4770      	bx	lr
    return HAL_ERROR;
 800bd9c:	2001      	movs	r0, #1
}
 800bd9e:	4770      	bx	lr
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800bda0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800bda4:	6043      	str	r3, [r0, #4]
  return HAL_OK;
 800bda6:	2000      	movs	r0, #0
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop

0800bdac <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bdac:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800bdb0:	6940      	ldr	r0, [r0, #20]
}
 800bdb2:	b280      	uxth	r0, r0
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop

0800bdb8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bdb8:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bdba:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 800bdbe:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800bdc0:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bdc2:	f501 62a0 	add.w	r2, r1, #1280	@ 0x500
  __IO uint32_t count = 0U;
 800bdc6:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bdc8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bdcc:	f8d1 6500 	ldr.w	r6, [r1, #1280]	@ 0x500
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800bdd0:	6855      	ldr	r5, [r2, #4]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bdd2:	6884      	ldr	r4, [r0, #8]
 800bdd4:	06a4      	lsls	r4, r4, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bdd6:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bdda:	d518      	bpl.n	800be0e <USB_HC_Halt+0x56>
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	db16      	blt.n	800be0e <USB_HC_Halt+0x56>
 800bde0:	2e00      	cmp	r6, #0
 800bde2:	da10      	bge.n	800be06 <USB_HC_Halt+0x4e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800bde4:	07dd      	lsls	r5, r3, #31
 800bde6:	d40e      	bmi.n	800be06 <USB_HC_Halt+0x4e>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bde8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800bdec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bdf0:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bdf4:	6883      	ldr	r3, [r0, #8]
 800bdf6:	069b      	lsls	r3, r3, #26
 800bdf8:	d52e      	bpl.n	800be58 <USB_HC_Halt+0xa0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bdfa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800bdfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be02:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800be06:	2000      	movs	r0, #0
 800be08:	b003      	add	sp, #12
 800be0a:	bc70      	pop	{r4, r5, r6}
 800be0c:	4770      	bx	lr
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800be0e:	07dc      	lsls	r4, r3, #31
 800be10:	d5ea      	bpl.n	800bde8 <USB_HC_Halt+0x30>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800be12:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800be16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be1a:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800be1e:	f8d0 3410 	ldr.w	r3, [r0, #1040]	@ 0x410
 800be22:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800be26:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800be2a:	d131      	bne.n	800be90 <USB_HC_Halt+0xd8>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800be2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be30:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800be34:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800be38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be3c:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 800be40:	e002      	b.n	800be48 <USB_HC_Halt+0x90>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800be42:	6813      	ldr	r3, [r2, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	dade      	bge.n	800be06 <USB_HC_Halt+0x4e>
        count++;
 800be48:	9b01      	ldr	r3, [sp, #4]
 800be4a:	3301      	adds	r3, #1
 800be4c:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be54:	d9f5      	bls.n	800be42 <USB_HC_Halt+0x8a>
 800be56:	e7d6      	b.n	800be06 <USB_HC_Halt+0x4e>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800be58:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800be5a:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800be5e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800be62:	d115      	bne.n	800be90 <USB_HC_Halt+0xd8>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800be64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be68:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800be6c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800be70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be74:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 800be78:	e002      	b.n	800be80 <USB_HC_Halt+0xc8>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800be7a:	6813      	ldr	r3, [r2, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	dac2      	bge.n	800be06 <USB_HC_Halt+0x4e>
          count++;
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	3301      	adds	r3, #1
 800be84:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be8c:	d9f5      	bls.n	800be7a <USB_HC_Halt+0xc2>
 800be8e:	e7ba      	b.n	800be06 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800be90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
}
 800be94:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800be96:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
}
 800be9a:	b003      	add	sp, #12
 800be9c:	bc70      	pop	{r4, r5, r6}
 800be9e:	4770      	bx	lr

0800bea0 <exit>:
 800bea0:	b508      	push	{r3, lr}
 800bea2:	4b06      	ldr	r3, [pc, #24]	@ (800bebc <exit+0x1c>)
 800bea4:	4604      	mov	r4, r0
 800bea6:	b113      	cbz	r3, 800beae <exit+0xe>
 800bea8:	2100      	movs	r1, #0
 800beaa:	f3af 8000 	nop.w
 800beae:	4b04      	ldr	r3, [pc, #16]	@ (800bec0 <exit+0x20>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <exit+0x16>
 800beb4:	4798      	blx	r3
 800beb6:	4620      	mov	r0, r4
 800beb8:	f7fc faee 	bl	8008498 <_exit>
 800bebc:	00000000 	.word	0x00000000
 800bec0:	20000c74 	.word	0x20000c74

0800bec4 <malloc>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	@ (800bed0 <malloc+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f000 b82d 	b.w	800bf28 <_malloc_r>
 800bece:	bf00      	nop
 800bed0:	20000018 	.word	0x20000018

0800bed4 <free>:
 800bed4:	4b02      	ldr	r3, [pc, #8]	@ (800bee0 <free+0xc>)
 800bed6:	4601      	mov	r1, r0
 800bed8:	6818      	ldr	r0, [r3, #0]
 800beda:	f000 bb67 	b.w	800c5ac <_free_r>
 800bede:	bf00      	nop
 800bee0:	20000018 	.word	0x20000018

0800bee4 <sbrk_aligned>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	4e0f      	ldr	r6, [pc, #60]	@ (800bf24 <sbrk_aligned+0x40>)
 800bee8:	460c      	mov	r4, r1
 800beea:	6831      	ldr	r1, [r6, #0]
 800beec:	4605      	mov	r5, r0
 800beee:	b911      	cbnz	r1, 800bef6 <sbrk_aligned+0x12>
 800bef0:	f000 fafe 	bl	800c4f0 <_sbrk_r>
 800bef4:	6030      	str	r0, [r6, #0]
 800bef6:	4621      	mov	r1, r4
 800bef8:	4628      	mov	r0, r5
 800befa:	f000 faf9 	bl	800c4f0 <_sbrk_r>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d103      	bne.n	800bf0a <sbrk_aligned+0x26>
 800bf02:	f04f 34ff 	mov.w	r4, #4294967295
 800bf06:	4620      	mov	r0, r4
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	1cc4      	adds	r4, r0, #3
 800bf0c:	f024 0403 	bic.w	r4, r4, #3
 800bf10:	42a0      	cmp	r0, r4
 800bf12:	d0f8      	beq.n	800bf06 <sbrk_aligned+0x22>
 800bf14:	1a21      	subs	r1, r4, r0
 800bf16:	4628      	mov	r0, r5
 800bf18:	f000 faea 	bl	800c4f0 <_sbrk_r>
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d1f2      	bne.n	800bf06 <sbrk_aligned+0x22>
 800bf20:	e7ef      	b.n	800bf02 <sbrk_aligned+0x1e>
 800bf22:	bf00      	nop
 800bf24:	20000b34 	.word	0x20000b34

0800bf28 <_malloc_r>:
 800bf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	1ccd      	adds	r5, r1, #3
 800bf2e:	f025 0503 	bic.w	r5, r5, #3
 800bf32:	3508      	adds	r5, #8
 800bf34:	2d0c      	cmp	r5, #12
 800bf36:	bf38      	it	cc
 800bf38:	250c      	movcc	r5, #12
 800bf3a:	2d00      	cmp	r5, #0
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	db01      	blt.n	800bf44 <_malloc_r+0x1c>
 800bf40:	42a9      	cmp	r1, r5
 800bf42:	d904      	bls.n	800bf4e <_malloc_r+0x26>
 800bf44:	230c      	movs	r3, #12
 800bf46:	6033      	str	r3, [r6, #0]
 800bf48:	2000      	movs	r0, #0
 800bf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c024 <_malloc_r+0xfc>
 800bf52:	f000 f869 	bl	800c028 <__malloc_lock>
 800bf56:	f8d8 3000 	ldr.w	r3, [r8]
 800bf5a:	461c      	mov	r4, r3
 800bf5c:	bb44      	cbnz	r4, 800bfb0 <_malloc_r+0x88>
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7ff ffbf 	bl	800bee4 <sbrk_aligned>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	4604      	mov	r4, r0
 800bf6a:	d158      	bne.n	800c01e <_malloc_r+0xf6>
 800bf6c:	f8d8 4000 	ldr.w	r4, [r8]
 800bf70:	4627      	mov	r7, r4
 800bf72:	2f00      	cmp	r7, #0
 800bf74:	d143      	bne.n	800bffe <_malloc_r+0xd6>
 800bf76:	2c00      	cmp	r4, #0
 800bf78:	d04b      	beq.n	800c012 <_malloc_r+0xea>
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	4630      	mov	r0, r6
 800bf80:	eb04 0903 	add.w	r9, r4, r3
 800bf84:	f000 fab4 	bl	800c4f0 <_sbrk_r>
 800bf88:	4581      	cmp	r9, r0
 800bf8a:	d142      	bne.n	800c012 <_malloc_r+0xea>
 800bf8c:	6821      	ldr	r1, [r4, #0]
 800bf8e:	1a6d      	subs	r5, r5, r1
 800bf90:	4629      	mov	r1, r5
 800bf92:	4630      	mov	r0, r6
 800bf94:	f7ff ffa6 	bl	800bee4 <sbrk_aligned>
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d03a      	beq.n	800c012 <_malloc_r+0xea>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	442b      	add	r3, r5
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	f8d8 3000 	ldr.w	r3, [r8]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	bb62      	cbnz	r2, 800c004 <_malloc_r+0xdc>
 800bfaa:	f8c8 7000 	str.w	r7, [r8]
 800bfae:	e00f      	b.n	800bfd0 <_malloc_r+0xa8>
 800bfb0:	6822      	ldr	r2, [r4, #0]
 800bfb2:	1b52      	subs	r2, r2, r5
 800bfb4:	d420      	bmi.n	800bff8 <_malloc_r+0xd0>
 800bfb6:	2a0b      	cmp	r2, #11
 800bfb8:	d917      	bls.n	800bfea <_malloc_r+0xc2>
 800bfba:	1961      	adds	r1, r4, r5
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	6025      	str	r5, [r4, #0]
 800bfc0:	bf18      	it	ne
 800bfc2:	6059      	strne	r1, [r3, #4]
 800bfc4:	6863      	ldr	r3, [r4, #4]
 800bfc6:	bf08      	it	eq
 800bfc8:	f8c8 1000 	streq.w	r1, [r8]
 800bfcc:	5162      	str	r2, [r4, r5]
 800bfce:	604b      	str	r3, [r1, #4]
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f000 f82f 	bl	800c034 <__malloc_unlock>
 800bfd6:	f104 000b 	add.w	r0, r4, #11
 800bfda:	1d23      	adds	r3, r4, #4
 800bfdc:	f020 0007 	bic.w	r0, r0, #7
 800bfe0:	1ac2      	subs	r2, r0, r3
 800bfe2:	bf1c      	itt	ne
 800bfe4:	1a1b      	subne	r3, r3, r0
 800bfe6:	50a3      	strne	r3, [r4, r2]
 800bfe8:	e7af      	b.n	800bf4a <_malloc_r+0x22>
 800bfea:	6862      	ldr	r2, [r4, #4]
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	bf0c      	ite	eq
 800bff0:	f8c8 2000 	streq.w	r2, [r8]
 800bff4:	605a      	strne	r2, [r3, #4]
 800bff6:	e7eb      	b.n	800bfd0 <_malloc_r+0xa8>
 800bff8:	4623      	mov	r3, r4
 800bffa:	6864      	ldr	r4, [r4, #4]
 800bffc:	e7ae      	b.n	800bf5c <_malloc_r+0x34>
 800bffe:	463c      	mov	r4, r7
 800c000:	687f      	ldr	r7, [r7, #4]
 800c002:	e7b6      	b.n	800bf72 <_malloc_r+0x4a>
 800c004:	461a      	mov	r2, r3
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d1fb      	bne.n	800c004 <_malloc_r+0xdc>
 800c00c:	2300      	movs	r3, #0
 800c00e:	6053      	str	r3, [r2, #4]
 800c010:	e7de      	b.n	800bfd0 <_malloc_r+0xa8>
 800c012:	230c      	movs	r3, #12
 800c014:	6033      	str	r3, [r6, #0]
 800c016:	4630      	mov	r0, r6
 800c018:	f000 f80c 	bl	800c034 <__malloc_unlock>
 800c01c:	e794      	b.n	800bf48 <_malloc_r+0x20>
 800c01e:	6005      	str	r5, [r0, #0]
 800c020:	e7d6      	b.n	800bfd0 <_malloc_r+0xa8>
 800c022:	bf00      	nop
 800c024:	20000b38 	.word	0x20000b38

0800c028 <__malloc_lock>:
 800c028:	4801      	ldr	r0, [pc, #4]	@ (800c030 <__malloc_lock+0x8>)
 800c02a:	f000 baae 	b.w	800c58a <__retarget_lock_acquire_recursive>
 800c02e:	bf00      	nop
 800c030:	20000c7c 	.word	0x20000c7c

0800c034 <__malloc_unlock>:
 800c034:	4801      	ldr	r0, [pc, #4]	@ (800c03c <__malloc_unlock+0x8>)
 800c036:	f000 baa9 	b.w	800c58c <__retarget_lock_release_recursive>
 800c03a:	bf00      	nop
 800c03c:	20000c7c 	.word	0x20000c7c

0800c040 <std>:
 800c040:	2300      	movs	r3, #0
 800c042:	b510      	push	{r4, lr}
 800c044:	4604      	mov	r4, r0
 800c046:	e9c0 3300 	strd	r3, r3, [r0]
 800c04a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c04e:	6083      	str	r3, [r0, #8]
 800c050:	8181      	strh	r1, [r0, #12]
 800c052:	6643      	str	r3, [r0, #100]	@ 0x64
 800c054:	81c2      	strh	r2, [r0, #14]
 800c056:	6183      	str	r3, [r0, #24]
 800c058:	4619      	mov	r1, r3
 800c05a:	2208      	movs	r2, #8
 800c05c:	305c      	adds	r0, #92	@ 0x5c
 800c05e:	f000 fa0b 	bl	800c478 <memset>
 800c062:	4b0d      	ldr	r3, [pc, #52]	@ (800c098 <std+0x58>)
 800c064:	6263      	str	r3, [r4, #36]	@ 0x24
 800c066:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <std+0x5c>)
 800c068:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c06a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a0 <std+0x60>)
 800c06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c06e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <std+0x64>)
 800c070:	6323      	str	r3, [r4, #48]	@ 0x30
 800c072:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a8 <std+0x68>)
 800c074:	6224      	str	r4, [r4, #32]
 800c076:	429c      	cmp	r4, r3
 800c078:	d006      	beq.n	800c088 <std+0x48>
 800c07a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c07e:	4294      	cmp	r4, r2
 800c080:	d002      	beq.n	800c088 <std+0x48>
 800c082:	33d0      	adds	r3, #208	@ 0xd0
 800c084:	429c      	cmp	r4, r3
 800c086:	d105      	bne.n	800c094 <std+0x54>
 800c088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c090:	f000 ba7a 	b.w	800c588 <__retarget_lock_init_recursive>
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	0800c2c9 	.word	0x0800c2c9
 800c09c:	0800c2eb 	.word	0x0800c2eb
 800c0a0:	0800c323 	.word	0x0800c323
 800c0a4:	0800c347 	.word	0x0800c347
 800c0a8:	20000b3c 	.word	0x20000b3c

0800c0ac <stdio_exit_handler>:
 800c0ac:	4a02      	ldr	r2, [pc, #8]	@ (800c0b8 <stdio_exit_handler+0xc>)
 800c0ae:	4903      	ldr	r1, [pc, #12]	@ (800c0bc <stdio_exit_handler+0x10>)
 800c0b0:	4803      	ldr	r0, [pc, #12]	@ (800c0c0 <stdio_exit_handler+0x14>)
 800c0b2:	f000 b87b 	b.w	800c1ac <_fwalk_sglue>
 800c0b6:	bf00      	nop
 800c0b8:	2000000c 	.word	0x2000000c
 800c0bc:	0800cce9 	.word	0x0800cce9
 800c0c0:	2000001c 	.word	0x2000001c

0800c0c4 <cleanup_stdio>:
 800c0c4:	6841      	ldr	r1, [r0, #4]
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c0f8 <cleanup_stdio+0x34>)
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	b510      	push	{r4, lr}
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	d001      	beq.n	800c0d4 <cleanup_stdio+0x10>
 800c0d0:	f000 fe0a 	bl	800cce8 <_fflush_r>
 800c0d4:	68a1      	ldr	r1, [r4, #8]
 800c0d6:	4b09      	ldr	r3, [pc, #36]	@ (800c0fc <cleanup_stdio+0x38>)
 800c0d8:	4299      	cmp	r1, r3
 800c0da:	d002      	beq.n	800c0e2 <cleanup_stdio+0x1e>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f000 fe03 	bl	800cce8 <_fflush_r>
 800c0e2:	68e1      	ldr	r1, [r4, #12]
 800c0e4:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <cleanup_stdio+0x3c>)
 800c0e6:	4299      	cmp	r1, r3
 800c0e8:	d004      	beq.n	800c0f4 <cleanup_stdio+0x30>
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f0:	f000 bdfa 	b.w	800cce8 <_fflush_r>
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000b3c 	.word	0x20000b3c
 800c0fc:	20000ba4 	.word	0x20000ba4
 800c100:	20000c0c 	.word	0x20000c0c

0800c104 <global_stdio_init.part.0>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4b0b      	ldr	r3, [pc, #44]	@ (800c134 <global_stdio_init.part.0+0x30>)
 800c108:	4c0b      	ldr	r4, [pc, #44]	@ (800c138 <global_stdio_init.part.0+0x34>)
 800c10a:	4a0c      	ldr	r2, [pc, #48]	@ (800c13c <global_stdio_init.part.0+0x38>)
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	4620      	mov	r0, r4
 800c110:	2200      	movs	r2, #0
 800c112:	2104      	movs	r1, #4
 800c114:	f7ff ff94 	bl	800c040 <std>
 800c118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c11c:	2201      	movs	r2, #1
 800c11e:	2109      	movs	r1, #9
 800c120:	f7ff ff8e 	bl	800c040 <std>
 800c124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c128:	2202      	movs	r2, #2
 800c12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c12e:	2112      	movs	r1, #18
 800c130:	f7ff bf86 	b.w	800c040 <std>
 800c134:	20000c74 	.word	0x20000c74
 800c138:	20000b3c 	.word	0x20000b3c
 800c13c:	0800c0ad 	.word	0x0800c0ad

0800c140 <__sfp_lock_acquire>:
 800c140:	4801      	ldr	r0, [pc, #4]	@ (800c148 <__sfp_lock_acquire+0x8>)
 800c142:	f000 ba22 	b.w	800c58a <__retarget_lock_acquire_recursive>
 800c146:	bf00      	nop
 800c148:	20000c7d 	.word	0x20000c7d

0800c14c <__sfp_lock_release>:
 800c14c:	4801      	ldr	r0, [pc, #4]	@ (800c154 <__sfp_lock_release+0x8>)
 800c14e:	f000 ba1d 	b.w	800c58c <__retarget_lock_release_recursive>
 800c152:	bf00      	nop
 800c154:	20000c7d 	.word	0x20000c7d

0800c158 <__sinit>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	4604      	mov	r4, r0
 800c15c:	f7ff fff0 	bl	800c140 <__sfp_lock_acquire>
 800c160:	6a23      	ldr	r3, [r4, #32]
 800c162:	b11b      	cbz	r3, 800c16c <__sinit+0x14>
 800c164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c168:	f7ff bff0 	b.w	800c14c <__sfp_lock_release>
 800c16c:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <__sinit+0x28>)
 800c16e:	6223      	str	r3, [r4, #32]
 800c170:	4b04      	ldr	r3, [pc, #16]	@ (800c184 <__sinit+0x2c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f5      	bne.n	800c164 <__sinit+0xc>
 800c178:	f7ff ffc4 	bl	800c104 <global_stdio_init.part.0>
 800c17c:	e7f2      	b.n	800c164 <__sinit+0xc>
 800c17e:	bf00      	nop
 800c180:	0800c0c5 	.word	0x0800c0c5
 800c184:	20000c74 	.word	0x20000c74

0800c188 <fiprintf>:
 800c188:	b40e      	push	{r1, r2, r3}
 800c18a:	b503      	push	{r0, r1, lr}
 800c18c:	4601      	mov	r1, r0
 800c18e:	ab03      	add	r3, sp, #12
 800c190:	4805      	ldr	r0, [pc, #20]	@ (800c1a8 <fiprintf+0x20>)
 800c192:	f853 2b04 	ldr.w	r2, [r3], #4
 800c196:	6800      	ldr	r0, [r0, #0]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	f000 fa7b 	bl	800c694 <_vfiprintf_r>
 800c19e:	b002      	add	sp, #8
 800c1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1a4:	b003      	add	sp, #12
 800c1a6:	4770      	bx	lr
 800c1a8:	20000018 	.word	0x20000018

0800c1ac <_fwalk_sglue>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	4688      	mov	r8, r1
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1bc:	f1b9 0901 	subs.w	r9, r9, #1
 800c1c0:	d505      	bpl.n	800c1ce <_fwalk_sglue+0x22>
 800c1c2:	6824      	ldr	r4, [r4, #0]
 800c1c4:	2c00      	cmp	r4, #0
 800c1c6:	d1f7      	bne.n	800c1b8 <_fwalk_sglue+0xc>
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ce:	89ab      	ldrh	r3, [r5, #12]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d907      	bls.n	800c1e4 <_fwalk_sglue+0x38>
 800c1d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	d003      	beq.n	800c1e4 <_fwalk_sglue+0x38>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4638      	mov	r0, r7
 800c1e0:	47c0      	blx	r8
 800c1e2:	4306      	orrs	r6, r0
 800c1e4:	3568      	adds	r5, #104	@ 0x68
 800c1e6:	e7e9      	b.n	800c1bc <_fwalk_sglue+0x10>

0800c1e8 <iprintf>:
 800c1e8:	b40f      	push	{r0, r1, r2, r3}
 800c1ea:	b507      	push	{r0, r1, r2, lr}
 800c1ec:	4906      	ldr	r1, [pc, #24]	@ (800c208 <iprintf+0x20>)
 800c1ee:	ab04      	add	r3, sp, #16
 800c1f0:	6808      	ldr	r0, [r1, #0]
 800c1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1f6:	6881      	ldr	r1, [r0, #8]
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	f000 fa4b 	bl	800c694 <_vfiprintf_r>
 800c1fe:	b003      	add	sp, #12
 800c200:	f85d eb04 	ldr.w	lr, [sp], #4
 800c204:	b004      	add	sp, #16
 800c206:	4770      	bx	lr
 800c208:	20000018 	.word	0x20000018

0800c20c <_puts_r>:
 800c20c:	6a03      	ldr	r3, [r0, #32]
 800c20e:	b570      	push	{r4, r5, r6, lr}
 800c210:	6884      	ldr	r4, [r0, #8]
 800c212:	4605      	mov	r5, r0
 800c214:	460e      	mov	r6, r1
 800c216:	b90b      	cbnz	r3, 800c21c <_puts_r+0x10>
 800c218:	f7ff ff9e 	bl	800c158 <__sinit>
 800c21c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c21e:	07db      	lsls	r3, r3, #31
 800c220:	d405      	bmi.n	800c22e <_puts_r+0x22>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	0598      	lsls	r0, r3, #22
 800c226:	d402      	bmi.n	800c22e <_puts_r+0x22>
 800c228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c22a:	f000 f9ae 	bl	800c58a <__retarget_lock_acquire_recursive>
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	0719      	lsls	r1, r3, #28
 800c232:	d502      	bpl.n	800c23a <_puts_r+0x2e>
 800c234:	6923      	ldr	r3, [r4, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d135      	bne.n	800c2a6 <_puts_r+0x9a>
 800c23a:	4621      	mov	r1, r4
 800c23c:	4628      	mov	r0, r5
 800c23e:	f000 f8c5 	bl	800c3cc <__swsetup_r>
 800c242:	b380      	cbz	r0, 800c2a6 <_puts_r+0x9a>
 800c244:	f04f 35ff 	mov.w	r5, #4294967295
 800c248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c24a:	07da      	lsls	r2, r3, #31
 800c24c:	d405      	bmi.n	800c25a <_puts_r+0x4e>
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	059b      	lsls	r3, r3, #22
 800c252:	d402      	bmi.n	800c25a <_puts_r+0x4e>
 800c254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c256:	f000 f999 	bl	800c58c <__retarget_lock_release_recursive>
 800c25a:	4628      	mov	r0, r5
 800c25c:	bd70      	pop	{r4, r5, r6, pc}
 800c25e:	2b00      	cmp	r3, #0
 800c260:	da04      	bge.n	800c26c <_puts_r+0x60>
 800c262:	69a2      	ldr	r2, [r4, #24]
 800c264:	429a      	cmp	r2, r3
 800c266:	dc17      	bgt.n	800c298 <_puts_r+0x8c>
 800c268:	290a      	cmp	r1, #10
 800c26a:	d015      	beq.n	800c298 <_puts_r+0x8c>
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	7019      	strb	r1, [r3, #0]
 800c274:	68a3      	ldr	r3, [r4, #8]
 800c276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c27a:	3b01      	subs	r3, #1
 800c27c:	60a3      	str	r3, [r4, #8]
 800c27e:	2900      	cmp	r1, #0
 800c280:	d1ed      	bne.n	800c25e <_puts_r+0x52>
 800c282:	2b00      	cmp	r3, #0
 800c284:	da11      	bge.n	800c2aa <_puts_r+0x9e>
 800c286:	4622      	mov	r2, r4
 800c288:	210a      	movs	r1, #10
 800c28a:	4628      	mov	r0, r5
 800c28c:	f000 f85f 	bl	800c34e <__swbuf_r>
 800c290:	3001      	adds	r0, #1
 800c292:	d0d7      	beq.n	800c244 <_puts_r+0x38>
 800c294:	250a      	movs	r5, #10
 800c296:	e7d7      	b.n	800c248 <_puts_r+0x3c>
 800c298:	4622      	mov	r2, r4
 800c29a:	4628      	mov	r0, r5
 800c29c:	f000 f857 	bl	800c34e <__swbuf_r>
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	d1e7      	bne.n	800c274 <_puts_r+0x68>
 800c2a4:	e7ce      	b.n	800c244 <_puts_r+0x38>
 800c2a6:	3e01      	subs	r6, #1
 800c2a8:	e7e4      	b.n	800c274 <_puts_r+0x68>
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	6022      	str	r2, [r4, #0]
 800c2b0:	220a      	movs	r2, #10
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e7ee      	b.n	800c294 <_puts_r+0x88>
	...

0800c2b8 <puts>:
 800c2b8:	4b02      	ldr	r3, [pc, #8]	@ (800c2c4 <puts+0xc>)
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	f7ff bfa5 	b.w	800c20c <_puts_r>
 800c2c2:	bf00      	nop
 800c2c4:	20000018 	.word	0x20000018

0800c2c8 <__sread>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d0:	f000 f8fc 	bl	800c4cc <_read_r>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	bfab      	itete	ge
 800c2d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2da:	89a3      	ldrhlt	r3, [r4, #12]
 800c2dc:	181b      	addge	r3, r3, r0
 800c2de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2e2:	bfac      	ite	ge
 800c2e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2e6:	81a3      	strhlt	r3, [r4, #12]
 800c2e8:	bd10      	pop	{r4, pc}

0800c2ea <__swrite>:
 800c2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ee:	461f      	mov	r7, r3
 800c2f0:	898b      	ldrh	r3, [r1, #12]
 800c2f2:	05db      	lsls	r3, r3, #23
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	4616      	mov	r6, r2
 800c2fa:	d505      	bpl.n	800c308 <__swrite+0x1e>
 800c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c300:	2302      	movs	r3, #2
 800c302:	2200      	movs	r2, #0
 800c304:	f000 f8d0 	bl	800c4a8 <_lseek_r>
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c30e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c312:	81a3      	strh	r3, [r4, #12]
 800c314:	4632      	mov	r2, r6
 800c316:	463b      	mov	r3, r7
 800c318:	4628      	mov	r0, r5
 800c31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	f000 b8f7 	b.w	800c510 <_write_r>

0800c322 <__sseek>:
 800c322:	b510      	push	{r4, lr}
 800c324:	460c      	mov	r4, r1
 800c326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32a:	f000 f8bd 	bl	800c4a8 <_lseek_r>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	bf15      	itete	ne
 800c334:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c33a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c33e:	81a3      	strheq	r3, [r4, #12]
 800c340:	bf18      	it	ne
 800c342:	81a3      	strhne	r3, [r4, #12]
 800c344:	bd10      	pop	{r4, pc}

0800c346 <__sclose>:
 800c346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34a:	f000 b89d 	b.w	800c488 <_close_r>

0800c34e <__swbuf_r>:
 800c34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c350:	460e      	mov	r6, r1
 800c352:	4614      	mov	r4, r2
 800c354:	4605      	mov	r5, r0
 800c356:	b118      	cbz	r0, 800c360 <__swbuf_r+0x12>
 800c358:	6a03      	ldr	r3, [r0, #32]
 800c35a:	b90b      	cbnz	r3, 800c360 <__swbuf_r+0x12>
 800c35c:	f7ff fefc 	bl	800c158 <__sinit>
 800c360:	69a3      	ldr	r3, [r4, #24]
 800c362:	60a3      	str	r3, [r4, #8]
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	071a      	lsls	r2, r3, #28
 800c368:	d501      	bpl.n	800c36e <__swbuf_r+0x20>
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	b943      	cbnz	r3, 800c380 <__swbuf_r+0x32>
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 f82b 	bl	800c3cc <__swsetup_r>
 800c376:	b118      	cbz	r0, 800c380 <__swbuf_r+0x32>
 800c378:	f04f 37ff 	mov.w	r7, #4294967295
 800c37c:	4638      	mov	r0, r7
 800c37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	6922      	ldr	r2, [r4, #16]
 800c384:	1a98      	subs	r0, r3, r2
 800c386:	6963      	ldr	r3, [r4, #20]
 800c388:	b2f6      	uxtb	r6, r6
 800c38a:	4283      	cmp	r3, r0
 800c38c:	4637      	mov	r7, r6
 800c38e:	dc05      	bgt.n	800c39c <__swbuf_r+0x4e>
 800c390:	4621      	mov	r1, r4
 800c392:	4628      	mov	r0, r5
 800c394:	f000 fca8 	bl	800cce8 <_fflush_r>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d1ed      	bne.n	800c378 <__swbuf_r+0x2a>
 800c39c:	68a3      	ldr	r3, [r4, #8]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	60a3      	str	r3, [r4, #8]
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	1c5a      	adds	r2, r3, #1
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	701e      	strb	r6, [r3, #0]
 800c3aa:	6962      	ldr	r2, [r4, #20]
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d004      	beq.n	800c3bc <__swbuf_r+0x6e>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	07db      	lsls	r3, r3, #31
 800c3b6:	d5e1      	bpl.n	800c37c <__swbuf_r+0x2e>
 800c3b8:	2e0a      	cmp	r6, #10
 800c3ba:	d1df      	bne.n	800c37c <__swbuf_r+0x2e>
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 fc92 	bl	800cce8 <_fflush_r>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d0d9      	beq.n	800c37c <__swbuf_r+0x2e>
 800c3c8:	e7d6      	b.n	800c378 <__swbuf_r+0x2a>
	...

0800c3cc <__swsetup_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4b29      	ldr	r3, [pc, #164]	@ (800c474 <__swsetup_r+0xa8>)
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	b118      	cbz	r0, 800c3e0 <__swsetup_r+0x14>
 800c3d8:	6a03      	ldr	r3, [r0, #32]
 800c3da:	b90b      	cbnz	r3, 800c3e0 <__swsetup_r+0x14>
 800c3dc:	f7ff febc 	bl	800c158 <__sinit>
 800c3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e4:	0719      	lsls	r1, r3, #28
 800c3e6:	d422      	bmi.n	800c42e <__swsetup_r+0x62>
 800c3e8:	06da      	lsls	r2, r3, #27
 800c3ea:	d407      	bmi.n	800c3fc <__swsetup_r+0x30>
 800c3ec:	2209      	movs	r2, #9
 800c3ee:	602a      	str	r2, [r5, #0]
 800c3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fa:	e033      	b.n	800c464 <__swsetup_r+0x98>
 800c3fc:	0758      	lsls	r0, r3, #29
 800c3fe:	d512      	bpl.n	800c426 <__swsetup_r+0x5a>
 800c400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c402:	b141      	cbz	r1, 800c416 <__swsetup_r+0x4a>
 800c404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c408:	4299      	cmp	r1, r3
 800c40a:	d002      	beq.n	800c412 <__swsetup_r+0x46>
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 f8cd 	bl	800c5ac <_free_r>
 800c412:	2300      	movs	r3, #0
 800c414:	6363      	str	r3, [r4, #52]	@ 0x34
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c41c:	81a3      	strh	r3, [r4, #12]
 800c41e:	2300      	movs	r3, #0
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f043 0308 	orr.w	r3, r3, #8
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	b94b      	cbnz	r3, 800c446 <__swsetup_r+0x7a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c43c:	d003      	beq.n	800c446 <__swsetup_r+0x7a>
 800c43e:	4621      	mov	r1, r4
 800c440:	4628      	mov	r0, r5
 800c442:	f000 fc9f 	bl	800cd84 <__smakebuf_r>
 800c446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44a:	f013 0201 	ands.w	r2, r3, #1
 800c44e:	d00a      	beq.n	800c466 <__swsetup_r+0x9a>
 800c450:	2200      	movs	r2, #0
 800c452:	60a2      	str	r2, [r4, #8]
 800c454:	6962      	ldr	r2, [r4, #20]
 800c456:	4252      	negs	r2, r2
 800c458:	61a2      	str	r2, [r4, #24]
 800c45a:	6922      	ldr	r2, [r4, #16]
 800c45c:	b942      	cbnz	r2, 800c470 <__swsetup_r+0xa4>
 800c45e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c462:	d1c5      	bne.n	800c3f0 <__swsetup_r+0x24>
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	0799      	lsls	r1, r3, #30
 800c468:	bf58      	it	pl
 800c46a:	6962      	ldrpl	r2, [r4, #20]
 800c46c:	60a2      	str	r2, [r4, #8]
 800c46e:	e7f4      	b.n	800c45a <__swsetup_r+0x8e>
 800c470:	2000      	movs	r0, #0
 800c472:	e7f7      	b.n	800c464 <__swsetup_r+0x98>
 800c474:	20000018 	.word	0x20000018

0800c478 <memset>:
 800c478:	4402      	add	r2, r0
 800c47a:	4603      	mov	r3, r0
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d100      	bne.n	800c482 <memset+0xa>
 800c480:	4770      	bx	lr
 800c482:	f803 1b01 	strb.w	r1, [r3], #1
 800c486:	e7f9      	b.n	800c47c <memset+0x4>

0800c488 <_close_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4d06      	ldr	r5, [pc, #24]	@ (800c4a4 <_close_r+0x1c>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	f7fc f822 	bl	80084dc <_close>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_close_r+0x1a>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_close_r+0x1a>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20000c78 	.word	0x20000c78

0800c4a8 <_lseek_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d07      	ldr	r5, [pc, #28]	@ (800c4c8 <_lseek_r+0x20>)
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4608      	mov	r0, r1
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f7fc f81c 	bl	80084f4 <_lseek>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_lseek_r+0x1e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_lseek_r+0x1e>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20000c78 	.word	0x20000c78

0800c4cc <_read_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	@ (800c4ec <_read_r+0x20>)
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	602a      	str	r2, [r5, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7fb ffe2 	bl	80084a4 <_read>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_read_r+0x1e>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_read_r+0x1e>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	20000c78 	.word	0x20000c78

0800c4f0 <_sbrk_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d06      	ldr	r5, [pc, #24]	@ (800c50c <_sbrk_r+0x1c>)
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	602b      	str	r3, [r5, #0]
 800c4fc:	f7fb fffc 	bl	80084f8 <_sbrk>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_sbrk_r+0x1a>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_sbrk_r+0x1a>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	20000c78 	.word	0x20000c78

0800c510 <_write_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d07      	ldr	r5, [pc, #28]	@ (800c530 <_write_r+0x20>)
 800c514:	4604      	mov	r4, r0
 800c516:	4608      	mov	r0, r1
 800c518:	4611      	mov	r1, r2
 800c51a:	2200      	movs	r2, #0
 800c51c:	602a      	str	r2, [r5, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	f7fb ffce 	bl	80084c0 <_write>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_write_r+0x1e>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_write_r+0x1e>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20000c78 	.word	0x20000c78

0800c534 <__errno>:
 800c534:	4b01      	ldr	r3, [pc, #4]	@ (800c53c <__errno+0x8>)
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20000018 	.word	0x20000018

0800c540 <__libc_init_array>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	4d0d      	ldr	r5, [pc, #52]	@ (800c578 <__libc_init_array+0x38>)
 800c544:	4c0d      	ldr	r4, [pc, #52]	@ (800c57c <__libc_init_array+0x3c>)
 800c546:	1b64      	subs	r4, r4, r5
 800c548:	10a4      	asrs	r4, r4, #2
 800c54a:	2600      	movs	r6, #0
 800c54c:	42a6      	cmp	r6, r4
 800c54e:	d109      	bne.n	800c564 <__libc_init_array+0x24>
 800c550:	4d0b      	ldr	r5, [pc, #44]	@ (800c580 <__libc_init_array+0x40>)
 800c552:	4c0c      	ldr	r4, [pc, #48]	@ (800c584 <__libc_init_array+0x44>)
 800c554:	f000 fc74 	bl	800ce40 <_init>
 800c558:	1b64      	subs	r4, r4, r5
 800c55a:	10a4      	asrs	r4, r4, #2
 800c55c:	2600      	movs	r6, #0
 800c55e:	42a6      	cmp	r6, r4
 800c560:	d105      	bne.n	800c56e <__libc_init_array+0x2e>
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f855 3b04 	ldr.w	r3, [r5], #4
 800c568:	4798      	blx	r3
 800c56a:	3601      	adds	r6, #1
 800c56c:	e7ee      	b.n	800c54c <__libc_init_array+0xc>
 800c56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c572:	4798      	blx	r3
 800c574:	3601      	adds	r6, #1
 800c576:	e7f2      	b.n	800c55e <__libc_init_array+0x1e>
 800c578:	0800d064 	.word	0x0800d064
 800c57c:	0800d064 	.word	0x0800d064
 800c580:	0800d064 	.word	0x0800d064
 800c584:	0800d068 	.word	0x0800d068

0800c588 <__retarget_lock_init_recursive>:
 800c588:	4770      	bx	lr

0800c58a <__retarget_lock_acquire_recursive>:
 800c58a:	4770      	bx	lr

0800c58c <__retarget_lock_release_recursive>:
 800c58c:	4770      	bx	lr

0800c58e <memcpy>:
 800c58e:	440a      	add	r2, r1
 800c590:	4291      	cmp	r1, r2
 800c592:	f100 33ff 	add.w	r3, r0, #4294967295
 800c596:	d100      	bne.n	800c59a <memcpy+0xc>
 800c598:	4770      	bx	lr
 800c59a:	b510      	push	{r4, lr}
 800c59c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5a4:	4291      	cmp	r1, r2
 800c5a6:	d1f9      	bne.n	800c59c <memcpy+0xe>
 800c5a8:	bd10      	pop	{r4, pc}
	...

0800c5ac <_free_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	d041      	beq.n	800c638 <_free_r+0x8c>
 800c5b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5b8:	1f0c      	subs	r4, r1, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	bfb8      	it	lt
 800c5be:	18e4      	addlt	r4, r4, r3
 800c5c0:	f7ff fd32 	bl	800c028 <__malloc_lock>
 800c5c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c63c <_free_r+0x90>)
 800c5c6:	6813      	ldr	r3, [r2, #0]
 800c5c8:	b933      	cbnz	r3, 800c5d8 <_free_r+0x2c>
 800c5ca:	6063      	str	r3, [r4, #4]
 800c5cc:	6014      	str	r4, [r2, #0]
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5d4:	f7ff bd2e 	b.w	800c034 <__malloc_unlock>
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d908      	bls.n	800c5ee <_free_r+0x42>
 800c5dc:	6820      	ldr	r0, [r4, #0]
 800c5de:	1821      	adds	r1, r4, r0
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	bf01      	itttt	eq
 800c5e4:	6819      	ldreq	r1, [r3, #0]
 800c5e6:	685b      	ldreq	r3, [r3, #4]
 800c5e8:	1809      	addeq	r1, r1, r0
 800c5ea:	6021      	streq	r1, [r4, #0]
 800c5ec:	e7ed      	b.n	800c5ca <_free_r+0x1e>
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	b10b      	cbz	r3, 800c5f8 <_free_r+0x4c>
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	d9fa      	bls.n	800c5ee <_free_r+0x42>
 800c5f8:	6811      	ldr	r1, [r2, #0]
 800c5fa:	1850      	adds	r0, r2, r1
 800c5fc:	42a0      	cmp	r0, r4
 800c5fe:	d10b      	bne.n	800c618 <_free_r+0x6c>
 800c600:	6820      	ldr	r0, [r4, #0]
 800c602:	4401      	add	r1, r0
 800c604:	1850      	adds	r0, r2, r1
 800c606:	4283      	cmp	r3, r0
 800c608:	6011      	str	r1, [r2, #0]
 800c60a:	d1e0      	bne.n	800c5ce <_free_r+0x22>
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	6053      	str	r3, [r2, #4]
 800c612:	4408      	add	r0, r1
 800c614:	6010      	str	r0, [r2, #0]
 800c616:	e7da      	b.n	800c5ce <_free_r+0x22>
 800c618:	d902      	bls.n	800c620 <_free_r+0x74>
 800c61a:	230c      	movs	r3, #12
 800c61c:	602b      	str	r3, [r5, #0]
 800c61e:	e7d6      	b.n	800c5ce <_free_r+0x22>
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	1821      	adds	r1, r4, r0
 800c624:	428b      	cmp	r3, r1
 800c626:	bf04      	itt	eq
 800c628:	6819      	ldreq	r1, [r3, #0]
 800c62a:	685b      	ldreq	r3, [r3, #4]
 800c62c:	6063      	str	r3, [r4, #4]
 800c62e:	bf04      	itt	eq
 800c630:	1809      	addeq	r1, r1, r0
 800c632:	6021      	streq	r1, [r4, #0]
 800c634:	6054      	str	r4, [r2, #4]
 800c636:	e7ca      	b.n	800c5ce <_free_r+0x22>
 800c638:	bd38      	pop	{r3, r4, r5, pc}
 800c63a:	bf00      	nop
 800c63c:	20000b38 	.word	0x20000b38

0800c640 <__sfputc_r>:
 800c640:	6893      	ldr	r3, [r2, #8]
 800c642:	3b01      	subs	r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	b410      	push	{r4}
 800c648:	6093      	str	r3, [r2, #8]
 800c64a:	da08      	bge.n	800c65e <__sfputc_r+0x1e>
 800c64c:	6994      	ldr	r4, [r2, #24]
 800c64e:	42a3      	cmp	r3, r4
 800c650:	db01      	blt.n	800c656 <__sfputc_r+0x16>
 800c652:	290a      	cmp	r1, #10
 800c654:	d103      	bne.n	800c65e <__sfputc_r+0x1e>
 800c656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c65a:	f7ff be78 	b.w	800c34e <__swbuf_r>
 800c65e:	6813      	ldr	r3, [r2, #0]
 800c660:	1c58      	adds	r0, r3, #1
 800c662:	6010      	str	r0, [r2, #0]
 800c664:	7019      	strb	r1, [r3, #0]
 800c666:	4608      	mov	r0, r1
 800c668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <__sfputs_r>:
 800c66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c670:	4606      	mov	r6, r0
 800c672:	460f      	mov	r7, r1
 800c674:	4614      	mov	r4, r2
 800c676:	18d5      	adds	r5, r2, r3
 800c678:	42ac      	cmp	r4, r5
 800c67a:	d101      	bne.n	800c680 <__sfputs_r+0x12>
 800c67c:	2000      	movs	r0, #0
 800c67e:	e007      	b.n	800c690 <__sfputs_r+0x22>
 800c680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c684:	463a      	mov	r2, r7
 800c686:	4630      	mov	r0, r6
 800c688:	f7ff ffda 	bl	800c640 <__sfputc_r>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d1f3      	bne.n	800c678 <__sfputs_r+0xa>
 800c690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c694 <_vfiprintf_r>:
 800c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	460d      	mov	r5, r1
 800c69a:	b09d      	sub	sp, #116	@ 0x74
 800c69c:	4614      	mov	r4, r2
 800c69e:	4698      	mov	r8, r3
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	b118      	cbz	r0, 800c6ac <_vfiprintf_r+0x18>
 800c6a4:	6a03      	ldr	r3, [r0, #32]
 800c6a6:	b90b      	cbnz	r3, 800c6ac <_vfiprintf_r+0x18>
 800c6a8:	f7ff fd56 	bl	800c158 <__sinit>
 800c6ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6ae:	07d9      	lsls	r1, r3, #31
 800c6b0:	d405      	bmi.n	800c6be <_vfiprintf_r+0x2a>
 800c6b2:	89ab      	ldrh	r3, [r5, #12]
 800c6b4:	059a      	lsls	r2, r3, #22
 800c6b6:	d402      	bmi.n	800c6be <_vfiprintf_r+0x2a>
 800c6b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6ba:	f7ff ff66 	bl	800c58a <__retarget_lock_acquire_recursive>
 800c6be:	89ab      	ldrh	r3, [r5, #12]
 800c6c0:	071b      	lsls	r3, r3, #28
 800c6c2:	d501      	bpl.n	800c6c8 <_vfiprintf_r+0x34>
 800c6c4:	692b      	ldr	r3, [r5, #16]
 800c6c6:	b99b      	cbnz	r3, 800c6f0 <_vfiprintf_r+0x5c>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7ff fe7e 	bl	800c3cc <__swsetup_r>
 800c6d0:	b170      	cbz	r0, 800c6f0 <_vfiprintf_r+0x5c>
 800c6d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6d4:	07dc      	lsls	r4, r3, #31
 800c6d6:	d504      	bpl.n	800c6e2 <_vfiprintf_r+0x4e>
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6dc:	b01d      	add	sp, #116	@ 0x74
 800c6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	0598      	lsls	r0, r3, #22
 800c6e6:	d4f7      	bmi.n	800c6d8 <_vfiprintf_r+0x44>
 800c6e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6ea:	f7ff ff4f 	bl	800c58c <__retarget_lock_release_recursive>
 800c6ee:	e7f3      	b.n	800c6d8 <_vfiprintf_r+0x44>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f4:	2320      	movs	r3, #32
 800c6f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6fe:	2330      	movs	r3, #48	@ 0x30
 800c700:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c8b0 <_vfiprintf_r+0x21c>
 800c704:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c708:	f04f 0901 	mov.w	r9, #1
 800c70c:	4623      	mov	r3, r4
 800c70e:	469a      	mov	sl, r3
 800c710:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c714:	b10a      	cbz	r2, 800c71a <_vfiprintf_r+0x86>
 800c716:	2a25      	cmp	r2, #37	@ 0x25
 800c718:	d1f9      	bne.n	800c70e <_vfiprintf_r+0x7a>
 800c71a:	ebba 0b04 	subs.w	fp, sl, r4
 800c71e:	d00b      	beq.n	800c738 <_vfiprintf_r+0xa4>
 800c720:	465b      	mov	r3, fp
 800c722:	4622      	mov	r2, r4
 800c724:	4629      	mov	r1, r5
 800c726:	4630      	mov	r0, r6
 800c728:	f7ff ffa1 	bl	800c66e <__sfputs_r>
 800c72c:	3001      	adds	r0, #1
 800c72e:	f000 80a7 	beq.w	800c880 <_vfiprintf_r+0x1ec>
 800c732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c734:	445a      	add	r2, fp
 800c736:	9209      	str	r2, [sp, #36]	@ 0x24
 800c738:	f89a 3000 	ldrb.w	r3, [sl]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 809f 	beq.w	800c880 <_vfiprintf_r+0x1ec>
 800c742:	2300      	movs	r3, #0
 800c744:	f04f 32ff 	mov.w	r2, #4294967295
 800c748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c74c:	f10a 0a01 	add.w	sl, sl, #1
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	9307      	str	r3, [sp, #28]
 800c754:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c758:	931a      	str	r3, [sp, #104]	@ 0x68
 800c75a:	4654      	mov	r4, sl
 800c75c:	2205      	movs	r2, #5
 800c75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c762:	4853      	ldr	r0, [pc, #332]	@ (800c8b0 <_vfiprintf_r+0x21c>)
 800c764:	f7f3 fd44 	bl	80001f0 <memchr>
 800c768:	9a04      	ldr	r2, [sp, #16]
 800c76a:	b9d8      	cbnz	r0, 800c7a4 <_vfiprintf_r+0x110>
 800c76c:	06d1      	lsls	r1, r2, #27
 800c76e:	bf44      	itt	mi
 800c770:	2320      	movmi	r3, #32
 800c772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c776:	0713      	lsls	r3, r2, #28
 800c778:	bf44      	itt	mi
 800c77a:	232b      	movmi	r3, #43	@ 0x2b
 800c77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c780:	f89a 3000 	ldrb.w	r3, [sl]
 800c784:	2b2a      	cmp	r3, #42	@ 0x2a
 800c786:	d015      	beq.n	800c7b4 <_vfiprintf_r+0x120>
 800c788:	9a07      	ldr	r2, [sp, #28]
 800c78a:	4654      	mov	r4, sl
 800c78c:	2000      	movs	r0, #0
 800c78e:	f04f 0c0a 	mov.w	ip, #10
 800c792:	4621      	mov	r1, r4
 800c794:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c798:	3b30      	subs	r3, #48	@ 0x30
 800c79a:	2b09      	cmp	r3, #9
 800c79c:	d94b      	bls.n	800c836 <_vfiprintf_r+0x1a2>
 800c79e:	b1b0      	cbz	r0, 800c7ce <_vfiprintf_r+0x13a>
 800c7a0:	9207      	str	r2, [sp, #28]
 800c7a2:	e014      	b.n	800c7ce <_vfiprintf_r+0x13a>
 800c7a4:	eba0 0308 	sub.w	r3, r0, r8
 800c7a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	9304      	str	r3, [sp, #16]
 800c7b0:	46a2      	mov	sl, r4
 800c7b2:	e7d2      	b.n	800c75a <_vfiprintf_r+0xc6>
 800c7b4:	9b03      	ldr	r3, [sp, #12]
 800c7b6:	1d19      	adds	r1, r3, #4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	9103      	str	r1, [sp, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	bfbb      	ittet	lt
 800c7c0:	425b      	neglt	r3, r3
 800c7c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7c6:	9307      	strge	r3, [sp, #28]
 800c7c8:	9307      	strlt	r3, [sp, #28]
 800c7ca:	bfb8      	it	lt
 800c7cc:	9204      	strlt	r2, [sp, #16]
 800c7ce:	7823      	ldrb	r3, [r4, #0]
 800c7d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7d2:	d10a      	bne.n	800c7ea <_vfiprintf_r+0x156>
 800c7d4:	7863      	ldrb	r3, [r4, #1]
 800c7d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d8:	d132      	bne.n	800c840 <_vfiprintf_r+0x1ac>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	9203      	str	r2, [sp, #12]
 800c7e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7e6:	3402      	adds	r4, #2
 800c7e8:	9305      	str	r3, [sp, #20]
 800c7ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c8c0 <_vfiprintf_r+0x22c>
 800c7ee:	7821      	ldrb	r1, [r4, #0]
 800c7f0:	2203      	movs	r2, #3
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	f7f3 fcfc 	bl	80001f0 <memchr>
 800c7f8:	b138      	cbz	r0, 800c80a <_vfiprintf_r+0x176>
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	eba0 000a 	sub.w	r0, r0, sl
 800c800:	2240      	movs	r2, #64	@ 0x40
 800c802:	4082      	lsls	r2, r0
 800c804:	4313      	orrs	r3, r2
 800c806:	3401      	adds	r4, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80e:	4829      	ldr	r0, [pc, #164]	@ (800c8b4 <_vfiprintf_r+0x220>)
 800c810:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c814:	2206      	movs	r2, #6
 800c816:	f7f3 fceb 	bl	80001f0 <memchr>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d03f      	beq.n	800c89e <_vfiprintf_r+0x20a>
 800c81e:	4b26      	ldr	r3, [pc, #152]	@ (800c8b8 <_vfiprintf_r+0x224>)
 800c820:	bb1b      	cbnz	r3, 800c86a <_vfiprintf_r+0x1d6>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	3307      	adds	r3, #7
 800c826:	f023 0307 	bic.w	r3, r3, #7
 800c82a:	3308      	adds	r3, #8
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c830:	443b      	add	r3, r7
 800c832:	9309      	str	r3, [sp, #36]	@ 0x24
 800c834:	e76a      	b.n	800c70c <_vfiprintf_r+0x78>
 800c836:	fb0c 3202 	mla	r2, ip, r2, r3
 800c83a:	460c      	mov	r4, r1
 800c83c:	2001      	movs	r0, #1
 800c83e:	e7a8      	b.n	800c792 <_vfiprintf_r+0xfe>
 800c840:	2300      	movs	r3, #0
 800c842:	3401      	adds	r4, #1
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	4619      	mov	r1, r3
 800c848:	f04f 0c0a 	mov.w	ip, #10
 800c84c:	4620      	mov	r0, r4
 800c84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c852:	3a30      	subs	r2, #48	@ 0x30
 800c854:	2a09      	cmp	r2, #9
 800c856:	d903      	bls.n	800c860 <_vfiprintf_r+0x1cc>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d0c6      	beq.n	800c7ea <_vfiprintf_r+0x156>
 800c85c:	9105      	str	r1, [sp, #20]
 800c85e:	e7c4      	b.n	800c7ea <_vfiprintf_r+0x156>
 800c860:	fb0c 2101 	mla	r1, ip, r1, r2
 800c864:	4604      	mov	r4, r0
 800c866:	2301      	movs	r3, #1
 800c868:	e7f0      	b.n	800c84c <_vfiprintf_r+0x1b8>
 800c86a:	ab03      	add	r3, sp, #12
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	462a      	mov	r2, r5
 800c870:	4b12      	ldr	r3, [pc, #72]	@ (800c8bc <_vfiprintf_r+0x228>)
 800c872:	a904      	add	r1, sp, #16
 800c874:	4630      	mov	r0, r6
 800c876:	f3af 8000 	nop.w
 800c87a:	4607      	mov	r7, r0
 800c87c:	1c78      	adds	r0, r7, #1
 800c87e:	d1d6      	bne.n	800c82e <_vfiprintf_r+0x19a>
 800c880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c882:	07d9      	lsls	r1, r3, #31
 800c884:	d405      	bmi.n	800c892 <_vfiprintf_r+0x1fe>
 800c886:	89ab      	ldrh	r3, [r5, #12]
 800c888:	059a      	lsls	r2, r3, #22
 800c88a:	d402      	bmi.n	800c892 <_vfiprintf_r+0x1fe>
 800c88c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c88e:	f7ff fe7d 	bl	800c58c <__retarget_lock_release_recursive>
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	065b      	lsls	r3, r3, #25
 800c896:	f53f af1f 	bmi.w	800c6d8 <_vfiprintf_r+0x44>
 800c89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c89c:	e71e      	b.n	800c6dc <_vfiprintf_r+0x48>
 800c89e:	ab03      	add	r3, sp, #12
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	4b05      	ldr	r3, [pc, #20]	@ (800c8bc <_vfiprintf_r+0x228>)
 800c8a6:	a904      	add	r1, sp, #16
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f000 f879 	bl	800c9a0 <_printf_i>
 800c8ae:	e7e4      	b.n	800c87a <_vfiprintf_r+0x1e6>
 800c8b0:	0800d028 	.word	0x0800d028
 800c8b4:	0800d032 	.word	0x0800d032
 800c8b8:	00000000 	.word	0x00000000
 800c8bc:	0800c66f 	.word	0x0800c66f
 800c8c0:	0800d02e 	.word	0x0800d02e

0800c8c4 <_printf_common>:
 800c8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c8:	4616      	mov	r6, r2
 800c8ca:	4698      	mov	r8, r3
 800c8cc:	688a      	ldr	r2, [r1, #8]
 800c8ce:	690b      	ldr	r3, [r1, #16]
 800c8d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	bfb8      	it	lt
 800c8d8:	4613      	movlt	r3, r2
 800c8da:	6033      	str	r3, [r6, #0]
 800c8dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	b10a      	cbz	r2, 800c8ea <_printf_common+0x26>
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	6033      	str	r3, [r6, #0]
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	0699      	lsls	r1, r3, #26
 800c8ee:	bf42      	ittt	mi
 800c8f0:	6833      	ldrmi	r3, [r6, #0]
 800c8f2:	3302      	addmi	r3, #2
 800c8f4:	6033      	strmi	r3, [r6, #0]
 800c8f6:	6825      	ldr	r5, [r4, #0]
 800c8f8:	f015 0506 	ands.w	r5, r5, #6
 800c8fc:	d106      	bne.n	800c90c <_printf_common+0x48>
 800c8fe:	f104 0a19 	add.w	sl, r4, #25
 800c902:	68e3      	ldr	r3, [r4, #12]
 800c904:	6832      	ldr	r2, [r6, #0]
 800c906:	1a9b      	subs	r3, r3, r2
 800c908:	42ab      	cmp	r3, r5
 800c90a:	dc26      	bgt.n	800c95a <_printf_common+0x96>
 800c90c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c910:	6822      	ldr	r2, [r4, #0]
 800c912:	3b00      	subs	r3, #0
 800c914:	bf18      	it	ne
 800c916:	2301      	movne	r3, #1
 800c918:	0692      	lsls	r2, r2, #26
 800c91a:	d42b      	bmi.n	800c974 <_printf_common+0xb0>
 800c91c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c920:	4641      	mov	r1, r8
 800c922:	4638      	mov	r0, r7
 800c924:	47c8      	blx	r9
 800c926:	3001      	adds	r0, #1
 800c928:	d01e      	beq.n	800c968 <_printf_common+0xa4>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	6922      	ldr	r2, [r4, #16]
 800c92e:	f003 0306 	and.w	r3, r3, #6
 800c932:	2b04      	cmp	r3, #4
 800c934:	bf02      	ittt	eq
 800c936:	68e5      	ldreq	r5, [r4, #12]
 800c938:	6833      	ldreq	r3, [r6, #0]
 800c93a:	1aed      	subeq	r5, r5, r3
 800c93c:	68a3      	ldr	r3, [r4, #8]
 800c93e:	bf0c      	ite	eq
 800c940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c944:	2500      	movne	r5, #0
 800c946:	4293      	cmp	r3, r2
 800c948:	bfc4      	itt	gt
 800c94a:	1a9b      	subgt	r3, r3, r2
 800c94c:	18ed      	addgt	r5, r5, r3
 800c94e:	2600      	movs	r6, #0
 800c950:	341a      	adds	r4, #26
 800c952:	42b5      	cmp	r5, r6
 800c954:	d11a      	bne.n	800c98c <_printf_common+0xc8>
 800c956:	2000      	movs	r0, #0
 800c958:	e008      	b.n	800c96c <_printf_common+0xa8>
 800c95a:	2301      	movs	r3, #1
 800c95c:	4652      	mov	r2, sl
 800c95e:	4641      	mov	r1, r8
 800c960:	4638      	mov	r0, r7
 800c962:	47c8      	blx	r9
 800c964:	3001      	adds	r0, #1
 800c966:	d103      	bne.n	800c970 <_printf_common+0xac>
 800c968:	f04f 30ff 	mov.w	r0, #4294967295
 800c96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c970:	3501      	adds	r5, #1
 800c972:	e7c6      	b.n	800c902 <_printf_common+0x3e>
 800c974:	18e1      	adds	r1, r4, r3
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	2030      	movs	r0, #48	@ 0x30
 800c97a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c97e:	4422      	add	r2, r4
 800c980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c988:	3302      	adds	r3, #2
 800c98a:	e7c7      	b.n	800c91c <_printf_common+0x58>
 800c98c:	2301      	movs	r3, #1
 800c98e:	4622      	mov	r2, r4
 800c990:	4641      	mov	r1, r8
 800c992:	4638      	mov	r0, r7
 800c994:	47c8      	blx	r9
 800c996:	3001      	adds	r0, #1
 800c998:	d0e6      	beq.n	800c968 <_printf_common+0xa4>
 800c99a:	3601      	adds	r6, #1
 800c99c:	e7d9      	b.n	800c952 <_printf_common+0x8e>
	...

0800c9a0 <_printf_i>:
 800c9a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	7e0f      	ldrb	r7, [r1, #24]
 800c9a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c9a8:	2f78      	cmp	r7, #120	@ 0x78
 800c9aa:	4691      	mov	r9, r2
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	469a      	mov	sl, r3
 800c9b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c9b6:	d807      	bhi.n	800c9c8 <_printf_i+0x28>
 800c9b8:	2f62      	cmp	r7, #98	@ 0x62
 800c9ba:	d80a      	bhi.n	800c9d2 <_printf_i+0x32>
 800c9bc:	2f00      	cmp	r7, #0
 800c9be:	f000 80d2 	beq.w	800cb66 <_printf_i+0x1c6>
 800c9c2:	2f58      	cmp	r7, #88	@ 0x58
 800c9c4:	f000 80b9 	beq.w	800cb3a <_printf_i+0x19a>
 800c9c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c9d0:	e03a      	b.n	800ca48 <_printf_i+0xa8>
 800c9d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c9d6:	2b15      	cmp	r3, #21
 800c9d8:	d8f6      	bhi.n	800c9c8 <_printf_i+0x28>
 800c9da:	a101      	add	r1, pc, #4	@ (adr r1, 800c9e0 <_printf_i+0x40>)
 800c9dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9e0:	0800ca39 	.word	0x0800ca39
 800c9e4:	0800ca4d 	.word	0x0800ca4d
 800c9e8:	0800c9c9 	.word	0x0800c9c9
 800c9ec:	0800c9c9 	.word	0x0800c9c9
 800c9f0:	0800c9c9 	.word	0x0800c9c9
 800c9f4:	0800c9c9 	.word	0x0800c9c9
 800c9f8:	0800ca4d 	.word	0x0800ca4d
 800c9fc:	0800c9c9 	.word	0x0800c9c9
 800ca00:	0800c9c9 	.word	0x0800c9c9
 800ca04:	0800c9c9 	.word	0x0800c9c9
 800ca08:	0800c9c9 	.word	0x0800c9c9
 800ca0c:	0800cb4d 	.word	0x0800cb4d
 800ca10:	0800ca77 	.word	0x0800ca77
 800ca14:	0800cb07 	.word	0x0800cb07
 800ca18:	0800c9c9 	.word	0x0800c9c9
 800ca1c:	0800c9c9 	.word	0x0800c9c9
 800ca20:	0800cb6f 	.word	0x0800cb6f
 800ca24:	0800c9c9 	.word	0x0800c9c9
 800ca28:	0800ca77 	.word	0x0800ca77
 800ca2c:	0800c9c9 	.word	0x0800c9c9
 800ca30:	0800c9c9 	.word	0x0800c9c9
 800ca34:	0800cb0f 	.word	0x0800cb0f
 800ca38:	6833      	ldr	r3, [r6, #0]
 800ca3a:	1d1a      	adds	r2, r3, #4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	6032      	str	r2, [r6, #0]
 800ca40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e09d      	b.n	800cb88 <_printf_i+0x1e8>
 800ca4c:	6833      	ldr	r3, [r6, #0]
 800ca4e:	6820      	ldr	r0, [r4, #0]
 800ca50:	1d19      	adds	r1, r3, #4
 800ca52:	6031      	str	r1, [r6, #0]
 800ca54:	0606      	lsls	r6, r0, #24
 800ca56:	d501      	bpl.n	800ca5c <_printf_i+0xbc>
 800ca58:	681d      	ldr	r5, [r3, #0]
 800ca5a:	e003      	b.n	800ca64 <_printf_i+0xc4>
 800ca5c:	0645      	lsls	r5, r0, #25
 800ca5e:	d5fb      	bpl.n	800ca58 <_printf_i+0xb8>
 800ca60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca64:	2d00      	cmp	r5, #0
 800ca66:	da03      	bge.n	800ca70 <_printf_i+0xd0>
 800ca68:	232d      	movs	r3, #45	@ 0x2d
 800ca6a:	426d      	negs	r5, r5
 800ca6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca70:	4859      	ldr	r0, [pc, #356]	@ (800cbd8 <_printf_i+0x238>)
 800ca72:	230a      	movs	r3, #10
 800ca74:	e011      	b.n	800ca9a <_printf_i+0xfa>
 800ca76:	6821      	ldr	r1, [r4, #0]
 800ca78:	6833      	ldr	r3, [r6, #0]
 800ca7a:	0608      	lsls	r0, r1, #24
 800ca7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca80:	d402      	bmi.n	800ca88 <_printf_i+0xe8>
 800ca82:	0649      	lsls	r1, r1, #25
 800ca84:	bf48      	it	mi
 800ca86:	b2ad      	uxthmi	r5, r5
 800ca88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca8a:	4853      	ldr	r0, [pc, #332]	@ (800cbd8 <_printf_i+0x238>)
 800ca8c:	6033      	str	r3, [r6, #0]
 800ca8e:	bf14      	ite	ne
 800ca90:	230a      	movne	r3, #10
 800ca92:	2308      	moveq	r3, #8
 800ca94:	2100      	movs	r1, #0
 800ca96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca9a:	6866      	ldr	r6, [r4, #4]
 800ca9c:	60a6      	str	r6, [r4, #8]
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	bfa2      	ittt	ge
 800caa2:	6821      	ldrge	r1, [r4, #0]
 800caa4:	f021 0104 	bicge.w	r1, r1, #4
 800caa8:	6021      	strge	r1, [r4, #0]
 800caaa:	b90d      	cbnz	r5, 800cab0 <_printf_i+0x110>
 800caac:	2e00      	cmp	r6, #0
 800caae:	d04b      	beq.n	800cb48 <_printf_i+0x1a8>
 800cab0:	4616      	mov	r6, r2
 800cab2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cab6:	fb03 5711 	mls	r7, r3, r1, r5
 800caba:	5dc7      	ldrb	r7, [r0, r7]
 800cabc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cac0:	462f      	mov	r7, r5
 800cac2:	42bb      	cmp	r3, r7
 800cac4:	460d      	mov	r5, r1
 800cac6:	d9f4      	bls.n	800cab2 <_printf_i+0x112>
 800cac8:	2b08      	cmp	r3, #8
 800caca:	d10b      	bne.n	800cae4 <_printf_i+0x144>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	07df      	lsls	r7, r3, #31
 800cad0:	d508      	bpl.n	800cae4 <_printf_i+0x144>
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	6861      	ldr	r1, [r4, #4]
 800cad6:	4299      	cmp	r1, r3
 800cad8:	bfde      	ittt	le
 800cada:	2330      	movle	r3, #48	@ 0x30
 800cadc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cae4:	1b92      	subs	r2, r2, r6
 800cae6:	6122      	str	r2, [r4, #16]
 800cae8:	f8cd a000 	str.w	sl, [sp]
 800caec:	464b      	mov	r3, r9
 800caee:	aa03      	add	r2, sp, #12
 800caf0:	4621      	mov	r1, r4
 800caf2:	4640      	mov	r0, r8
 800caf4:	f7ff fee6 	bl	800c8c4 <_printf_common>
 800caf8:	3001      	adds	r0, #1
 800cafa:	d14a      	bne.n	800cb92 <_printf_i+0x1f2>
 800cafc:	f04f 30ff 	mov.w	r0, #4294967295
 800cb00:	b004      	add	sp, #16
 800cb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	f043 0320 	orr.w	r3, r3, #32
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	4833      	ldr	r0, [pc, #204]	@ (800cbdc <_printf_i+0x23c>)
 800cb10:	2778      	movs	r7, #120	@ 0x78
 800cb12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	6831      	ldr	r1, [r6, #0]
 800cb1a:	061f      	lsls	r7, r3, #24
 800cb1c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb20:	d402      	bmi.n	800cb28 <_printf_i+0x188>
 800cb22:	065f      	lsls	r7, r3, #25
 800cb24:	bf48      	it	mi
 800cb26:	b2ad      	uxthmi	r5, r5
 800cb28:	6031      	str	r1, [r6, #0]
 800cb2a:	07d9      	lsls	r1, r3, #31
 800cb2c:	bf44      	itt	mi
 800cb2e:	f043 0320 	orrmi.w	r3, r3, #32
 800cb32:	6023      	strmi	r3, [r4, #0]
 800cb34:	b11d      	cbz	r5, 800cb3e <_printf_i+0x19e>
 800cb36:	2310      	movs	r3, #16
 800cb38:	e7ac      	b.n	800ca94 <_printf_i+0xf4>
 800cb3a:	4827      	ldr	r0, [pc, #156]	@ (800cbd8 <_printf_i+0x238>)
 800cb3c:	e7e9      	b.n	800cb12 <_printf_i+0x172>
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	f023 0320 	bic.w	r3, r3, #32
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	e7f6      	b.n	800cb36 <_printf_i+0x196>
 800cb48:	4616      	mov	r6, r2
 800cb4a:	e7bd      	b.n	800cac8 <_printf_i+0x128>
 800cb4c:	6833      	ldr	r3, [r6, #0]
 800cb4e:	6825      	ldr	r5, [r4, #0]
 800cb50:	6961      	ldr	r1, [r4, #20]
 800cb52:	1d18      	adds	r0, r3, #4
 800cb54:	6030      	str	r0, [r6, #0]
 800cb56:	062e      	lsls	r6, r5, #24
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	d501      	bpl.n	800cb60 <_printf_i+0x1c0>
 800cb5c:	6019      	str	r1, [r3, #0]
 800cb5e:	e002      	b.n	800cb66 <_printf_i+0x1c6>
 800cb60:	0668      	lsls	r0, r5, #25
 800cb62:	d5fb      	bpl.n	800cb5c <_printf_i+0x1bc>
 800cb64:	8019      	strh	r1, [r3, #0]
 800cb66:	2300      	movs	r3, #0
 800cb68:	6123      	str	r3, [r4, #16]
 800cb6a:	4616      	mov	r6, r2
 800cb6c:	e7bc      	b.n	800cae8 <_printf_i+0x148>
 800cb6e:	6833      	ldr	r3, [r6, #0]
 800cb70:	1d1a      	adds	r2, r3, #4
 800cb72:	6032      	str	r2, [r6, #0]
 800cb74:	681e      	ldr	r6, [r3, #0]
 800cb76:	6862      	ldr	r2, [r4, #4]
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f7f3 fb38 	bl	80001f0 <memchr>
 800cb80:	b108      	cbz	r0, 800cb86 <_printf_i+0x1e6>
 800cb82:	1b80      	subs	r0, r0, r6
 800cb84:	6060      	str	r0, [r4, #4]
 800cb86:	6863      	ldr	r3, [r4, #4]
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb90:	e7aa      	b.n	800cae8 <_printf_i+0x148>
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	4632      	mov	r2, r6
 800cb96:	4649      	mov	r1, r9
 800cb98:	4640      	mov	r0, r8
 800cb9a:	47d0      	blx	sl
 800cb9c:	3001      	adds	r0, #1
 800cb9e:	d0ad      	beq.n	800cafc <_printf_i+0x15c>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	079b      	lsls	r3, r3, #30
 800cba4:	d413      	bmi.n	800cbce <_printf_i+0x22e>
 800cba6:	68e0      	ldr	r0, [r4, #12]
 800cba8:	9b03      	ldr	r3, [sp, #12]
 800cbaa:	4298      	cmp	r0, r3
 800cbac:	bfb8      	it	lt
 800cbae:	4618      	movlt	r0, r3
 800cbb0:	e7a6      	b.n	800cb00 <_printf_i+0x160>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	4632      	mov	r2, r6
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	4640      	mov	r0, r8
 800cbba:	47d0      	blx	sl
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d09d      	beq.n	800cafc <_printf_i+0x15c>
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	9903      	ldr	r1, [sp, #12]
 800cbc6:	1a5b      	subs	r3, r3, r1
 800cbc8:	42ab      	cmp	r3, r5
 800cbca:	dcf2      	bgt.n	800cbb2 <_printf_i+0x212>
 800cbcc:	e7eb      	b.n	800cba6 <_printf_i+0x206>
 800cbce:	2500      	movs	r5, #0
 800cbd0:	f104 0619 	add.w	r6, r4, #25
 800cbd4:	e7f5      	b.n	800cbc2 <_printf_i+0x222>
 800cbd6:	bf00      	nop
 800cbd8:	0800d039 	.word	0x0800d039
 800cbdc:	0800d04a 	.word	0x0800d04a

0800cbe0 <__sflush_r>:
 800cbe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	0716      	lsls	r6, r2, #28
 800cbea:	4605      	mov	r5, r0
 800cbec:	460c      	mov	r4, r1
 800cbee:	d454      	bmi.n	800cc9a <__sflush_r+0xba>
 800cbf0:	684b      	ldr	r3, [r1, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dc02      	bgt.n	800cbfc <__sflush_r+0x1c>
 800cbf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dd48      	ble.n	800cc8e <__sflush_r+0xae>
 800cbfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbfe:	2e00      	cmp	r6, #0
 800cc00:	d045      	beq.n	800cc8e <__sflush_r+0xae>
 800cc02:	2300      	movs	r3, #0
 800cc04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc08:	682f      	ldr	r7, [r5, #0]
 800cc0a:	6a21      	ldr	r1, [r4, #32]
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	d030      	beq.n	800cc72 <__sflush_r+0x92>
 800cc10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	0759      	lsls	r1, r3, #29
 800cc16:	d505      	bpl.n	800cc24 <__sflush_r+0x44>
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	1ad2      	subs	r2, r2, r3
 800cc1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc1e:	b10b      	cbz	r3, 800cc24 <__sflush_r+0x44>
 800cc20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc22:	1ad2      	subs	r2, r2, r3
 800cc24:	2300      	movs	r3, #0
 800cc26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc28:	6a21      	ldr	r1, [r4, #32]
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	47b0      	blx	r6
 800cc2e:	1c43      	adds	r3, r0, #1
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	d106      	bne.n	800cc42 <__sflush_r+0x62>
 800cc34:	6829      	ldr	r1, [r5, #0]
 800cc36:	291d      	cmp	r1, #29
 800cc38:	d82b      	bhi.n	800cc92 <__sflush_r+0xb2>
 800cc3a:	4a2a      	ldr	r2, [pc, #168]	@ (800cce4 <__sflush_r+0x104>)
 800cc3c:	410a      	asrs	r2, r1
 800cc3e:	07d6      	lsls	r6, r2, #31
 800cc40:	d427      	bmi.n	800cc92 <__sflush_r+0xb2>
 800cc42:	2200      	movs	r2, #0
 800cc44:	6062      	str	r2, [r4, #4]
 800cc46:	04d9      	lsls	r1, r3, #19
 800cc48:	6922      	ldr	r2, [r4, #16]
 800cc4a:	6022      	str	r2, [r4, #0]
 800cc4c:	d504      	bpl.n	800cc58 <__sflush_r+0x78>
 800cc4e:	1c42      	adds	r2, r0, #1
 800cc50:	d101      	bne.n	800cc56 <__sflush_r+0x76>
 800cc52:	682b      	ldr	r3, [r5, #0]
 800cc54:	b903      	cbnz	r3, 800cc58 <__sflush_r+0x78>
 800cc56:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc5a:	602f      	str	r7, [r5, #0]
 800cc5c:	b1b9      	cbz	r1, 800cc8e <__sflush_r+0xae>
 800cc5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc62:	4299      	cmp	r1, r3
 800cc64:	d002      	beq.n	800cc6c <__sflush_r+0x8c>
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7ff fca0 	bl	800c5ac <_free_r>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc70:	e00d      	b.n	800cc8e <__sflush_r+0xae>
 800cc72:	2301      	movs	r3, #1
 800cc74:	4628      	mov	r0, r5
 800cc76:	47b0      	blx	r6
 800cc78:	4602      	mov	r2, r0
 800cc7a:	1c50      	adds	r0, r2, #1
 800cc7c:	d1c9      	bne.n	800cc12 <__sflush_r+0x32>
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0c6      	beq.n	800cc12 <__sflush_r+0x32>
 800cc84:	2b1d      	cmp	r3, #29
 800cc86:	d001      	beq.n	800cc8c <__sflush_r+0xac>
 800cc88:	2b16      	cmp	r3, #22
 800cc8a:	d11e      	bne.n	800ccca <__sflush_r+0xea>
 800cc8c:	602f      	str	r7, [r5, #0]
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e022      	b.n	800ccd8 <__sflush_r+0xf8>
 800cc92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc96:	b21b      	sxth	r3, r3
 800cc98:	e01b      	b.n	800ccd2 <__sflush_r+0xf2>
 800cc9a:	690f      	ldr	r7, [r1, #16]
 800cc9c:	2f00      	cmp	r7, #0
 800cc9e:	d0f6      	beq.n	800cc8e <__sflush_r+0xae>
 800cca0:	0793      	lsls	r3, r2, #30
 800cca2:	680e      	ldr	r6, [r1, #0]
 800cca4:	bf08      	it	eq
 800cca6:	694b      	ldreq	r3, [r1, #20]
 800cca8:	600f      	str	r7, [r1, #0]
 800ccaa:	bf18      	it	ne
 800ccac:	2300      	movne	r3, #0
 800ccae:	eba6 0807 	sub.w	r8, r6, r7
 800ccb2:	608b      	str	r3, [r1, #8]
 800ccb4:	f1b8 0f00 	cmp.w	r8, #0
 800ccb8:	dde9      	ble.n	800cc8e <__sflush_r+0xae>
 800ccba:	6a21      	ldr	r1, [r4, #32]
 800ccbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ccbe:	4643      	mov	r3, r8
 800ccc0:	463a      	mov	r2, r7
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	47b0      	blx	r6
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	dc08      	bgt.n	800ccdc <__sflush_r+0xfc>
 800ccca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccd2:	81a3      	strh	r3, [r4, #12]
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccdc:	4407      	add	r7, r0
 800ccde:	eba8 0800 	sub.w	r8, r8, r0
 800cce2:	e7e7      	b.n	800ccb4 <__sflush_r+0xd4>
 800cce4:	dfbffffe 	.word	0xdfbffffe

0800cce8 <_fflush_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	690b      	ldr	r3, [r1, #16]
 800ccec:	4605      	mov	r5, r0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	b913      	cbnz	r3, 800ccf8 <_fflush_r+0x10>
 800ccf2:	2500      	movs	r5, #0
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	b118      	cbz	r0, 800cd02 <_fflush_r+0x1a>
 800ccfa:	6a03      	ldr	r3, [r0, #32]
 800ccfc:	b90b      	cbnz	r3, 800cd02 <_fflush_r+0x1a>
 800ccfe:	f7ff fa2b 	bl	800c158 <__sinit>
 800cd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d0f3      	beq.n	800ccf2 <_fflush_r+0xa>
 800cd0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd0c:	07d0      	lsls	r0, r2, #31
 800cd0e:	d404      	bmi.n	800cd1a <_fflush_r+0x32>
 800cd10:	0599      	lsls	r1, r3, #22
 800cd12:	d402      	bmi.n	800cd1a <_fflush_r+0x32>
 800cd14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd16:	f7ff fc38 	bl	800c58a <__retarget_lock_acquire_recursive>
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	f7ff ff5f 	bl	800cbe0 <__sflush_r>
 800cd22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd24:	07da      	lsls	r2, r3, #31
 800cd26:	4605      	mov	r5, r0
 800cd28:	d4e4      	bmi.n	800ccf4 <_fflush_r+0xc>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	059b      	lsls	r3, r3, #22
 800cd2e:	d4e1      	bmi.n	800ccf4 <_fflush_r+0xc>
 800cd30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd32:	f7ff fc2b 	bl	800c58c <__retarget_lock_release_recursive>
 800cd36:	e7dd      	b.n	800ccf4 <_fflush_r+0xc>

0800cd38 <__swhatbuf_r>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd40:	2900      	cmp	r1, #0
 800cd42:	b096      	sub	sp, #88	@ 0x58
 800cd44:	4615      	mov	r5, r2
 800cd46:	461e      	mov	r6, r3
 800cd48:	da0d      	bge.n	800cd66 <__swhatbuf_r+0x2e>
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd50:	f04f 0100 	mov.w	r1, #0
 800cd54:	bf14      	ite	ne
 800cd56:	2340      	movne	r3, #64	@ 0x40
 800cd58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	6031      	str	r1, [r6, #0]
 800cd60:	602b      	str	r3, [r5, #0]
 800cd62:	b016      	add	sp, #88	@ 0x58
 800cd64:	bd70      	pop	{r4, r5, r6, pc}
 800cd66:	466a      	mov	r2, sp
 800cd68:	f000 f848 	bl	800cdfc <_fstat_r>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	dbec      	blt.n	800cd4a <__swhatbuf_r+0x12>
 800cd70:	9901      	ldr	r1, [sp, #4]
 800cd72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd7a:	4259      	negs	r1, r3
 800cd7c:	4159      	adcs	r1, r3
 800cd7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd82:	e7eb      	b.n	800cd5c <__swhatbuf_r+0x24>

0800cd84 <__smakebuf_r>:
 800cd84:	898b      	ldrh	r3, [r1, #12]
 800cd86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd88:	079d      	lsls	r5, r3, #30
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	d507      	bpl.n	800cda0 <__smakebuf_r+0x1c>
 800cd90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6163      	str	r3, [r4, #20]
 800cd9c:	b003      	add	sp, #12
 800cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda0:	ab01      	add	r3, sp, #4
 800cda2:	466a      	mov	r2, sp
 800cda4:	f7ff ffc8 	bl	800cd38 <__swhatbuf_r>
 800cda8:	9f00      	ldr	r7, [sp, #0]
 800cdaa:	4605      	mov	r5, r0
 800cdac:	4639      	mov	r1, r7
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7ff f8ba 	bl	800bf28 <_malloc_r>
 800cdb4:	b948      	cbnz	r0, 800cdca <__smakebuf_r+0x46>
 800cdb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdba:	059a      	lsls	r2, r3, #22
 800cdbc:	d4ee      	bmi.n	800cd9c <__smakebuf_r+0x18>
 800cdbe:	f023 0303 	bic.w	r3, r3, #3
 800cdc2:	f043 0302 	orr.w	r3, r3, #2
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	e7e2      	b.n	800cd90 <__smakebuf_r+0xc>
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	6020      	str	r0, [r4, #0]
 800cdce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdd2:	81a3      	strh	r3, [r4, #12]
 800cdd4:	9b01      	ldr	r3, [sp, #4]
 800cdd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdda:	b15b      	cbz	r3, 800cdf4 <__smakebuf_r+0x70>
 800cddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde0:	4630      	mov	r0, r6
 800cde2:	f000 f81d 	bl	800ce20 <_isatty_r>
 800cde6:	b128      	cbz	r0, 800cdf4 <__smakebuf_r+0x70>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f023 0303 	bic.w	r3, r3, #3
 800cdee:	f043 0301 	orr.w	r3, r3, #1
 800cdf2:	81a3      	strh	r3, [r4, #12]
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	431d      	orrs	r5, r3
 800cdf8:	81a5      	strh	r5, [r4, #12]
 800cdfa:	e7cf      	b.n	800cd9c <__smakebuf_r+0x18>

0800cdfc <_fstat_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4d07      	ldr	r5, [pc, #28]	@ (800ce1c <_fstat_r+0x20>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4604      	mov	r4, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	4611      	mov	r1, r2
 800ce08:	602b      	str	r3, [r5, #0]
 800ce0a:	f7fb fb6b 	bl	80084e4 <_fstat>
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	d102      	bne.n	800ce18 <_fstat_r+0x1c>
 800ce12:	682b      	ldr	r3, [r5, #0]
 800ce14:	b103      	cbz	r3, 800ce18 <_fstat_r+0x1c>
 800ce16:	6023      	str	r3, [r4, #0]
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20000c78 	.word	0x20000c78

0800ce20 <_isatty_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d06      	ldr	r5, [pc, #24]	@ (800ce3c <_isatty_r+0x1c>)
 800ce24:	2300      	movs	r3, #0
 800ce26:	4604      	mov	r4, r0
 800ce28:	4608      	mov	r0, r1
 800ce2a:	602b      	str	r3, [r5, #0]
 800ce2c:	f7fb fb60 	bl	80084f0 <_isatty>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <_isatty_r+0x1a>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b103      	cbz	r3, 800ce3a <_isatty_r+0x1a>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}
 800ce3c:	20000c78 	.word	0x20000c78

0800ce40 <_init>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr

0800ce4c <_fini>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr
